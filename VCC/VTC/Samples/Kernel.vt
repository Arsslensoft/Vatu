
default asm {
"[org 0]";

"start:";
	"mov ax,cs";
	"mov ds,ax";
	"mov es,ax";
	"mov ax,0x7000";
	"mov ss,ax";
	"mov sp,ss";
}

namespace std;
enum CONSOLE_COLORS{
BLUE = 1,
GREEN = 2,
RED = 4

};
struct XA{
int a;
byte b;
};
typedef enum CONSOLE_COLORS CCOLORS;
// get char
 byte getc(){
byte c = 0;
   asm{
   "mov ah, 0";
   "int 0x16   ; wait for keypress";
   "mov [BP-1], al";
	"mov ah, 0x0E";
    "int 0x10      ; otherwise, print out the character!";
   }
   
   return c;
}
// put char
 void putc(byte c){
asm{
"xor cx,cx";
"xor dx,dx";
"xor bx,bx";
}

asm{

	"mov byte al, [BP+4]";
	"mov ah, 0x0E";
    "int 0x10      ; otherwise, print out the character!";
  }

}
// print null terminated string
 void print(string msg){

int i = 0;
asm{
"xor cx,cx";
"xor dx,dx";
"xor bx,bx";
"xor ax,ax";
}
// 0 end of string
byte c;
while(msg[i] != 0)
	{
	c = msg[i];
	asm{
	"mov byte al, [BP-3]";
	"mov ah, 0x0E";
    "int 0x10";
  }
  i++;

	}


}

 void cls()
{
asm{
"xor cx,cx";
"xor dx,dx";
"xor bx,bx";
"mov ax, 0x0003";
"int 0x10";

}
}
 void lnprint(string msg){
 asm{
	"mov al, 0xA";
	"mov ah, 0x0E";
    "int 0x10      ; otherwise, print out the character!";
	"mov al, 0x0D";
	"mov ah, 0x0E";
    "int 0x10      ; otherwise, print out the character!";
  }
 print(msg);

}

 void println(string msg){

 print(msg);
  asm{
	"mov al, 0xA";
	"mov ah, 0x0E";
    "int 0x10      ; otherwise, print out the character!";
	"mov al, 0x0D";
	"mov ah, 0x0E";
    "int 0x10      ; otherwise, print out the character!";
  }

}
 void getstring(string buff){
 byte cc = 0;
 int  i = 0;
 cc = getc();
 while(cc != 0x0D){
    buff[i] = cc;
	i++;
	cc = getc();
	}
buff[i] = 0;

}
 void print_color(string msg, byte color)
{
int i = 0;
byte c = 0;
asm{
	"mov ax,0xb800";
	"mov gs,ax";
	"push word gs"; // save gs
	"mov bx,0";
	"mov si,[BP+6]";
	"mov ch,[BP+4]";
}

loop{

asm{
		"lodsb" ;
		"or al,al";
		"jz done";
		"mov byte [gs:bx],al";
		"mov byte [gs:bx+1],ch";
		"add bx,2";
		}

}
done:
asm{
"pop word gs";
}

}

namespace String;
use std;

override bool operator ==(string b, string a)
{
 for(;*a == *b;) {

   if(*a == 0)
      return true;

	  a++;
	  b++;

	 }
	 
return false;
}
override bool operator >(string a, string b)
{
 for(;*a == *b;) {

   if(*a == 0)
      return false;

	  a++;
	  b++;

	 }
	 if(*a > *b)
			return true;

return false;
}


override bool operator <(string a, string b)
{
 for(;*a == *b;) {

   if(*a == 0)
      return false;

	  a++;
	  b++;

	 }
	 if(*a < *b)
			return true;

return false;
}
override string operator +(string a, string b)
{
 int i = 0;
 int j = 0;
 while(a[i] != 0)
   i++;

while(b[j] != 0){
  a[i] = b[j];
  j++;
  i++;
  }
a[i] = 0;


 return a;

}

 uint strlen(string a)
{
 uint i = 0;
 while(a[i] != 0)
  i++;

  return i;
}

 void tostring(bool v)
{
if(v == true)
 print("TRUE");
else
print("FALSE");

}
 void tostring(uint a){
if(a < 10)
  putc((byte)(a+48));
  else{
  	tostring(a / 10);
  	putc(48+(a % 10));

  }


}
 void reverse(string str, int length)
{
    uint start = 0;
    uint end;

	end = length -1;
    while (start < end)
    {
       str[start] <> str[end];
        start++;
        end--;
    }
}

namespace OPERATIONS;
use std;
use String;
 bool isdigit(byte c)
{
  if(c >= 48 && c <= 57)
     return true;
	else return false;
}
 uint a2u(string s)
{
int i = 0;
 uint num=0;
 while(s[i] != 0)
  {
  if(isdigit(s[i]) == true)
    num=(uint)((s[i])-'0')+num*10;
  else
   println("Not a number");
    i++;  
	 
  }

 return num;
}



private string prompt = ">>";
private string NM_msg = "Type a number : ";
private string buff = "00000"; // 5 digits number
private string OP_msg = "Type an operator (+,-,*,/): ";
const string OP_PL = "+";
const string OP_MI = "-";
const string OP_MUL = "*";
const string OP_DIV = "/";
 void operate(){
	uint a = 0;
	uint b = 0;
	uint r = 0;
	lnprint(NM_msg);
	lnprint(prompt);
	getstring(buff);
	a = a2u(buff);
	lnprint(NM_msg);
	lnprint(prompt);
	getstring(buff);
	b = a2u(buff);
	lnprint(OP_msg);
	lnprint(prompt);
	getstring(buff);

	if(OP_PL == buff)
	 r = a+b;
	else if(OP_MI == buff)
	 r = a-b;
	else if(OP_DIV == buff)
	 r = a/b;
	else if(OP_MUL == buff)
	 r = a * b;
	 else
	 lnprint("Unknown Operator only (+,*,-,/) are allowed");


lnprint("RESULT : ");
	tostring(r);
	
	


}

namespace VTOS;
use std;
use String;
use OPERATIONS;
const string prompt = ">";
string input = "000000000000000000000000000000000000000000000000000000000";
const string hello_cmd = "hello";
const string about_cmd = "about";
const string op_cmd = "oper";
const string op_help = "help";
const string op_sd = "shutdown";
const string op_res = "restart";
const string op_swap = "s";

const string help_msg = "oper : Operation, help : Help, hello : Hello World, about : About, shutdown, restart";
const string about_text = "This os is a simple demo written to test Vatu compiler";

struct XA* buffer[5];

 void restart() {
asm{
"int 0x19";
}

}
 void shutdown() {
asm{
    "mov ax, 0x1000";
    "mov ax, ss";
    "mov sp, 0xf000";
    "mov ax, 0x5307";
    "mov bx, 0x0001";
    "mov cx, 0x0003";
    "int 0x15";
	}
}
struct XA v;
void testArrayCast(){
int i=0;
byte *p;
byte bk;

// allocation
struct XA a;
struct XA b;
struct XA* px;
v.b = 66;
a.b = 65;
px = &a;
b = *px;
bk = v.b;
p = &(bk);
putc(a.b);
putc(b.b);
putc(v.b);
putc(*p);
/*
// assign
buffer[0] =&a;
buffer[1] = &b;



struct XA x;
struct XA* px;
for(i = 0;i < 2; i++){
	px = buffer[i];
	x = *(px);
	x.b = 65+i;
	}

	lnprint("Result : ");
for(i = 0;i < 2; i++){
px = buffer[i];
		x = *(px);
	putc(x.b);

	}*/
lnprint(" ");	
}
entry void main()
{

cls();
	print_color("Welcome to Vatu OS Kernel", CONSOLE_COLORS.BLUE);
	lnprint("Write your command : ");
	testArrayCast();
	loop{
	lnprint(prompt);
	getstring(input);
	 if(hello_cmd == input)
		lnprint("Hello, from Vatu OS");
	else if(about_cmd == input)
			lnprint(about_text);
	else if(op_cmd == input)
	  operate();
	else if(op_help == input)
	 lnprint(help_msg);
	else if(op_sd == input)
		shutdown();
	else if(op_res == input)
		restart();
	else if(op_res == input)
		restart();

	else
		lnprint("Unknown command");
	
	}

}

