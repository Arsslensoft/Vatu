namespace Types.Type
{
#include "STD.vt"
public struct Point{
int x;
int y;
string Name;
};

public struct LinkedList
{
	@Point val;
	 @LinkedList * Next;
};

public typedef @Point PPoint;
private typedef @Point PRPoint;

}
namespace DOS
{
use std.console;
use Types.Type;
extern asm {
	"MYLABEL:";
}
public string result;

public define bool op_TEqual operator @@=;
public define op_UPPER operator @||;
public define op_CONCAT operator @@+,+++++;


public override string operator @@+,+++++(string a,string b)
{
  string p = result;
  for(;*a != '$';p++){
			*p = *a;
	a++;
	}
  for(;*b != '$';p++){
			*p = *b;
	b++;
	}
*p = '$';
return result;

}
public override string operator @||(string a)
{
string p = a;

  for(;*p != '$';)
	{

	if(*p >= 97b)
		*p = *p - 32b;

	p++;
	}
return a;
}
public override bool operator @@=(string a,string b)
{
	return false;
}
public void tostring(uint x){
if(x < 10u)
putc((byte)x + 48);
else
{
tostring(x / 10);
putc((byte)(x % 10) + 48);
}

}
public void Set(byte *b)
{
	*b = 65;
}
public void Set(ref byte c)
{
	Set(&c);

}

public void Set(ref @LinkedList p,ref @LinkedList tmp,@Point pt, string name)
{

	p.Next = &tmp; // set next tmp
	tmp.val.Name = name; // tmp point 
	pt.Name = name; // point name
	
}
public override string operator uint(uint a)
{
	print("CAST CALLED $");
	string g = a;
	return g;
}
bool Test(ref @LinkedList ll)
{
	return (??ll.Next);
}
entry void main()
{
@Point a;
@LinkedList l;
@LinkedList nl;
byte ch = 97;
uint adr;

// reference test


Set(ch);
putc(ch);
a.Name = "No Reference $";
adr = a.Name;
tostring(adr);
a.Name = adr;
print((string)adr);

nl.val.Name = "No Reference $";
Set(l,nl,a,"With Reference $");
print(a.Name);
print(l.Next->val.Name);
if(!Test(l))
	print("Next not null $");

	if("A" @@= "B")
		print("True$");
	else 
		print("False$");
string test = "uppercase$";
test = @||test;
print(test);	
print("Hel$" @@+,+++++ "lo ABD MOEZ $");
print(" Hello World$");
AH = 0x4C;
interrupt 0x21;
}
}