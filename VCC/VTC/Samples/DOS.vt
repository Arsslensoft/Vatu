include <STD.vt>
default asm{
"[org 100h]";

}

namespace DOS
{
use std;
public stdcall delegate void HelloHolder();
public define OP_float_add operator @@+;
public define OP_print operator @@>>;
public define OP_print_UNARY operator @@>>>>>>>>>>>>;
public override float operator @@+(float a,float b)
{
	print("\nCalled float operator $");
}

public typedef struct {
	uint val;
	
}UINT;
public byte a[] = "ABCDEFGH";
public override string operator @@>>>>>>>>>>>>(string a,string b)
{
	
	print(a);
		print(b);
	return b;
}
public override pointer operator delete(uint size)
{

}
 void tostring(uint a){
if(a < 10)
  putc((byte)(a+48));
  else{
  	tostring(a / 10);
  	putc(48+(byte)(a % 10));

  }


}
public override pointer operator new(uint size)
{
	print("\nAllocating : $");
	tostring(size);
	return size + 20u;
}


public override string operator explicit(int k)
{
a = "5 Casted$";
return a;
}

public override uint operator implicit(@UINT k)
{

return k.val;
}

void PrintHi(){
	print("Hi\n$");
}
string Hl = "Hello World Field$";
const string KLA = "Hello$";
entry void main()
{
	@UINT uv;
	uv.val = 50u;
	uint duv;
	duv = uv;
	tostring(duv);
	@HelloHolder mydelegate = null;
	print("Value of Delegate : $");
	tostring((uint)mydelegate);
	print("\nCall of Delegate : $");
	mydelegate += PrintHi;
	mydelegate();

	print("\nValue of Delegate : $");
	tostring((uint)mydelegate);

	mydelegate -= PrintHi;
	print("\nValue of Delegate : $");
	tostring((uint)mydelegate);

			print("\n$");
	int* lp = new int[7];
	uint adr = lp;
	tostring(adr);
int PL = 7;
print((string)PL);
	print(Hl);
	float a = 3.14;
	float b = 3.12;
	float r = a @@+ b;
  uint i = 4u;
  uint j = i+8u;
  tostring(j);
string kl = "\nHello World $ ";
string bl=			"\nMy name is"
			"\nJohn Doe\n$";

  print(bl @@>>>>>>>>>>>>kl );
	switch(i)
	{
	case 4:
		print("CASE 4$");
		break;
	case 16:
		print("Case 16$");

		goto default;
		case 17:
			goto case 16;
		
		case 5,6,7,8,9,10,11,12,13,14,15:
		print("CASE 5$");
		break;

		default:
		print("DEFAULT $");
		
	}
//print(kl);

	//AX+BX;
	//AX-CX;
	//DX/AX;
	//DX%BX;
	//AX := BX == CX ? 4: a;
	//SI := "Hello world from SI$";
	//+SI;
	//asm{
	//	"call std_print_string";}

AH := 0x4C;
interrupt 0x21;
}




}