"Name"    = 'VATU' 
"Version" = '2015'
"Author"  = 'Arsslen Idadi' 
"About"   = 'ANSI-C variant.'

"Case Sensitive" = True
"Start Symbol"   = <GLOBALS>

{Hex Digit}      = {Digit} + [abcdefABCDEF]
{Oct Digit}      = [01234567]
{Binary Digit}   = [01]
{Literal Suffix} = [iusbaIUSBA]
{Literal Prefix} = [-]
                                                  
{Id Head}        = {Letter} + [_]
{Id Tail}        = {Id Head} + {Digit}

{String Ch}      = {Printable} - ["]
{Char Ch}        = {Printable} - ['']

DecLiteral       = ({Literal Prefix} [123456789]{digit}* | {Literal Prefix}[123456789]{digit}* {Literal Suffix} | [123456789]{digit}* |[123456789]{digit}* {Literal Suffix})
OctLiteral       = 0{Oct Digit}*
HexLiteral       = 0x{Hex Digit}+
BinaryLiteral    = 0b{Binary Digit}+
             
BooleanLiteral   = true | false
NullLiteral      = null


StringLiteral    = '"'( {String Ch} | '\'{Printable} )* '"'                 
CharLiteral      = '' ( {Char Ch} | '\'{Printable} )''

Id               = {Id Head}{Id Tail}*    

                               
MacroLiteral     = '$' {Id Head}{Id Tail}*  
OperatorLiteralUnary  =  '@' [_-+-/*%£µ%§~#,.=<&|?:>!]+
OperatorLiteralBinary  =  '@@' [_-+-/*%£µ%§~#.,=<&|?:>!]+             
                 
!AsmLiteral       = '$>'  ( {String Ch} | '\'{Printable} )* '<$'


! ===================================================================
! Comments
! ===================================================================

Comment Start = '/*'
Comment End   = '*/'
Comment Line  = '//'

<Name> ::= ID
         |  <QualifiedName>
         | global
<QualifiedName> ::= <Name> '::' ID
! ===================================================================
! Import
! ===================================================================

<Import>   ::= 'use' <Name> ';'
            
<Imports>  ::= <Import>
            | <Import> <Imports>   
                   
<Namespace> ::= 'namespace' <Name>
                
! ===================================================================
!  Declaration
! ===================================================================
<GLOBALS> ::= <GLOBAL>
           | <GLOBAL> <GLOBALS>
           
<GLOBAL> ::= <Namespace> '{' <Imports> <Decls> '}'
          | <Namespace> '{' <Decls> '}'
          | <Decl>
<Decls> ::= <Decl>
         | <Decl> <Decls>

<Decl>  ::= <Func Decl>
          | <ASM Decl>
          | <Oper Decl>
          | <Inter Decl>
          | <Union Decl>
          | <Func Proto>
          | <Oper Proto>
          | <Struct Decl>
          | <Enum Decl>
          | <Var Decl>    
          | <Typedef Decl>
          | <Extension Decl>
          | <Delegate Decl>
          | <Preproc Decl>
          | <Oper Def Decl>
          | <Var Prototype>
! ===================================================================
! Preprocessor  
! ===================================================================      

<Preproc Decl> ::= <PP Define> 
                 | <PP Conditional>
                 | <PP Diag>
                 | <PP Region>
                 | <PP Include>
                 | <PP ERegion>
                 
<PP Define> ::= '#'define ID <PP Expr>
               | '#'undef ID
               
<PP Include> ::= '#'include StringLiteral
                            
<PP Expr> ::= <PP Or Expr>
           
<PP Or Expr> ::= <PP Or Expr> '||' <PP And Expr>   
               | <PP And Expr>   

<PP And Expr>     ::= <PP And Expr>    '&&' <PP Compare Expr>
               | <PP Compare Expr>                

<PP Compare Expr> ::= <PP Compare Expr> '==' <PP Unary Expr>
               | <PP Compare Expr> '!='  <PP Unary Expr>
               | <PP Unary Expr>

<PP Unary Expr> ::= '!'    <PP Unary Expr> 
                 | <PP Primary Expr>
                 
<PP Primary Expr> ::= <CONSTANT> 
                   | '(' <PP Expr> ')'
                   | Id
                   
<PP Conditional> ::= <PP If>
                    
!if elif elif endif                    
<PP If> ::= '#'if <PP Expr> '{' <Decls> '}' <PP Elif List> 
            | '#'if <PP Expr> '{' <Decls> '}'
            | '#'if <PP Expr> '{' <Decls> '}' <PP Elif List>  else '{' <Decls>  '}'   
             | '#'if <PP Expr>  '{'  <Decls> '}' else  '{'  <Decls>  '}'
             
            
<PP Elif List> ::=  <PP Elif>  
               | <PP Elif> <PP Elif List> 

              

<PP Elif> ::= elif <PP Expr> '{' <Decls> '}'

            
<PP Diag> ::= '#'warn StringLiteral
            | '#'error StringLiteral
 
<PP Region> ::= '#'region StringLiteral
<PP ERegion> ::= '#'endregion         
                           
! ===================================================================
! Extension  Declaration
! ===================================================================      

<Extension Decl> ::= <Value> extends <Type> ';'
                  
! ===================================================================
! Delegate  Declaration
! ===================================================================

<Delegate Decl> ::= <Mod> <CallCV> delegate <Type> ID '(' <Types>  ')' ';'
                  | <Mod> typedef <CallCV> delegate <Type> '(' <Types>  ')' ID ';'
! ===================================================================
! Function  Declaration
! ===================================================================


<Func Proto> ::= <Func ID> '(' <Types>  ')' ';'
               | <Func ID> '(' <Params> ')' ';'
               | <Func ID> '(' ')' ';'
               ! Extension prototype
               | <Func ID> '(' <Types>  ')' <Func Ext> ';'
               | <Func ID> '(' <Params> ')' <Func Ext> ';'
               | <Func ID> '(' ')' <Func Ext> ';'
   
<Oper Def Decl> ::= <Mod> 'define' Id 'operator' OperatorLiteralUnary ';'
                 | <Mod> 'define' bool Id 'operator' OperatorLiteralUnary ';'
<Oper Def Decl> ::= <Mod> 'define' Id 'operator' OperatorLiteralBinary ';' 
                  |  <Mod> 'define' bool Id 'operator' OperatorLiteralBinary ';' 
                                          
<Oper Proto> ::= <Mod> 'override' <Type> 'operator' '=='  <Type>   ';'
               | <Mod> 'override' <Type> 'operator' '!='  <Type>  ';'
               | <Mod> 'override' <Type> 'operator' '<='  <Type>   ';'
               | <Mod> 'override' <Type> 'operator' '>='  <Type> ';'
               | <Mod> 'override' <Type> 'operator' '>'  <Type>   ';'
               | <Mod> 'override' <Type> 'operator' '<'  <Type>  ';'
               | <Mod> 'override' <Type> 'operator' '¤' <Type>  ';'
               | <Mod> 'override' <Type> 'operator' '??' <Type>  ';'
               
               | <Mod> 'override' <Type> 'operator' '+' ';'
               | <Mod> 'override' <Type> 'operator' '-' ';'
               | <Mod> 'override' <Type> 'operator' '*' ';'
               | <Mod> 'override' <Type> 'operator' '/' ';'
               | <Mod> 'override' <Type> 'operator' '%' ';'
               | <Mod> 'override' <Type> 'operator' '^' ';'
               | <Mod> 'override' <Type> 'operator' '&' ';'
               | <Mod> 'override' <Type> 'operator' '|' ';'
                ! CAST Overload
               | <Mod> 'override' <Type> 'operator' <Type> ';'
               !Shift Rotate
               | <Mod> 'override' <Type> 'operator' '~>' ';'
               | <Mod> 'override' <Type> 'operator' '<~' ';'
               | <Mod> 'override' <Type> 'operator' '>>' ';'
               | <Mod> 'override' <Type> 'operator' '<<' ';'
               !Unary
               | <Mod> 'override' <Type> 'operator' '++' ';'
               | <Mod> 'override' <Type> 'operator' '--' ';'
               | <Mod> 'override' <Type> 'operator' '[]' ';'

               | <Mod>'override' <Type> 'operator' '~' ';'
               ! Oper def
               | <Mod>'override' <Type> 'operator' OperatorLiteralBinary ';'
               | <Mod>'override' <Type> 'operator' OperatorLiteralUnary ';'
               ! OperDef Logic
               | <Mod>'override' <Type> 'operator' OperatorLiteralBinary <Type>  ';'
               | <Mod>'override' <Type> 'operator' OperatorLiteralUnary  <Type>  ';'
<Func Decl>  ::= <Func ID> <Func Body>
               | <Func Spec> <Func ID> <Func Body>



!Operators Overloading         
<Oper Decl>  ::= <Mod> 'override' <Type> 'operator' '==' <Func Body>
               |<Mod> 'override' <Type> 'operator' '!=' <Func Body>
               |<Mod> 'override' <Type> 'operator' '<=' <Func Body>
               |<Mod> 'override' <Type> 'operator' '>=' <Func Body>
               |<Mod> 'override' <Type> 'operator' '>' <Func Body>
               |<Mod> 'override' <Type> 'operator' '<' <Func Body>
               |<Mod> 'override' <Type> 'operator' '+' <Func Body>
               |<Mod> 'override' <Type> 'operator' '-' <Func Body>
               |<Mod> 'override' <Type> 'operator' '*' <Func Body>
               |<Mod> 'override' <Type> 'operator' '/' <Func Body>
               |<Mod> 'override' <Type> 'operator' '%' <Func Body>
               |<Mod> 'override' <Type> 'operator' '^' <Func Body>
               |<Mod> 'override' <Type> 'operator' '&' <Func Body>
               |<Mod> 'override' <Type> 'operator' '|' <Func Body>
            
                ! CAST Overload
               |<Mod> 'override' <Type> 'operator' <Type> <Func Body>
               !Shift Rotate
               |<Mod> 'override' <Type> 'operator' '~>' <Func Body>
               |<Mod> 'override' <Type> 'operator' '<~' <Func Body>
               |<Mod> 'override' <Type> 'operator' '>>' <Func Body>
               |<Mod> 'override' <Type> 'operator' '<<' <Func Body>
               !Unary
               |<Mod> 'override' <Type> 'operator' '++' <Func Body>
               |<Mod> 'override' <Type> 'operator' '--' <Func Body>
               |<Mod> 'override' <Type> 'operator' '[]' <Func Body>
               |<Mod> 'override' <Type> 'operator' '¤' <Func Body>
               |<Mod> 'override' <Type> 'operator' '??' <Func Body>
               |<Mod> 'override' <Type> 'operator' '~' <Func Body>
               
                !OperDef
               |<Mod> 'override' <Type> 'operator' OperatorLiteralBinary <Func Body>
               |<Mod> 'override' <Type> 'operator' OperatorLiteralUnary <Func Body>
               
!Interrupt decl               
<Inter Decl>  ::= 'interrupt' <CONSTANT> <Block>


<Func Body>  ::= '(' <Params>  ')' <Block>
              | '(' ')' <Block>
              |  '(' <Params>  ')' <Func Ext> <Block>
              | '(' ')' <Func Ext>  <Block>      
              
        
<Params>     ::= <Param> ',' <Params>
               | <Param>
               
<Param>      ::= const <Type> ID
               | ref <Type> ID
               |       <Type> ID
               
<Types>      ::= <Type>  ',' <Types>
               | <Type> 
  
<Func ID>    ::= <Mod> <CallCV> <Type> ID
                | <Mod> <Type> ID
                | <CallCV> <Type> ID
                | <Type> ID

<Func Ext>  ::= extends <Type>
             | static extends <Type>
             
<Func Spec> ::= entry
             | isolated
             
<CallCV>    ::= stdcall 
             | fastcall
             | cdecl 
             | pascal
             | default
             | vfastcall
! ===================================================================
! Asm Declaration
! ===================================================================
<ASM Decl> ::= extern asm '{' <INSTRUCTIONS>  '}'
             | default asm '{' <INSTRUCTIONS>  '}'
           
! ===================================================================
! Type Declaration
! ===================================================================

<Typedef Decl> ::= <Mod> typedef <Type> ID ';'

<Struct Decl>  ::= <Mod> struct Id '{' <Struct Def> '}'  ';' 
                | <Mod> typedef struct '{' <Struct Def> '}'  Id ';' 
<Union Decl>   ::= <Mod> union Id '{' <Struct Def> '}'  ';' 
                | <Mod> typedef union '{' <Struct Def> '}' Id ';' 
<Struct Def>   ::= <Var Decl> <Struct Def>
                 | <Var Decl>

! ===================================================================
! Variable Declaration
! ===================================================================

<Var Prototype> ::= global <Var Decl>

<Var Decl>     ::= <Mod> <Type> <Var> <Var List>  ';'
                 |       <Type> <Var> <Var List>  ';'
                 | <Mod>        <Var> <Var List>  ';'
             
<Var>      ::= ID <Array>
             | ID
             | ID <Array> '=' <Op If> 
             | ID '=' <Op If> 

<Array>    ::= '[' <Expression> ']'
             | '[' ']'
             
<Var List> ::=  ',' <Var Item> <Var List>
             | 

<Var Item> ::= <Pointers> <Var>

  
<Mod>       ::= <Modifier>
             | <Modifier> <Mod> 
<Modifier>      ::= extern 
             | static
             | const   
             | private
             | public

! ===================================================================
! Enumerations & Flags
! ===================================================================

<Enum Decl>    ::= <Mod> enum Id '{' <Enum Def> '}'  ';'
                  | <Mod> typedef enum '{' <Enum Def> '}'  Id ';'
                  | <Mod> setof enum Id '{' <Enum Def> '}'  ';'
                  | <Mod> typedef setof enum '{' <Enum Def> '}'  Id ';'
<Enum Def>     ::= <Enum Val> ',' <Enum Def>
                 | <Enum Val>

<Enum Val>     ::= Id
                 | Id '=' OctLiteral
                 | Id '=' HexLiteral
                 | Id '=' DecLiteral  


! ===================================================================
! Types
! ===================================================================

<Type>     ::= <Base> <Pointers> 
             | <Name> '::' <Base> <Pointers>
             
<Base>     ::= <Scalar>
             | '@'Id  
             | typeof Id
             | typeof '(' <Expression> ')'
             
<Scalar>   ::= byte
             | int
             | uint
             | sbyte
             | bool
             | void           
             | string
             | pointer
             
<Pointers> ::= '*' <Pointers>
             |

! ===================================================================
! Statements
! ===================================================================

<Statement>        ::= <Var Decl>
               | Id ':'                            !Label
               | if '(' <Expression> ')' <Statement>          
               | if '(' <Expression> ')' <Then Stm> else <Statement>      
               ! Preprocess ifdef-ifndef
               | '#'ifdef MacroLiteral <Statement> 
               | '#'ifndef MacroLiteral <Statement> 
               
               | while '(' <Expression> ')' <Statement> 
               | for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Statement>
               | asm '{' <INSTRUCTIONS>  '}'
               | use <Name> <Statement>
               | loop <Statement>
               | <Normal Stm>
              

<Then Stm>   ::= if '(' <Expression> ')' <Then Stm> else <Then Stm> 
               | while '(' <Expression> ')' <Then Stm> 
               | for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Then Stm>
               | <Normal Stm>

<Normal Stm> ::= do <Statement> while '(' <Expression> ')'
               | switch '(' <Expression> ')' '{' <Case Stms> '}'
               | <Block>
               | <Expression> ';'               
               | goto Id ';'
               | break ';'
               | continue ';'
               | goto case DecLiteral ';'
               | goto default ';'
               | next ';'
               | exit ';'
               | exit DecLiteral ';'
               | pass ';'
               | interrupt <CONSTANT> ';'
               | return <Expression> ';'
                
               | ';'              !Null statement



<Arg>       ::= <Expression> 
              | 

<Case Stms> ::= case <Value> ':' <Stm List> <Case Stms>
              | default ':' <Stm List>                  
              |

<Block>     ::= '{' <Stm List> '}' 

<Stm List>  ::=  <Statement> <Stm List> 
              | 


! ===================================================================
! Here begins the C's 15 levels of operator precedence.
! ===================================================================

<Expression>       ::= <Op Assign>

<Op Assign>  ::= <Op If> '='   <Op Assign>
               | <Op If> '<>'   <Op Assign>
               | <Op If> '+='  <Op Assign>
               | <Op If> '-='  <Op Assign>
               | <Op If> '*='  <Op Assign>
               | <Op If> '/='  <Op Assign>
               | <Op If> '^='  <Op Assign>
               | <Op If> '&='  <Op Assign>
               | <Op If> '|='  <Op Assign>
               | <Op If> '>>=' <Op Assign>
               | <Op If> '<<=' <Op Assign>
               | <Op If>

<Op If>      ::= <Op BinaryOpDef>  '?' <Op If> ':' <Op If>
               | <Op BinaryOpDef> 

<Op BinaryOpDef>     ::= <Op BinaryOpDef>  OperatorLiteralBinary <Op Or>
              | <Op Or> 
              
<Op Or>      ::= <Op Or> '||' <Op And>
               | <Op And>


<Op And>     ::= <Op And> '&&' <Op BinOR>
               | <Op BinOR>

<Op BinOR>   ::= <Op BinOr> '|' <Op BinXOR>
               | <Op BinXOR>

<Op BinXOR>  ::= <Op BinXOR> '^' <Op BinAND>
               | <Op BinAND>

<Op BinAND>  ::= <Op BinAND> '&' <Op Equate>
               | <Op Equate>

<Op Equate>  ::= <Op Equate> '==' <Op NEqual>
               | <Op NEqual>

<Op NEqual>  ::= <Op NEqual> '!=' <Op Compare>
               | <Op Compare>

<Op Compare> ::= <Op Compare> '<'  <Op Shift>
               | <Op Compare> '>'  <Op Shift>
               | <Op Compare> '<=' <Op Shift>
               | <Op Compare> '>=' <Op Shift>
               | <Op Shift>

<Op Shift>   ::= <Op Shift> '<<' <Op Add>
               | <Op Shift> '>>' <Op Add>
               
               | <Op Shift> '~>' <Op Add>
               | <Op Shift> '<~' <Op Add>
               | <Op Add>

<Op Add>     ::= <Op Add> '+' <Op Mult>
               | <Op Add> '-' <Op Mult>
               | <Op Mult>

<Op Mult>    ::= <Op Mult> '*' <Op Unary>
               | <Op Mult> '/' <Op Unary>
               | <Op Mult> '%' <Op Unary>
               | <Op Unary>

<Op Unary>   ::= '!'    <Op Unary>
               | '~'    <Op Unary>   
               | '-'    <Op Unary>
               | '*'    <Op Unary>
               | '&'    <Op Unary>               
               | '++'   <Op Unary>
               | '--'   <Op Unary>
               | '??'   <Op Unary>
               | OperatorLiteralUnary <Op Unary>
               | '¤'   <Op Unary>
               | <Op Pointer> '++'
               | <Op Pointer> '--'
               | '(' <Type> ')' <Op Unary>   !CAST
               | sizeof '(' <Type> ')'
               | sizeof '(' ID <Pointers> ')'
               | addressof '(' ID ')'
               | nameof  '(' ID ')'
    
               | <Op Pointer>

<VALUE POS> ::= HIGH
             | LOW

<Op Pointer> ::= <Op Pointer> '.' <Value>
               | <Op Pointer> '.' <VALUE POS>
               | <Op Pointer> '->' <Value>
               ! Naming
               | <Name> '::' <Value>
               | <Type> '::' <Value>
                               
               | <Op Pointer> '[' <Expression> ']'
               | <Value>


<Value>      ::= <CONSTANT>
               | <Method Expr>     
               | <Var Expr>
               | '(' <Expression> ')'
               | <REGISTER>

<Var Expr>     ::= Id
<Method Expr>  ::= Id '(' <PARAM EXPR> ')'   
                
<CONSTANT>    ::= OctLiteral
               | HexLiteral
               | MacroLiteral
               | DecLiteral  
               | StringLiteral
               | CharLiteral
               | BinaryLiteral
               | BooleanLiteral
               | NullLiteral    
                        
<PARAM EXPR>  ::= <Expression> ',' <PARAM EXPR>
               |  <Expression>
               |        
<REGISTER>   ::= AX
              | BX
              | CX
              | DX
              | SI
              | DI
              | SP
              | BP
              | CS
              | DS
              | ES
              | FS
              | GS
              | SS
             
              | AH
              | AL
              | BH
              | BL
              | CH
              | CL
              | DH
              | DL  
                        
<INSTRUCTION> ::= StringLiteral ';'
           
<INSTRUCTIONS> ::= <INSTRUCTION> <INSTRUCTIONS> 
                |             
          
