"Name"    = 'VATU' 
"Version" = '2015'
"Author"  = 'Arsslen Idadi' 
"About"   = 'ANSI-C variant.'

"Case Sensitive" = True
"Start Symbol"   = <COMPILATION UNIT>

                    
{Hex Digit}      = {Digit} + [abcdefABCDEF]
{Oct Digit}      = [01234567]
{Binary Digit}   = [01]
{Literal Suffix} = [iusbafpdeIUSBAFPDE]
{Literal Prefix} = [-]
{Float Suffix}   = [fFdDeE]
                                                              
{Id Head}        = {Letter} + [_]
{Id Tail}        = {Id Head} + {Digit}

{String Ch}      = {Printable} - ["]
{Char Ch}        = {Printable} - ['']

                 

DecLiteral       = ({Literal Prefix} [0123456789]{digit}* | {Literal Prefix}[0123456789]{digit}* {Literal Suffix} | [0123456789]{digit}* |[0123456789]{digit}* {Literal Suffix})
OctLiteral       = 0[oO]{Oct Digit}+
HexLiteral       = 0[xX]{Hex Digit}+
BinaryLiteral    = 0[bB]{Binary Digit}+
                 
                            
BooleanLiteral   = true | false
NullLiteral      = null

StringLiteral    = '"'( {String Ch} | '\'{Printable} )* '"'
                 
CharLiteral      = '' ( {Char Ch} | '\'{Printable} )''
FloatLiteral     = {Literal Prefix}{Digit}*'.'{Digit}+{Float Suffix} | {Digit}*'.'{Digit}+{Float Suffix} | {Literal Prefix}{Digit}*'.'{Digit}+ | {Digit}*'.'{Digit}+
                 

IncludeLiteral    = '<' ( {Printable} )+ '>'
Id               = {Id Head}{Id Tail}*    

OperatorLiteralUnary  =  '@' [!&#$%*+-,/<>=?\^_|~£¤µ.:]+
OperatorLiteralBinary  =  '@@' [!&#$%*+-,/<>=?\^_|~£¤µ.:]+     

                 
                 
! ===================================================================
! Comments
! ===================================================================

Comment Start = '/*'
Comment End   = '*/'
Comment Line  = '//'


! ===================================================================
! Named Identifier
! ===================================================================     
<Name> ::= ID
         |  <QualifiedName>
         | global
<QualifiedName> ::= <Name> '::' ID
                 
! ===================================================================
! Import & Namespace
! ===================================================================

<Import>   ::= use <Name> ';'
    
            
<Imports>  ::= <Import>
            | <Import> <Imports>   
                   
<Namespace> ::= namespace <Name>

! ===================================================================
!  Global Declaration 
! ===================================================================

<COMPILATION UNIT> ::= <Includes Decl> <GLOBALS>
                    | <Includes Decl>
                    
<GLOBALS> ::= <GLOBAL>
           | <GLOBAL> <GLOBALS>
           
<GLOBAL> ::= <Namespace> '{' <Imports> <Decls> '}'
          | <Namespace> '{' <Decls> '}'
          | <Decl>
          
<Include Decl> ::= include IncludeLiteral
                
<Includes Decl> ::=  <Include Decl> <Includes Decl>         
                 |           
                
<Decls> ::= <Decl>
         | <Decl> <Decls>

<Decl>  ::= <ASM Decl>
         |  <Var Decl>  
         |  <Types Decl>
         | <Prototypes Decl>
         | <Method Decl>
                
<Types Decl> ::= <Union Decl>
                | <Struct Decl>
                | <Enum Decl>
                | <Typedef Decl> 
                | <Delegate Decl>
                
<Prototypes Decl> ::=  <Func Proto>
          | <Oper Proto>
          | <Var Prototype>
          | <Operator Definition Decl>
         
<Method Decl> ::= <Inter Decl>
                 | <Oper Decl>
                 | <Func Decl>
                 


  
! ===================================================================
! Prototypes  Declaration
! ===================================================================  

 <Func Proto> ::=<Func ID> '(' <Types>  ')' <Func Ext> ';'
               | <Func ID> '(' <Params> ')' <Func Ext> ';'   
               | <Func ID> '('  ')' <Func Ext> ';'   
        
               

<Operator Definition Decl> ::= <Mod> define Id operator <Operator Def> ';'
                 | <Mod> define bool Id operator <Operator Def> ';'

                 
<Oper Proto> ::= <Mod> override <Type> operator <Operator> '(' <Type> ')' ';' ! binary & unary
            | <Mod> override <Type> operator <Operator Def> '(' <Type>  ')' ';'   ! operator def (binary & unary)  
            | <Mod> override <Type> operator <Cast Kind> '(' <Type>  ')' ';' ! cast
 
<Var Prototype> ::= global <Var Decl>

! ===================================================================
! Method  Declaration
! ===================================================================  
<Func Decl>  ::= <Func ID> <Func Body>

<Oper Decl>  ::= <Mod> override <Type> operator <Operator> <Func Body>
               | <Mod> override <Type> operator <Cast Kind> <Func Body> ! source type to dest type
               |  <Mod> override <Type> operator <Operator Def> <Func Body>
               
<Inter Decl>  ::= interrupt <Integral Const> <Block>
  


<Func Body>  ::= '(' <Params>  ')' <Func Ext> <Block>
              | '(' ')' <Func Ext>  <Block>     
              
<Params>     ::= <Param> ',' <Params>
               | <Param>
               
<Param>      ::=  const <Type> ID
               | ref <Type> ID
               | <Type> ID     
               
<Types>      ::= <Type>  ',' <Types>
               | <Type> 
    
         
<Func ID>    ::= <Mod> <CallCV> <Type> ID
              | <CallCV> <Type> ID
              | <Type> ID
              | <Mod> <Type> ID
              ! Function Specs Support
              | <Mod> <Func Specs> <CallCV> <Type> ID
              | <Func Specs> <CallCV> <Type> ID
              | <Func Specs> <Type> ID
              | <Mod> <Func Specs> <Type> ID
              

<Func Specs> ::= <Func Spec> <Func Specs> 
              | <Func Spec> 
                         
<Func Spec> ::= entry
             | isolated
             | variadic
             
<CallCV>    ::= stdcall 
             | fastcall
             | cdecl 
             | pascal
             | default
             | vfastcall
             

             

<Func Ext>  ::= extends <Type>
             | static extends <Type>
             | 
           
! ===================================================================
! Asm Declaration
! ===================================================================
<ASM Decl> ::= extern <ASM Statement>
             | default <ASM Statement>
  

           
! ===================================================================
! Type Declaration
! ===================================================================

<Typedef Decl> ::= <Mod> typedef <Type> ID ';'

<Struct Decl>  ::= <Mod> struct Id <Inheritance>  '{' <Struct Def> '}'  ';' 
                | <Mod> typedef struct <Inheritance>  '{' <Struct Def> '}'  Id ';' 
                

<Union Decl>   ::= <Mod> union Id '{' <Struct Def> '}'  ';' 
                | <Mod> typedef union '{' <Struct Def> '}' Id ';' 
                
<Enum Decl>    ::= <Mod> enum Id '{' <Enum Def> '}'  ';'
                 | <Mod> typedef enum '{' <Enum Def> '}'  Id ';'
                 | <Mod> setof enum Id '{' <Enum Def> '}'  ';'
                 | <Mod> typedef setof enum '{' <Enum Def> '}'  Id ';'

<Delegate Decl> ::= <Mod> <CallCV> delegate <Type> ID '(' <Types>  ')' ';'
                  | <Mod> typedef <CallCV> delegate <Type> '(' <Types>  ')' ID ';'                 
                  | <Mod> <CallCV> delegate <Type> ID '(' ')' ';'
                  | <Mod> typedef <CallCV> delegate <Type> '(' ')' ID ';'   

<Inheritance> ::= extends <Types>
              | 
! ===================================================================
! Definitions
! ===================================================================

<Struct Def>   ::= <Struct Var Decl> <Struct Def>
                 | <Struct Var Decl>  
      
! Enumerations & Flags definition               
<Enum Def>     ::= <Enum Val> ',' <Enum Def>
                 | <Enum Val>

<Enum Val>     ::= Id
                 | Id '=' <Integral Const>
                 
! ===================================================================
! Variable Declaration
! ===================================================================



<Var Decl>     ::= <Mod> <Type> <Var> <Var List> <Func Ext> ';'
                 | <Struct Var Decl> 
                 
<Struct Var Decl>  ::=  <Type> <Var> <Var List>  ';'          
             
<Var>      ::= ID
             | ID '=' <Op If> 

<Array>    ::= '[' <Integral Const>  ']'
             | '[]'
             | '[' <Integral Const> ']' <Array>
             
<Var List> ::=  ',' <Var Item> <Var List>
             | 

<Var Item> ::= <Pointers> <Var>

! ===================================================================
! Types
! ===================================================================

<Type>     ::= <Base> <Pointers>
             | <Name> '::' <Base> <Pointers>
             | <Base> <Pointers> <Array>
             | <Name> '::' <Base> <Pointers> <Array>     
                  
<Base>     ::= <Scalar>
             | '@'Id  
             | typeof Id
             | typeof '(' <Expression> ')'
             
<Scalar>   ::= byte
             | int
             | uint
             | sbyte
             | bool
             | void           
             | string
             | pointer
             | float

             
             
<Pointers> ::= '*' <Pointers>
              |         
    
! ===================================================================
! Statements
! ===================================================================

<Statement>  ::= <Struct Var Decl> 
               | Id ':'                            !Label
               | if '(' <Expression> ')' <Statement>          
               | if '(' <Expression> ')'  <Then Stm> else <Statement>      
               | while '(' <Expression> ')' <Statement> 
               | for '(' <PARAM EXPR> ';' <Expression>  ';' <PARAM EXPR> ')' <Statement>
               | use <Name> <Statement>
               | loop <Statement>
               | <Normal Stm>
     
 <Then Stm>   ::= if '(' <Expression> ')' <Then Stm> else <Then Stm> 
               | while '(' <Expression> ')' <Then Stm> 
               | for '(' <PARAM EXPR> ';' <Expression>  ';' <PARAM EXPR> ')' <Then Stm>
               | <Normal Stm>
                        
 <Normal Stm> ::= do <Statement> while '(' <Expression> ')'
               | switch '(' <Expression> ')' '{' <Case Stms> '}'
               | <Block>
               | <Expression> ';'  
               | <Register Expression> ';'             
               | goto Id ';'
               | break ';'
               | continue ';'
               | goto case DecLiteral ';'
               | goto default ';'
               | next ';'
               | exit ';'
               | exit DecLiteral ';'
               | pass ';'
               | interrupt <Integral Const> ';'
               | interrupt <Integral Const> '(' <PARAM EXPR> ')' ';'
               | return <Expression> ';'
               | return ';'
               | delete <Value> ';'
               | <ASM Statement>
               | ';'              !Null statement          
               




<Case Stm> ::=  case <Integral Const List> ':' <Stm List>
              | default ':' <Stm List>   
<Case Stms> ::= <Case Stm> <Case Stms>
              | <Case Stm>                

<Block>     ::= '{' <Stm List> '}' 

<Stm List>  ::=  <Statement> <Stm List> 
              | 
   
<ASM Statement> ::= asm '{' <INSTRUCTIONS> '}'
! ===================================================================
! Vatu Operators Priorities
! ===================================================================

<Expression>       ::= <Op Assign>

<Op Assign>  ::= <Op If> '='   <Op Assign>
               | <Op If> '<>'   <Op Assign>
               | <Op If> '+='  <Op Assign>
               | <Op If> '-='  <Op Assign>
               | <Op If> '*='  <Op Assign>
               | <Op If> '/='  <Op Assign>
               | <Op If> '^='  <Op Assign>
               | <Op If> '&='  <Op Assign>
               | <Op If> '|='  <Op Assign>
               | <Op If> '>>=' <Op Assign>
               | <Op If> '<<=' <Op Assign>
               | <Op If>


<Op If>      ::= <Op BinaryOpDef>  '?' <Op If> ':' <Op If>
               | <Op BinaryOpDef> 

<Op BinaryOpDef>     ::= <Op BinaryOpDef>  OperatorLiteralBinary <Op Or>
              | <Op Or> 
              
<Op Or>      ::= <Op Or> '||' <Op And>
               | <Op And>


<Op And>     ::= <Op And> '&&' <Op BinOR>
               | <Op BinOR>

<Op BinOR>   ::= <Op BinOr> '|' <Op BinXOR>
               | <Op BinXOR>

<Op BinXOR>  ::= <Op BinXOR> '^' <Op BinAND>
               | <Op BinAND>

<Op BinAND>  ::= <Op BinAND> '&' <Op Equate>
               | <Op Equate>

<Op Equate>  ::= <Op Equate> '==' <Op Compare>
               | <Op Equate> '!=' <Op Compare>
               | <Op Equate> is <Type>
               | <Op Compare>

<Op Compare> ::= <Op Compare> '<'  <Op Shift>
               | <Op Compare> '>'  <Op Shift>
               | <Op Compare> '<=' <Op Shift>
               | <Op Compare> '>=' <Op Shift>
               | <Op Shift>

<Op Shift>   ::= <Op Shift> '<<' <Op Add>
               | <Op Shift> '>>' <Op Add>
               
               | <Op Shift> '~>' <Op Add>
               | <Op Shift> '<~' <Op Add>
               | <Op Add>

<Op Add>     ::= <Op Add> '+' <Op Mult>
               | <Op Add> '-' <Op Mult>
               | <Op Mult>

<Op Mult>    ::= <Op Mult> '*' <Op Unary>
               | <Op Mult> '/' <Op Unary>
               | <Op Mult> '%' <Op Unary>
               | <Op Unary>
 
<Op Unary>   ::= '!'    <Op Unary>
               | '~'    <Op Unary>   
               | '-'    <Op Unary>
               | '*'    <Op Unary>
               | '&'    <Op Unary>               
               | '++'   <Op Unary>
               | '--'   <Op Unary>
               | '??'   <Op Unary>
               | OperatorLiteralUnary <Op Unary>
               | '¤'   <Op Unary>
               | <Op Pointer> '++'
               | <Op Pointer> '--'
               | '(' <Type> ')' <Op Unary>   !CAST
               | sizeof '(' <Type> ')'
               | sizeof '(' ID <Pointers> ')'
               | addressof '(' ID ')'
               | nameof  '(' ID ')'
               | <Op Pointer>     

 <VALUE POS> ::= HIGH
             | LOW         
             


<Op Pointer> ::= <Op Pointer> '.' <Declared Expression> 
               | <Op Pointer> '.' <VALUE POS>
               | <Op Pointer> '->' <Declared Expression> 
               ! Naming
               | <Name> '::' <Declared Expression>
               | <Type> '::' <Declared Expression>
                               
               | <Op Pointer> '[' <Expression> ']'
               | <Value>     
  

               
<Value>      ::= <CONSTANT>
               | '(' <Expression> ')'
               | <Declared Expression> 
               | new <Type> '(' <Expression> ')'
              ! | <Initializer>
               

<Declared Expression> ::=<Method Expr>     
               | <Var Expr>
               
<Var Expr>     ::= Id
                | this
                | params
<Method Expr>  ::= Id '(' <PARAM EXPR> ')' 
                
                
<CONSTANT>    ::= <Integral Const> 
               | BooleanLiteral
               | NullLiteral   
               | FloatLiteral
               | <Multiline String Literals>
               

!<Initliazers>  ::= <Value>
!               | <Value> ',' <Initliazers>      
          
!<Initializer> ::= '{' <Initliazers>  '}'   
                                  
<Integral Const> ::= OctLiteral   
                   | HexLiteral
                   | DecLiteral  
                   | BinaryLiteral
                   | CharLiteral
                 
                   
<Integral Const List> ::= <Integral Const>
                     | <Integral Const> ',' <Integral Const List> 
 
                  
<PARAM EXPR>  ::= <Expression> ',' <PARAM EXPR>
               |  <Expression>
               |    
               
   
! ===================================================================
! Registers Operations
! ===================================================================  
 
<REGISTER ID>   ::= AX
              | BX
              | CX
              | DX
              | SI
              | DI
              | SP
              | BP
              | CS
              | DS
              | ES
              | FS
              | GS
              | SS             
              | AH
              | AL
              | BH
              | BL
              | CH
              | CL
              | DH
              | DL  

<REGISTER> ::=   <REGISTER ID>            
<Register Expression> ::= <REGISTER> ':=' <REGISTER Target Expression>  ! Register Assign
                        | <Var Expr> ':=' <REGISTER> ! Var Assign
                        | '+' <REGISTER> ! Push
                        | '-' <REGISTER>  ! Pop
                        | <REGISTER> ':='  <Register Operation> '?' <REGISTER Target Expression>  ':' <REGISTER Target Expression>  ! If Expr
                        | <Register Operation> 
<Register Operation> ::= <REGISTER> <Binary Operator> <REGISTER>
                         | <Unary Operator> <REGISTER>
                         
<REGISTER Target Expression> ::= <CONSTANT>
                              | <Var Expr>                      
                              | <REGISTER>
                             
! ===================================================================
! Operators & Bases
! ===================================================================  
      
<Mod>       ::= <Modifier>
             | <Modifier> <Mod> 
<Modifier>      ::= extern 
             | static
             | const   
             | private
             | public
      


<INSTRUCTION> ::= StringLiteral ';'
<INSTRUCTIONS> ::= <INSTRUCTION>  <INSTRUCTIONS> 
                |  <INSTRUCTION>       
          
                       
<Operator Def> ::= OperatorLiteralUnary
                 | OperatorLiteralBinary

<Operator>       ::=  <Binary Operator>
                  | <Unary Operator>   

                                            
<Binary Operator> ::= '=='
                   | '!='
                   | '<='
                   | '>='
                   | '>'
                   | '<'
                   | '+'
                   | '-'
                   | '*'
                   | '/'
                   | '%'
                   | '^'
                   | '&'
                   | '|'
                   | '<<'
                   | '>>'
                   | '<~'
                   | '~>'
                                      
<Unary Operator> ::= '++'
                  | '--'
                  | '[]'
                  | '~'
                  | '¤'
                  | '??'
                  | new
                  | delete           

<Cast Kind> ::= implicit
             | explicit
                 
<Multiline String Literals> ::= StringLiteral
                    | StringLiteral <Multiline String Literals>

