============================================================
GOLD Parser Builder
Version 5.2.0.
============================================================


========================================
Lexical Groups
========================================

0    Comment Block
1    Comment Line




========================================
Terminals
========================================

 0      (EOF)
 1      (Error)
 2      Comment
 3      NewLine
 4      Whitespace
 5      '*/'
 6      '/*'
 7      '//'
 8      '-'
 9      '--'
 10     '!'
 11     '!='
 12     '$'
 13     '%'
 14     '&'
 15     '&&'
 16     '&='
 17     '('
 18     ')'
 19     '*'
 20     '*='
 21     ','
 22     '.'
 23     '/'
 24     '/='
 25     ':'
 26     '::'
 27     ';'
 28     '?'
 29     '@'
 30     '['
 31     ']'
 32     '^'
 33     '^='
 34     '{'
 35     '|'
 36     '||'
 37     '|='
 38     '}'
 39     '~'
 40     '~>'
 41     '+'
 42     '++'
 43     '+='
 44     '<'
 45     '<~'
 46     '<<'
 47     '<<='
 48     '<='
 49     '<>'
 50     '='
 51     '-='
 52     '=='
 53     '>'
 54     '->'
 55     '>='
 56     '>>'
 57     '>>='
 58     '£'
 59     AH
 60     AL
 61     asm
 62     AX
 63     BH
 64     BinaryLiteral
 65     BL
 66     bool
 67     BooleanLiteral
 68     BP
 69     break
 70     BX
 71     byte
 72     case
 73     cdecl
 74     CH
 75     CharLiteral
 76     CL
 77     const
 78     continue
 79     CS
 80     CX
 81     DecLiteral
 82     default
 83     DH
 84     DI
 85     DL
 86     do
 87     DS
 88     DX
 89     else
 90     entry
 91     enum
 92     ES
 93     extern
 94     fastcall
 95     for
 96     FS
 97     goto
 98     GS
 99     HexLiteral
 100    Id
 101    if
 102    int
 103    loop
 104    namespace
 105    next
 106    NullLiteral
 107    OctLiteral
 108    operator
 109    override
 110    private
 111    return
 112    sbyte
 113    SI
 114    sizeof
 115    SP
 116    SS
 117    static
 118    stdcall
 119    string
 120    StringLiteral
 121    struct
 122    switch
 123    typedef
 124    uint
 125    use
 126    void
 127    while


========================================
Nonterminals
========================================

128     <Arg>
129     <Array>
130     <Base>
131     <Block>
132     <CallCV>
133     <Case Stms>
134     <Decl>
135     <Decls>
136     <Enum Decl>
137     <Enum Def>
138     <Enum Val>
139     <Expression>
140     <Func Decl>
141     <Func ID>
142     <Func Proto>
143     <GLOBAL>
144     <GLOBALS>
145     <Import>
146     <Imports>
147     <INSTRUCTION>
148     <INSTRUCTIONS>
149     <Mod>
150     <Namespace>
151     <Normal Stm>
152     <Op Add>
153     <Op And>
154     <Op Assign>
155     <Op BinAND>
156     <Op BinOR>
157     <Op BinXOR>
158     <Op Compare>
159     <Op Equate>
160     <Op If>
161     <Op Mult>
162     <Op NEqual>
163     <Op Or>
164     <Op Pointer>
165     <Op Shift>
166     <Op Unary>
167     <Oper Decl>
168     <Param>
169     <PARAM EXPR>
170     <Params>
171     <Pointers>
172     <REGISTER>
173     <Scalar>
174     <Statement>
175     <Stm List>
176     <Struct Decl>
177     <Struct Def>
178     <Then Stm>
179     <Type>
180     <Typedef Decl>
181     <Types>
182     <Value>
183     <Var>
184     <Var Decl>
185     <Var Item>
186     <Var List>


========================================
Rules
========================================

0       <Import> ::= use Id ';'
1       <Imports> ::= <Import>
2       <Imports> ::= <Import> <Imports>
3       <Namespace> ::= namespace Id ';'
4       <GLOBALS> ::= <GLOBAL> <GLOBALS>
5       <GLOBALS> ::= 
6       <GLOBAL> ::= <Decls>
7       <GLOBAL> ::= <Namespace> <Imports> <Decls>
8       <GLOBAL> ::= <Imports> <Decls>
9       <GLOBAL> ::= <Namespace> <Decls>
10      <Decls> ::= <Decl> <Decls>
11      <Decls> ::= <Decl>
12      <Decl> ::= <Func Decl>
13      <Decl> ::= <Oper Decl>
14      <Decl> ::= <Func Proto>
15      <Decl> ::= <Struct Decl>
16      <Decl> ::= <Enum Decl>
17      <Decl> ::= <Var Decl>
18      <Decl> ::= <Typedef Decl>
19      <Func Proto> ::= <Func ID> '(' <Types> ')' ';'
20      <Func Proto> ::= <Func ID> '(' <Params> ')' ';'
21      <Func Proto> ::= <Func ID> '(' ')' ';'
22      <Func Decl> ::= <Func ID> '(' <Params> ')' <Block>
23      <Func Decl> ::= <Func ID> '(' ')' <Block>
24      <Func Decl> ::= entry <Func ID> '(' <Params> ')' <Block>
25      <Func Decl> ::= entry <Func ID> '(' ')' <Block>
26      <Oper Decl> ::= override <Type> operator '==' '(' <Params> ')' <Block>
27      <Oper Decl> ::= override <Type> operator '!=' '(' <Params> ')' <Block>
28      <Oper Decl> ::= override <Type> operator '<=' '(' <Params> ')' <Block>
29      <Oper Decl> ::= override <Type> operator '>=' '(' <Params> ')' <Block>
30      <Oper Decl> ::= override <Type> operator '>' '(' <Params> ')' <Block>
31      <Oper Decl> ::= override <Type> operator '<' '(' <Params> ')' <Block>
32      <Oper Decl> ::= override <Type> operator '+' '(' <Params> ')' <Block>
33      <Oper Decl> ::= override <Type> operator '-' '(' <Params> ')' <Block>
34      <Oper Decl> ::= override <Type> operator '*' '(' <Params> ')' <Block>
35      <Oper Decl> ::= override <Type> operator '/' '(' <Params> ')' <Block>
36      <Oper Decl> ::= override <Type> operator '%' '(' <Params> ')' <Block>
37      <Oper Decl> ::= override <Type> operator '^' '(' <Params> ')' <Block>
38      <Oper Decl> ::= override <Type> operator '&' '(' <Params> ')' <Block>
39      <Oper Decl> ::= override <Type> operator '|' '(' <Params> ')' <Block>
40      <Params> ::= <Param> ',' <Params>
41      <Params> ::= <Param>
42      <Param> ::= const <Type> Id
43      <Param> ::= <Type> Id
44      <Types> ::= <Type> ',' <Types>
45      <Types> ::= <Type>
46      <Func ID> ::= <CallCV> <Type> Id
47      <CallCV> ::= stdcall
48      <CallCV> ::= fastcall
49      <CallCV> ::= cdecl
50      <Typedef Decl> ::= typedef <Type> Id ';'
51      <Struct Decl> ::= struct Id '{' <Struct Def> '}' ';'
52      <Struct Def> ::= <Var Decl> <Struct Def>
53      <Struct Def> ::= <Var Decl>
54      <Var Decl> ::= <Mod> <Type> <Var> <Var List> ';'
55      <Var Decl> ::= <Type> <Var> <Var List> ';'
56      <Var Decl> ::= <Mod> <Var> <Var List> ';'
57      <Var> ::= Id <Array>
58      <Var> ::= Id
59      <Var> ::= Id <Array> '=' <Op If>
60      <Var> ::= Id '=' <Op If>
61      <Array> ::= '[' <Expression> ']'
62      <Array> ::= '[' ']'
63      <Var List> ::= ',' <Var Item> <Var List>
64      <Var List> ::= 
65      <Var Item> ::= <Pointers> <Var>
66      <Mod> ::= extern
67      <Mod> ::= static
68      <Mod> ::= const
69      <Mod> ::= private
70      <Enum Decl> ::= enum Id '{' <Enum Def> '}' ';'
71      <Enum Def> ::= <Enum Val> ',' <Enum Def>
72      <Enum Def> ::= <Enum Val>
73      <Enum Val> ::= Id
74      <Enum Val> ::= Id '=' OctLiteral
75      <Enum Val> ::= Id '=' HexLiteral
76      <Enum Val> ::= Id '=' DecLiteral
77      <Type> ::= <Base> <Pointers>
78      <Base> ::= <Scalar>
79      <Base> ::= struct Id
80      <Base> ::= enum Id
81      <Base> ::= '@' Id
82      <Scalar> ::= byte
83      <Scalar> ::= int
84      <Scalar> ::= uint
85      <Scalar> ::= sbyte
86      <Scalar> ::= bool
87      <Scalar> ::= void
88      <Scalar> ::= string
89      <Pointers> ::= '*' <Pointers>
90      <Pointers> ::= 
91      <Statement> ::= <Var Decl>
92      <Statement> ::= Id ':'
93      <Statement> ::= if '(' <Expression> ')' <Statement>
94      <Statement> ::= if '(' <Expression> ')' <Then Stm> else <Statement>
95      <Statement> ::= while '(' <Expression> ')' <Statement>
96      <Statement> ::= for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Statement>
97      <Statement> ::= asm '{' <INSTRUCTIONS> '}'
98      <Statement> ::= loop <Statement>
99      <Statement> ::= <Normal Stm>
100     <Then Stm> ::= if '(' <Expression> ')' <Then Stm> else <Then Stm>
101     <Then Stm> ::= while '(' <Expression> ')' <Then Stm>
102     <Then Stm> ::= for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Then Stm>
103     <Then Stm> ::= <Normal Stm>
104     <Normal Stm> ::= do <Statement> while '(' <Expression> ')'
105     <Normal Stm> ::= switch '(' <Expression> ')' '{' <Case Stms> '}'
106     <Normal Stm> ::= <Block>
107     <Normal Stm> ::= <Expression> ';'
108     <Normal Stm> ::= goto Id ';'
109     <Normal Stm> ::= break ';'
110     <Normal Stm> ::= continue ';'
111     <Normal Stm> ::= goto case DecLiteral ';'
112     <Normal Stm> ::= goto default ';'
113     <Normal Stm> ::= next ';'
114     <Normal Stm> ::= return <Expression> ';'
115     <Normal Stm> ::= ';'
116     <Arg> ::= <Expression>
117     <Arg> ::= 
118     <Case Stms> ::= case <Value> ':' <Stm List> <Case Stms>
119     <Case Stms> ::= default ':' <Stm List>
120     <Case Stms> ::= 
121     <Block> ::= '{' <Stm List> '}'
122     <Stm List> ::= <Statement> <Stm List>
123     <Stm List> ::= 
124     <Expression> ::= <Op Assign>
125     <Op Assign> ::= <Op If> '=' <Op Assign>
126     <Op Assign> ::= <Op If> '<>' <Op Assign>
127     <Op Assign> ::= <Op If> '+=' <Op Assign>
128     <Op Assign> ::= <Op If> '-=' <Op Assign>
129     <Op Assign> ::= <Op If> '*=' <Op Assign>
130     <Op Assign> ::= <Op If> '/=' <Op Assign>
131     <Op Assign> ::= <Op If> '^=' <Op Assign>
132     <Op Assign> ::= <Op If> '&=' <Op Assign>
133     <Op Assign> ::= <Op If> '|=' <Op Assign>
134     <Op Assign> ::= <Op If> '>>=' <Op Assign>
135     <Op Assign> ::= <Op If> '<<=' <Op Assign>
136     <Op Assign> ::= <Op If>
137     <Op If> ::= <Op Or> '?' <Op If> ':' <Op If>
138     <Op If> ::= <Op Or>
139     <Op Or> ::= <Op Or> '||' <Op And>
140     <Op Or> ::= <Op And>
141     <Op And> ::= <Op And> '&&' <Op BinOR>
142     <Op And> ::= <Op BinOR>
143     <Op BinOR> ::= <Op BinOR> '|' <Op BinXOR>
144     <Op BinOR> ::= <Op BinXOR>
145     <Op BinXOR> ::= <Op BinXOR> '^' <Op BinAND>
146     <Op BinXOR> ::= <Op BinAND>
147     <Op BinAND> ::= <Op BinAND> '&' <Op Equate>
148     <Op BinAND> ::= <Op Equate>
149     <Op Equate> ::= <Op Equate> '==' <Op NEqual>
150     <Op Equate> ::= <Op NEqual>
151     <Op NEqual> ::= <Op NEqual> '!=' <Op Compare>
152     <Op NEqual> ::= <Op Compare>
153     <Op Compare> ::= <Op Compare> '<' <Op Shift>
154     <Op Compare> ::= <Op Compare> '>' <Op Shift>
155     <Op Compare> ::= <Op Compare> '<=' <Op Shift>
156     <Op Compare> ::= <Op Compare> '>=' <Op Shift>
157     <Op Compare> ::= <Op Shift>
158     <Op Shift> ::= <Op Shift> '<<' <Op Add>
159     <Op Shift> ::= <Op Shift> '>>' <Op Add>
160     <Op Shift> ::= <Op Shift> '~>' <Op Add>
161     <Op Shift> ::= <Op Shift> '<~' <Op Add>
162     <Op Shift> ::= <Op Add>
163     <Op Add> ::= <Op Add> '+' <Op Mult>
164     <Op Add> ::= <Op Add> '-' <Op Mult>
165     <Op Add> ::= <Op Mult>
166     <Op Mult> ::= <Op Mult> '*' <Op Unary>
167     <Op Mult> ::= <Op Mult> '/' <Op Unary>
168     <Op Mult> ::= <Op Mult> '%' <Op Unary>
169     <Op Mult> ::= <Op Unary>
170     <Op Unary> ::= '!' <Op Unary>
171     <Op Unary> ::= '~' <Op Unary>
172     <Op Unary> ::= '-' <Op Unary>
173     <Op Unary> ::= '*' <Op Unary>
174     <Op Unary> ::= '&' <Op Unary>
175     <Op Unary> ::= '++' <Op Unary>
176     <Op Unary> ::= '--' <Op Unary>
177     <Op Unary> ::= '£' <Op Unary>
178     <Op Unary> ::= '$' <Op Unary>
179     <Op Unary> ::= <Op Pointer> '++'
180     <Op Unary> ::= <Op Pointer> '--'
181     <Op Unary> ::= '(' <Type> ')' <Op Unary>
182     <Op Unary> ::= sizeof '(' <Type> ')'
183     <Op Unary> ::= sizeof '(' Id <Pointers> ')'
184     <Op Unary> ::= <Op Pointer>
185     <Op Pointer> ::= <Op Pointer> '.' <Value>
186     <Op Pointer> ::= <Op Pointer> '->' <Value>
187     <Op Pointer> ::= Id '::' <Value>
188     <Op Pointer> ::= <Op Pointer> '[' <Expression> ']'
189     <Op Pointer> ::= <Value>
190     <Value> ::= OctLiteral
191     <Value> ::= HexLiteral
192     <Value> ::= DecLiteral
193     <Value> ::= StringLiteral
194     <Value> ::= CharLiteral
195     <Value> ::= BinaryLiteral
196     <Value> ::= BooleanLiteral
197     <Value> ::= NullLiteral
198     <Value> ::= Id '(' <PARAM EXPR> ')'
199     <Value> ::= Id '(' ')'
200     <Value> ::= Id
201     <Value> ::= '(' <Expression> ')'
202     <Value> ::= <REGISTER>
203     <PARAM EXPR> ::= <Expression> ',' <PARAM EXPR>
204     <PARAM EXPR> ::= <Expression>
205     <PARAM EXPR> ::= 
206     <REGISTER> ::= AX
207     <REGISTER> ::= BX
208     <REGISTER> ::= CX
209     <REGISTER> ::= DX
210     <REGISTER> ::= SI
211     <REGISTER> ::= DI
212     <REGISTER> ::= SP
213     <REGISTER> ::= BP
214     <REGISTER> ::= CS
215     <REGISTER> ::= DS
216     <REGISTER> ::= ES
217     <REGISTER> ::= FS
218     <REGISTER> ::= GS
219     <REGISTER> ::= SS
220     <REGISTER> ::= AH
221     <REGISTER> ::= AL
222     <REGISTER> ::= BH
223     <REGISTER> ::= BL
224     <REGISTER> ::= CH
225     <REGISTER> ::= CL
226     <REGISTER> ::= DH
227     <REGISTER> ::= DL
228     <INSTRUCTION> ::= StringLiteral ';'
229     <INSTRUCTIONS> ::= <INSTRUCTION> <INSTRUCTIONS>
230     <INSTRUCTIONS> ::= 


========================================
DFA States
========================================

State 0
        Goto 1       &0A
        Goto 2       &0D
        Goto 4       &2028
        Goto 5       &2029
        Goto 6       &09, &0B, &0C, &20, &85, &A0, &1680, &180E, &2000 .. &200A, &2026, &202F, &205F, &3000
        Goto 7       $
        Goto 8       %
        Goto 9       (
        Goto 10      )
        Goto 11      ,
        Goto 12      .
        Goto 13      ;
        Goto 14      ?
        Goto 15      @
        Goto 16      [
        Goto 17      ]
        Goto 18      {
        Goto 19      }
        Goto 20      £
        Goto 21      '
        Goto 27      HIJKLMNOPQRTUVWXYZ_hjkmqxyz
        Goto 29      "
        Goto 36      !
        Goto 38      &
        Goto 41      *
        Goto 44      +
        Goto 47      -
        Goto 51      /
        Goto 55      0
        Goto 61      123456789
        Goto 64      :
        Goto 66      <
        Goto 72      =
        Goto 74      >
        Goto 78      A
        Goto 82      B
        Goto 87      C
        Goto 92      D
        Goto 98      E
        Goto 100     F
        Goto 102     G
        Goto 104     S
        Goto 108     ^
        Goto 110     a
        Goto 113     b
        Goto 124     c
        Goto 141     d
        Goto 149     e
        Goto 164     f
        Goto 177     g
        Goto 181     i
        Goto 185     l
        Goto 189     n
        Goto 204     o
        Goto 219     p
        Goto 226     r
        Goto 232     s
        Goto 264     t
        Goto 274     u
        Goto 280     v
        Goto 284     w
        Goto 289     |
        Goto 292     ~


State 1
        Accept NewLine


State 2
        Goto 3       &0A
        Accept NewLine


State 3
        Accept NewLine


State 4
        Accept NewLine


State 5
        Accept NewLine


State 6
        Goto 6       &09, &0B, &0C, &20, &85, &A0, &1680, &180E, &2000 .. &200A, &2026, &202F, &205F, &3000
        Accept Whitespace


State 7
        Accept '$'


State 8
        Accept '%'


State 9
        Accept '('


State 10
        Accept ')'


State 11
        Accept ','


State 12
        Accept '.'


State 13
        Accept ';'


State 14
        Accept '?'


State 15
        Accept '@'


State 16
        Accept '['


State 17
        Accept ']'


State 18
        Accept '{'


State 19
        Accept '}'


State 20
        Accept '£'


State 21
        Goto 22      {Space}!"#$%&()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~{NBSP}
        Goto 24      \


State 22
        Goto 23      '


State 23
        Accept CharLiteral


State 24
        Goto 25      {Space}!"#$%&()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~{NBSP}
        Goto 26      '


State 25
        Goto 23      '


State 26
        Goto 23      '
        Accept CharLiteral


State 27
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept Id


State 28
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept Id


State 29
        Goto 30      {Space}!#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~{NBSP}
        Goto 31      "
        Goto 32      \


State 30
        Goto 30      {Space}!#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~{NBSP}
        Goto 31      "
        Goto 32      \


State 31
        Accept StringLiteral


State 32
        Goto 33      {Space}!#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~{NBSP}
        Goto 34      "
        Goto 35      \


State 33
        Goto 30      {Space}!#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~{NBSP}
        Goto 31      "
        Goto 32      \


State 34
        Goto 30      {Space}!#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~{NBSP}
        Goto 31      "
        Goto 32      \
        Accept StringLiteral


State 35
        Goto 33      {Space}!#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~{NBSP}
        Goto 34      "
        Goto 35      \


State 36
        Goto 37      =
        Accept '!'


State 37
        Accept '!='


State 38
        Goto 39      &
        Goto 40      =
        Accept '&'


State 39
        Accept '&&'


State 40
        Accept '&='


State 41
        Goto 42      /
        Goto 43      =
        Accept '*'


State 42
        Accept '*/'


State 43
        Accept '*='


State 44
        Goto 45      +
        Goto 46      =
        Accept '+'


State 45
        Accept '++'


State 46
        Accept '+='


State 47
        Goto 48      -
        Goto 49      =
        Goto 50      >
        Accept '-'


State 48
        Accept '--'


State 49
        Accept '-='


State 50
        Accept '->'


State 51
        Goto 52      *
        Goto 53      /
        Goto 54      =
        Accept '/'


State 52
        Accept '/*'


State 53
        Accept '//'


State 54
        Accept '/='


State 55
        Goto 56      b
        Goto 58      x
        Goto 60      01234567
        Accept OctLiteral


State 56
        Goto 57      01


State 57
        Goto 57      01
        Accept BinaryLiteral


State 58
        Goto 59      0123456789ABCDEFabcdef


State 59
        Goto 59      0123456789ABCDEFabcdef
        Accept HexLiteral


State 60
        Goto 60      01234567
        Accept OctLiteral


State 61
        Goto 62      ABISUabisu
        Goto 63      0123456789
        Accept DecLiteral


State 62
        Accept DecLiteral


State 63
        Goto 62      ABISUabisu
        Goto 63      0123456789
        Accept DecLiteral


State 64
        Goto 65      :
        Accept ':'


State 65
        Accept '::'


State 66
        Goto 67      ~
        Goto 68      =
        Goto 69      >
        Goto 70      <
        Accept '<'


State 67
        Accept '<~'


State 68
        Accept '<='


State 69
        Accept '<>'


State 70
        Goto 71      =
        Accept '<<'


State 71
        Accept '<<='


State 72
        Goto 73      =
        Accept '='


State 73
        Accept '=='


State 74
        Goto 75      =
        Goto 76      >
        Accept '>'


State 75
        Accept '>='


State 76
        Goto 77      =
        Accept '>>'


State 77
        Accept '>>='


State 78
        Goto 28      0123456789ABCDEFGIJKMNOPQRSTUVWYZ_abcdefghijklmnopqrstuvwxyz
        Goto 79      H
        Goto 80      L
        Goto 81      X
        Accept Id


State 79
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept AH


State 80
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept AL


State 81
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept AX


State 82
        Goto 28      0123456789ABCDEFGIJKMNOQRSTUVWYZ_abcdefghijklmnopqrstuvwxyz
        Goto 83      H
        Goto 84      L
        Goto 85      P
        Goto 86      X
        Accept Id


State 83
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept BH


State 84
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept BL


State 85
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept BP


State 86
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept BX


State 87
        Goto 28      0123456789ABCDEFGIJKMNOPQRTUVWYZ_abcdefghijklmnopqrstuvwxyz
        Goto 88      H
        Goto 89      L
        Goto 90      S
        Goto 91      X
        Accept Id


State 88
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept CH


State 89
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept CL


State 90
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept CS


State 91
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept CX


State 92
        Goto 28      0123456789ABCDEFGJKMNOPQRTUVWYZ_abcdefghijklmnopqrstuvwxyz
        Goto 93      H
        Goto 94      I
        Goto 95      L
        Goto 96      S
        Goto 97      X
        Accept Id


State 93
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept DH


State 94
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept DI


State 95
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept DL


State 96
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept DS


State 97
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept DX


State 98
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Goto 99      S
        Accept Id


State 99
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept ES


State 100
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Goto 101     S
        Accept Id


State 101
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept FS


State 102
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Goto 103     S
        Accept Id


State 103
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept GS


State 104
        Goto 28      0123456789ABCDEFGHJKLMNOQRTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Goto 105     I
        Goto 106     P
        Goto 107     S
        Accept Id


State 105
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept SI


State 106
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept SP


State 107
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept SS


State 108
        Goto 109     =
        Accept '^'


State 109
        Accept '^='


State 110
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrtuvwxyz
        Goto 111     s
        Accept Id


State 111
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklnopqrstuvwxyz
        Goto 112     m
        Accept Id


State 112
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept asm


State 113
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnpqstuvwxz
        Goto 114     o
        Goto 117     r
        Goto 121     y
        Accept Id


State 114
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnpqrstuvwxyz
        Goto 115     o
        Accept Id


State 115
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijkmnopqrstuvwxyz
        Goto 116     l
        Accept Id


State 116
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept bool


State 117
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdfghijklmnopqrstuvwxyz
        Goto 118     e
        Accept Id


State 118
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_bcdefghijklmnopqrstuvwxyz
        Goto 119     a
        Accept Id


State 119
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijlmnopqrstuvwxyz
        Goto 120     k
        Accept Id


State 120
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept break


State 121
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrsuvwxyz
        Goto 122     t
        Accept Id


State 122
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdfghijklmnopqrstuvwxyz
        Goto 123     e
        Accept Id


State 123
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept byte


State 124
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_bcefghijklmnpqrstuvwxyz
        Goto 125     a
        Goto 128     d
        Goto 132     o
        Accept Id


State 125
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrtuvwxyz
        Goto 126     s
        Accept Id


State 126
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdfghijklmnopqrstuvwxyz
        Goto 127     e
        Accept Id


State 127
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept case


State 128
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdfghijklmnopqrstuvwxyz
        Goto 129     e
        Accept Id


State 129
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abdefghijklmnopqrstuvwxyz
        Goto 130     c
        Accept Id


State 130
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijkmnopqrstuvwxyz
        Goto 131     l
        Accept Id


State 131
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept cdecl


State 132
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmopqrstuvwxyz
        Goto 133     n
        Accept Id


State 133
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqruvwxyz
        Goto 134     s
        Goto 136     t
        Accept Id


State 134
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrsuvwxyz
        Goto 135     t
        Accept Id


State 135
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept const


State 136
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghjklmnopqrstuvwxyz
        Goto 137     i
        Accept Id


State 137
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmopqrstuvwxyz
        Goto 138     n
        Accept Id


State 138
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstvwxyz
        Goto 139     u
        Accept Id


State 139
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdfghijklmnopqrstuvwxyz
        Goto 140     e
        Accept Id


State 140
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept continue


State 141
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdfghijklmnpqrstuvwxyz
        Goto 142     e
        Goto 148     o
        Accept Id


State 142
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdeghijklmnopqrstuvwxyz
        Goto 143     f
        Accept Id


State 143
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_bcdefghijklmnopqrstuvwxyz
        Goto 144     a
        Accept Id


State 144
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstvwxyz
        Goto 145     u
        Accept Id


State 145
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijkmnopqrstuvwxyz
        Goto 146     l
        Accept Id


State 146
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrsuvwxyz
        Goto 147     t
        Accept Id


State 147
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept default


State 148
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept do


State 149
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijkmopqrstuvwyz
        Goto 150     l
        Goto 153     n
        Goto 159     x
        Accept Id


State 150
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrtuvwxyz
        Goto 151     s
        Accept Id


State 151
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdfghijklmnopqrstuvwxyz
        Goto 152     e
        Accept Id


State 152
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept else


State 153
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrsvwxyz
        Goto 154     t
        Goto 157     u
        Accept Id


State 154
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqstuvwxyz
        Goto 155     r
        Accept Id


State 155
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxz
        Goto 156     y
        Accept Id


State 156
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept entry


State 157
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklnopqrstuvwxyz
        Goto 158     m
        Accept Id


State 158
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept enum


State 159
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrsuvwxyz
        Goto 160     t
        Accept Id


State 160
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdfghijklmnopqrstuvwxyz
        Goto 161     e
        Accept Id


State 161
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqstuvwxyz
        Goto 162     r
        Accept Id


State 162
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmopqrstuvwxyz
        Goto 163     n
        Accept Id


State 163
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept extern


State 164
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_bcdefghijklmnpqrstuvwxyz
        Goto 165     a
        Goto 175     o
        Accept Id


State 165
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijkmnopqrtuvwxyz
        Goto 166     l
        Goto 169     s
        Accept Id


State 166
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrtuvwxyz
        Goto 167     s
        Accept Id


State 167
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdfghijklmnopqrstuvwxyz
        Goto 168     e
        Accept Id


State 168
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept BooleanLiteral


State 169
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrsuvwxyz
        Goto 170     t
        Accept Id


State 170
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abdefghijklmnopqrstuvwxyz
        Goto 171     c
        Accept Id


State 171
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_bcdefghijklmnopqrstuvwxyz
        Goto 172     a
        Accept Id


State 172
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijkmnopqrstuvwxyz
        Goto 173     l
        Accept Id


State 173
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijkmnopqrstuvwxyz
        Goto 174     l
        Accept Id


State 174
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept fastcall


State 175
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqstuvwxyz
        Goto 176     r
        Accept Id


State 176
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept for


State 177
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnpqrstuvwxyz
        Goto 178     o
        Accept Id


State 178
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrsuvwxyz
        Goto 179     t
        Accept Id


State 179
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnpqrstuvwxyz
        Goto 180     o
        Accept Id


State 180
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept goto


State 181
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdeghijklmopqrstuvwxyz
        Goto 182     f
        Goto 183     n
        Accept Id


State 182
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept if


State 183
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrsuvwxyz
        Goto 184     t
        Accept Id


State 184
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept int


State 185
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnpqrstuvwxyz
        Goto 186     o
        Accept Id


State 186
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnpqrstuvwxyz
        Goto 187     o
        Accept Id


State 187
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnoqrstuvwxyz
        Goto 188     p
        Accept Id


State 188
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept loop


State 189
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_bcdfghijklmnopqrstvwxyz
        Goto 190     a
        Goto 198     e
        Goto 201     u
        Accept Id


State 190
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklnopqrstuvwxyz
        Goto 191     m
        Accept Id


State 191
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdfghijklmnopqrstuvwxyz
        Goto 192     e
        Accept Id


State 192
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrtuvwxyz
        Goto 193     s
        Accept Id


State 193
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnoqrstuvwxyz
        Goto 194     p
        Accept Id


State 194
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_bcdefghijklmnopqrstuvwxyz
        Goto 195     a
        Accept Id


State 195
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abdefghijklmnopqrstuvwxyz
        Goto 196     c
        Accept Id


State 196
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdfghijklmnopqrstuvwxyz
        Goto 197     e
        Accept Id


State 197
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept namespace


State 198
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwyz
        Goto 199     x
        Accept Id


State 199
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrsuvwxyz
        Goto 200     t
        Accept Id


State 200
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept next


State 201
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijkmnopqrstuvwxyz
        Goto 202     l
        Accept Id


State 202
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijkmnopqrstuvwxyz
        Goto 203     l
        Accept Id


State 203
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept NullLiteral


State 204
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnoqrstuwxyz
        Goto 205     p
        Goto 212     v
        Accept Id


State 205
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdfghijklmnopqrstuvwxyz
        Goto 206     e
        Accept Id


State 206
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqstuvwxyz
        Goto 207     r
        Accept Id


State 207
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_bcdefghijklmnopqrstuvwxyz
        Goto 208     a
        Accept Id


State 208
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrsuvwxyz
        Goto 209     t
        Accept Id


State 209
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnpqrstuvwxyz
        Goto 210     o
        Accept Id


State 210
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqstuvwxyz
        Goto 211     r
        Accept Id


State 211
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept operator


State 212
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdfghijklmnopqrstuvwxyz
        Goto 213     e
        Accept Id


State 213
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqstuvwxyz
        Goto 214     r
        Accept Id


State 214
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqstuvwxyz
        Goto 215     r
        Accept Id


State 215
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghjklmnopqrstuvwxyz
        Goto 216     i
        Accept Id


State 216
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcefghijklmnopqrstuvwxyz
        Goto 217     d
        Accept Id


State 217
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdfghijklmnopqrstuvwxyz
        Goto 218     e
        Accept Id


State 218
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept override


State 219
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqstuvwxyz
        Goto 220     r
        Accept Id


State 220
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghjklmnopqrstuvwxyz
        Goto 221     i
        Accept Id


State 221
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuwxyz
        Goto 222     v
        Accept Id


State 222
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_bcdefghijklmnopqrstuvwxyz
        Goto 223     a
        Accept Id


State 223
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrsuvwxyz
        Goto 224     t
        Accept Id


State 224
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdfghijklmnopqrstuvwxyz
        Goto 225     e
        Accept Id


State 225
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept private


State 226
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdfghijklmnopqrstuvwxyz
        Goto 227     e
        Accept Id


State 227
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrsuvwxyz
        Goto 228     t
        Accept Id


State 228
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstvwxyz
        Goto 229     u
        Accept Id


State 229
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqstuvwxyz
        Goto 230     r
        Accept Id


State 230
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmopqrstuvwxyz
        Goto 231     n
        Accept Id


State 231
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept return


State 232
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_acdefghjklmnopqrsuvxyz
        Goto 233     b
        Goto 237     i
        Goto 242     t
        Goto 259     w
        Accept Id


State 233
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxz
        Goto 234     y
        Accept Id


State 234
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrsuvwxyz
        Goto 235     t
        Accept Id


State 235
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdfghijklmnopqrstuvwxyz
        Goto 236     e
        Accept Id


State 236
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept sbyte


State 237
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxy
        Goto 238     z
        Accept Id


State 238
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdfghijklmnopqrstuvwxyz
        Goto 239     e
        Accept Id


State 239
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnpqrstuvwxyz
        Goto 240     o
        Accept Id


State 240
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdeghijklmnopqrstuvwxyz
        Goto 241     f
        Accept Id


State 241
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept sizeof


State 242
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_bcefghijklmnopqstuvwxyz
        Goto 243     a
        Goto 247     d
        Goto 252     r
        Accept Id


State 243
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrsuvwxyz
        Goto 244     t
        Accept Id


State 244
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghjklmnopqrstuvwxyz
        Goto 245     i
        Accept Id


State 245
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abdefghijklmnopqrstuvwxyz
        Goto 246     c
        Accept Id


State 246
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept static


State 247
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abdefghijklmnopqrstuvwxyz
        Goto 248     c
        Accept Id


State 248
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_bcdefghijklmnopqrstuvwxyz
        Goto 249     a
        Accept Id


State 249
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijkmnopqrstuvwxyz
        Goto 250     l
        Accept Id


State 250
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijkmnopqrstuvwxyz
        Goto 251     l
        Accept Id


State 251
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept stdcall


State 252
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghjklmnopqrstvwxyz
        Goto 253     i
        Goto 256     u
        Accept Id


State 253
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmopqrstuvwxyz
        Goto 254     n
        Accept Id


State 254
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefhijklmnopqrstuvwxyz
        Goto 255     g
        Accept Id


State 255
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept string


State 256
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abdefghijklmnopqrstuvwxyz
        Goto 257     c
        Accept Id


State 257
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrsuvwxyz
        Goto 258     t
        Accept Id


State 258
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept struct


State 259
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghjklmnopqrstuvwxyz
        Goto 260     i
        Accept Id


State 260
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrsuvwxyz
        Goto 261     t
        Accept Id


State 261
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abdefghijklmnopqrstuvwxyz
        Goto 262     c
        Accept Id


State 262
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefgijklmnopqrstuvwxyz
        Goto 263     h
        Accept Id


State 263
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept switch


State 264
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqstuvwxz
        Goto 265     r
        Goto 268     y
        Accept Id


State 265
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstvwxyz
        Goto 266     u
        Accept Id


State 266
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdfghijklmnopqrstuvwxyz
        Goto 267     e
        Accept Id


State 267
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept BooleanLiteral


State 268
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnoqrstuvwxyz
        Goto 269     p
        Accept Id


State 269
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdfghijklmnopqrstuvwxyz
        Goto 270     e
        Accept Id


State 270
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcefghijklmnopqrstuvwxyz
        Goto 271     d
        Accept Id


State 271
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdfghijklmnopqrstuvwxyz
        Goto 272     e
        Accept Id


State 272
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdeghijklmnopqrstuvwxyz
        Goto 273     f
        Accept Id


State 273
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept typedef


State 274
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghjklmnopqrtuvwxyz
        Goto 275     i
        Goto 278     s
        Accept Id


State 275
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmopqrstuvwxyz
        Goto 276     n
        Accept Id


State 276
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrsuvwxyz
        Goto 277     t
        Accept Id


State 277
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept uint


State 278
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdfghijklmnopqrstuvwxyz
        Goto 279     e
        Accept Id


State 279
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept use


State 280
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnpqrstuvwxyz
        Goto 281     o
        Accept Id


State 281
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghjklmnopqrstuvwxyz
        Goto 282     i
        Accept Id


State 282
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcefghijklmnopqrstuvwxyz
        Goto 283     d
        Accept Id


State 283
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept void


State 284
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefgijklmnopqrstuvwxyz
        Goto 285     h
        Accept Id


State 285
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghjklmnopqrstuvwxyz
        Goto 286     i
        Accept Id


State 286
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijkmnopqrstuvwxyz
        Goto 287     l
        Accept Id


State 287
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdfghijklmnopqrstuvwxyz
        Goto 288     e
        Accept Id


State 288
        Goto 28      0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
        Accept while


State 289
        Goto 290     |
        Goto 291     =
        Accept '|'


State 290
        Accept '||'


State 291
        Accept '|='


State 292
        Goto 293     >
        Accept '~'


State 293
        Accept '~>'




========================================
LALR States
========================================

State 0
        <S'> ::= _ <GLOBALS> (EOF)                                                      <S'> ::= ^ <GLOBALS> (EOF)
        <Import> ::= _ use Id ';'                                                       <Import> ::= ^ use Id ';'
        <Imports> ::= _ <Import>                                                        <Imports> ::= ^ <Import>
        <Imports> ::= _ <Import> <Imports>                                              <Imports> ::= ^ <Import> <Imports>
        <Namespace> ::= _ namespace Id ';'                                              <Namespace> ::= ^ namespace Id ';'
        <GLOBALS> ::= _ <GLOBAL> <GLOBALS>                                              <GLOBALS> ::= ^ <GLOBAL> <GLOBALS>
        <GLOBALS> ::= _                                                                 <GLOBALS> ::= ^
        <GLOBAL> ::= _ <Decls>                                                          <GLOBAL> ::= ^ <Decls>
        <GLOBAL> ::= _ <Namespace> <Imports> <Decls>                                    <GLOBAL> ::= ^ <Namespace> <Imports> <Decls>
        <GLOBAL> ::= _ <Imports> <Decls>                                                <GLOBAL> ::= ^ <Imports> <Decls>
        <GLOBAL> ::= _ <Namespace> <Decls>                                              <GLOBAL> ::= ^ <Namespace> <Decls>
        <Decls> ::= _ <Decl> <Decls>                                                    <Decls> ::= ^ <Decl> <Decls>
        <Decls> ::= _ <Decl>                                                            <Decls> ::= ^ <Decl>
        <Decl> ::= _ <Func Decl>                                                        <Decl> ::= ^ <Func Decl>
        <Decl> ::= _ <Oper Decl>                                                        <Decl> ::= ^ <Oper Decl>
        <Decl> ::= _ <Func Proto>                                                       <Decl> ::= ^ <Func Proto>
        <Decl> ::= _ <Struct Decl>                                                      <Decl> ::= ^ <Struct Decl>
        <Decl> ::= _ <Enum Decl>                                                        <Decl> ::= ^ <Enum Decl>
        <Decl> ::= _ <Var Decl>                                                         <Decl> ::= ^ <Var Decl>
        <Decl> ::= _ <Typedef Decl>                                                     <Decl> ::= ^ <Typedef Decl>
        <Func Proto> ::= _ <Func ID> '(' <Types> ')' ';'                                <Func Proto> ::= ^ <Func ID> '(' <Types> ')' ';'
        <Func Proto> ::= _ <Func ID> '(' <Params> ')' ';'                               <Func Proto> ::= ^ <Func ID> '(' <Params> ')' ';'
        <Func Proto> ::= _ <Func ID> '(' ')' ';'                                        <Func Proto> ::= ^ <Func ID> '(' ')' ';'
        <Func Decl> ::= _ <Func ID> '(' <Params> ')' <Block>                            <Func Decl> ::= ^ <Func ID> '(' <Params> ')' <Block>
        <Func Decl> ::= _ <Func ID> '(' ')' <Block>                                     <Func Decl> ::= ^ <Func ID> '(' ')' <Block>
        <Func Decl> ::= _ entry <Func ID> '(' <Params> ')' <Block>                      <Func Decl> ::= ^ entry <Func ID> '(' <Params> ')' <Block>
        <Func Decl> ::= _ entry <Func ID> '(' ')' <Block>                               <Func Decl> ::= ^ entry <Func ID> '(' ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '==' '(' <Params> ')' <Block>        <Oper Decl> ::= ^ override <Type> operator '==' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '!=' '(' <Params> ')' <Block>        <Oper Decl> ::= ^ override <Type> operator '!=' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '<=' '(' <Params> ')' <Block>        <Oper Decl> ::= ^ override <Type> operator '<=' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '>=' '(' <Params> ')' <Block>        <Oper Decl> ::= ^ override <Type> operator '>=' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '>' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '>' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '<' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '<' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '+' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '+' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '-' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '-' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '*' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '*' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '/' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '/' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '%' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '%' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '^' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '^' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '&' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '&' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '|' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '|' '(' <Params> ')' <Block>
        <Func ID> ::= _ <CallCV> <Type> Id                                              <Func ID> ::= ^ <CallCV> <Type> Id
        <CallCV> ::= _ stdcall                                                          <CallCV> ::= ^ stdcall
        <CallCV> ::= _ fastcall                                                         <CallCV> ::= ^ fastcall
        <CallCV> ::= _ cdecl                                                            <CallCV> ::= ^ cdecl
        <Typedef Decl> ::= _ typedef <Type> Id ';'                                      <Typedef Decl> ::= ^ typedef <Type> Id ';'
        <Struct Decl> ::= _ struct Id '{' <Struct Def> '}' ';'                          <Struct Decl> ::= ^ struct Id '{' <Struct Def> '}' ';'
        <Var Decl> ::= _ <Mod> <Type> <Var> <Var List> ';'                              <Var Decl> ::= ^ <Mod> <Type> <Var> <Var List> ';'
        <Var Decl> ::= _ <Type> <Var> <Var List> ';'                                    <Var Decl> ::= ^ <Type> <Var> <Var List> ';'
        <Var Decl> ::= _ <Mod> <Var> <Var List> ';'                                     <Var Decl> ::= ^ <Mod> <Var> <Var List> ';'
        <Mod> ::= _ extern                                                              <Mod> ::= ^ extern
        <Mod> ::= _ static                                                              <Mod> ::= ^ static
        <Mod> ::= _ const                                                               <Mod> ::= ^ const
        <Mod> ::= _ private                                                             <Mod> ::= ^ private
        <Enum Decl> ::= _ enum Id '{' <Enum Def> '}' ';'                                <Enum Decl> ::= ^ enum Id '{' <Enum Def> '}' ';'
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string

        '@' s 1
        bool s 2
        byte s 3
        cdecl s 4
        const s 5
        entry s 6
        enum s 7
        extern s 8
        fastcall s 9
        int s 10
        namespace s 11
        override s 12
        private s 13
        sbyte s 14
        static s 15
        stdcall s 16
        string s 17
        struct s 18
        typedef s 19
        uint s 20
        use s 21
        void s 22
        <Base> g 23
        <CallCV> g 24
        <Decl> g 25
        <Decls> g 26
        <Enum Decl> g 27
        <Func Decl> g 28
        <Func ID> g 29
        <Func Proto> g 30
        <GLOBAL> g 31
        <GLOBALS> g 32
        <Import> g 33
        <Imports> g 34
        <Mod> g 35
        <Namespace> g 36
        <Oper Decl> g 37
        <Scalar> g 38
        <Struct Decl> g 39
        <Type> g 40
        <Typedef Decl> g 41
        <Var Decl> g 42
        (EOF) r 5


State 1
        Prior States: 0, 12, 19, 24, 25, 31, 34, 35, 36, 57, 65, 67, 73, 79, 113, 116, 119, 121, 129, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 217, 222, 230, 253, 434, 436, 455, 465, 467, 469, 470, 471, 479, 483

        <Base> ::= '@' _ Id                                                             <Base> ::= '@' ^ Id

        Id s 43


State 2
        Prior States: 0, 12, 19, 24, 25, 31, 34, 35, 36, 57, 65, 67, 73, 79, 113, 116, 119, 121, 129, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 217, 222, 230, 253, 434, 436, 455, 465, 467, 469, 470, 471, 479, 483

        <Scalar> ::= bool _                                                             <Scalar> ::= bool ^

        ')' r 86
        '*' r 86
        ',' r 86
        Id r 86
        operator r 86


State 3
        Prior States: 0, 12, 19, 24, 25, 31, 34, 35, 36, 57, 65, 67, 73, 79, 113, 116, 119, 121, 129, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 217, 222, 230, 253, 434, 436, 455, 465, 467, 469, 470, 471, 479, 483

        <Scalar> ::= byte _                                                             <Scalar> ::= byte ^

        ')' r 82
        '*' r 82
        ',' r 82
        Id r 82
        operator r 82


State 4
        Prior States: 0, 6, 25, 31, 34, 36, 65

        <CallCV> ::= cdecl _                                                            <CallCV> ::= cdecl ^

        '@' r 49
        bool r 49
        byte r 49
        enum r 49
        int r 49
        sbyte r 49
        string r 49
        struct r 49
        uint r 49
        void r 49


State 5
        Prior States: 0, 25, 31, 34, 36, 65, 73, 113, 116, 217, 222, 230, 434, 436, 455, 465, 467, 469, 470, 471, 479, 483

        <Mod> ::= const _                                                               <Mod> ::= const ^

        '@' r 68
        bool r 68
        byte r 68
        enum r 68
        Id r 68
        int r 68
        sbyte r 68
        string r 68
        struct r 68
        uint r 68
        void r 68


State 6
        Prior States: 0, 25, 31, 34, 36, 65

        <Func Decl> ::= entry _ <Func ID> '(' <Params> ')' <Block>                      <Func Decl> ::= entry ^ <Func ID> '(' <Params> ')' <Block>
        <Func Decl> ::= entry _ <Func ID> '(' ')' <Block>                               <Func Decl> ::= entry ^ <Func ID> '(' ')' <Block>
        <Func ID> ::= _ <CallCV> <Type> Id                                              <Func ID> ::= ^ <CallCV> <Type> Id
        <CallCV> ::= _ stdcall                                                          <CallCV> ::= ^ stdcall
        <CallCV> ::= _ fastcall                                                         <CallCV> ::= ^ fastcall
        <CallCV> ::= _ cdecl                                                            <CallCV> ::= ^ cdecl

        cdecl s 4
        fastcall s 9
        stdcall s 16
        <CallCV> g 24
        <Func ID> g 44


State 7
        Prior States: 0, 25, 31, 34, 36, 65

        <Enum Decl> ::= enum _ Id '{' <Enum Def> '}' ';'                                <Enum Decl> ::= enum ^ Id '{' <Enum Def> '}' ';'
        <Base> ::= enum _ Id                                                            <Base> ::= enum ^ Id

        Id s 45


State 8
        Prior States: 0, 25, 31, 34, 36, 65, 73, 113, 116, 217, 222, 230, 434, 436, 455, 465, 467, 469, 470, 471, 479, 483

        <Mod> ::= extern _                                                              <Mod> ::= extern ^

        '@' r 66
        bool r 66
        byte r 66
        enum r 66
        Id r 66
        int r 66
        sbyte r 66
        string r 66
        struct r 66
        uint r 66
        void r 66


State 9
        Prior States: 0, 6, 25, 31, 34, 36, 65

        <CallCV> ::= fastcall _                                                         <CallCV> ::= fastcall ^

        '@' r 48
        bool r 48
        byte r 48
        enum r 48
        int r 48
        sbyte r 48
        string r 48
        struct r 48
        uint r 48
        void r 48


State 10
        Prior States: 0, 12, 19, 24, 25, 31, 34, 35, 36, 57, 65, 67, 73, 79, 113, 116, 119, 121, 129, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 217, 222, 230, 253, 434, 436, 455, 465, 467, 469, 470, 471, 479, 483

        <Scalar> ::= int _                                                              <Scalar> ::= int ^

        ')' r 83
        '*' r 83
        ',' r 83
        Id r 83
        operator r 83


State 11
        Prior States: 0, 31

        <Namespace> ::= namespace _ Id ';'                                              <Namespace> ::= namespace ^ Id ';'

        Id s 46


State 12
        Prior States: 0, 25, 31, 34, 36, 65

        <Oper Decl> ::= override _ <Type> operator '==' '(' <Params> ')' <Block>        <Oper Decl> ::= override ^ <Type> operator '==' '(' <Params> ')' <Block>
        <Oper Decl> ::= override _ <Type> operator '!=' '(' <Params> ')' <Block>        <Oper Decl> ::= override ^ <Type> operator '!=' '(' <Params> ')' <Block>
        <Oper Decl> ::= override _ <Type> operator '<=' '(' <Params> ')' <Block>        <Oper Decl> ::= override ^ <Type> operator '<=' '(' <Params> ')' <Block>
        <Oper Decl> ::= override _ <Type> operator '>=' '(' <Params> ')' <Block>        <Oper Decl> ::= override ^ <Type> operator '>=' '(' <Params> ')' <Block>
        <Oper Decl> ::= override _ <Type> operator '>' '(' <Params> ')' <Block>         <Oper Decl> ::= override ^ <Type> operator '>' '(' <Params> ')' <Block>
        <Oper Decl> ::= override _ <Type> operator '<' '(' <Params> ')' <Block>         <Oper Decl> ::= override ^ <Type> operator '<' '(' <Params> ')' <Block>
        <Oper Decl> ::= override _ <Type> operator '+' '(' <Params> ')' <Block>         <Oper Decl> ::= override ^ <Type> operator '+' '(' <Params> ')' <Block>
        <Oper Decl> ::= override _ <Type> operator '-' '(' <Params> ')' <Block>         <Oper Decl> ::= override ^ <Type> operator '-' '(' <Params> ')' <Block>
        <Oper Decl> ::= override _ <Type> operator '*' '(' <Params> ')' <Block>         <Oper Decl> ::= override ^ <Type> operator '*' '(' <Params> ')' <Block>
        <Oper Decl> ::= override _ <Type> operator '/' '(' <Params> ')' <Block>         <Oper Decl> ::= override ^ <Type> operator '/' '(' <Params> ')' <Block>
        <Oper Decl> ::= override _ <Type> operator '%' '(' <Params> ')' <Block>         <Oper Decl> ::= override ^ <Type> operator '%' '(' <Params> ')' <Block>
        <Oper Decl> ::= override _ <Type> operator '^' '(' <Params> ')' <Block>         <Oper Decl> ::= override ^ <Type> operator '^' '(' <Params> ')' <Block>
        <Oper Decl> ::= override _ <Type> operator '&' '(' <Params> ')' <Block>         <Oper Decl> ::= override ^ <Type> operator '&' '(' <Params> ')' <Block>
        <Oper Decl> ::= override _ <Type> operator '|' '(' <Params> ')' <Block>         <Oper Decl> ::= override ^ <Type> operator '|' '(' <Params> ')' <Block>
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string

        '@' s 1
        bool s 2
        byte s 3
        enum s 47
        int s 10
        sbyte s 14
        string s 17
        struct s 48
        uint s 20
        void s 22
        <Base> g 23
        <Scalar> g 38
        <Type> g 49


State 13
        Prior States: 0, 25, 31, 34, 36, 65, 73, 113, 116, 217, 222, 230, 434, 436, 455, 465, 467, 469, 470, 471, 479, 483

        <Mod> ::= private _                                                             <Mod> ::= private ^

        '@' r 69
        bool r 69
        byte r 69
        enum r 69
        Id r 69
        int r 69
        sbyte r 69
        string r 69
        struct r 69
        uint r 69
        void r 69


State 14
        Prior States: 0, 12, 19, 24, 25, 31, 34, 35, 36, 57, 65, 67, 73, 79, 113, 116, 119, 121, 129, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 217, 222, 230, 253, 434, 436, 455, 465, 467, 469, 470, 471, 479, 483

        <Scalar> ::= sbyte _                                                            <Scalar> ::= sbyte ^

        ')' r 85
        '*' r 85
        ',' r 85
        Id r 85
        operator r 85


State 15
        Prior States: 0, 25, 31, 34, 36, 65, 73, 113, 116, 217, 222, 230, 434, 436, 455, 465, 467, 469, 470, 471, 479, 483

        <Mod> ::= static _                                                              <Mod> ::= static ^

        '@' r 67
        bool r 67
        byte r 67
        enum r 67
        Id r 67
        int r 67
        sbyte r 67
        string r 67
        struct r 67
        uint r 67
        void r 67


State 16
        Prior States: 0, 6, 25, 31, 34, 36, 65

        <CallCV> ::= stdcall _                                                          <CallCV> ::= stdcall ^

        '@' r 47
        bool r 47
        byte r 47
        enum r 47
        int r 47
        sbyte r 47
        string r 47
        struct r 47
        uint r 47
        void r 47


State 17
        Prior States: 0, 12, 19, 24, 25, 31, 34, 35, 36, 57, 65, 67, 73, 79, 113, 116, 119, 121, 129, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 217, 222, 230, 253, 434, 436, 455, 465, 467, 469, 470, 471, 479, 483

        <Scalar> ::= string _                                                           <Scalar> ::= string ^

        ')' r 88
        '*' r 88
        ',' r 88
        Id r 88
        operator r 88


State 18
        Prior States: 0, 25, 31, 34, 36, 65

        <Struct Decl> ::= struct _ Id '{' <Struct Def> '}' ';'                          <Struct Decl> ::= struct ^ Id '{' <Struct Def> '}' ';'
        <Base> ::= struct _ Id                                                          <Base> ::= struct ^ Id

        Id s 50


State 19
        Prior States: 0, 25, 31, 34, 36, 65

        <Typedef Decl> ::= typedef _ <Type> Id ';'                                      <Typedef Decl> ::= typedef ^ <Type> Id ';'
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string

        '@' s 1
        bool s 2
        byte s 3
        enum s 47
        int s 10
        sbyte s 14
        string s 17
        struct s 48
        uint s 20
        void s 22
        <Base> g 23
        <Scalar> g 38
        <Type> g 51


State 20
        Prior States: 0, 12, 19, 24, 25, 31, 34, 35, 36, 57, 65, 67, 73, 79, 113, 116, 119, 121, 129, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 217, 222, 230, 253, 434, 436, 455, 465, 467, 469, 470, 471, 479, 483

        <Scalar> ::= uint _                                                             <Scalar> ::= uint ^

        ')' r 84
        '*' r 84
        ',' r 84
        Id r 84
        operator r 84


State 21
        Prior States: 0, 31, 33, 36

        <Import> ::= use _ Id ';'                                                       <Import> ::= use ^ Id ';'

        Id s 52


State 22
        Prior States: 0, 12, 19, 24, 25, 31, 34, 35, 36, 57, 65, 67, 73, 79, 113, 116, 119, 121, 129, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 217, 222, 230, 253, 434, 436, 455, 465, 467, 469, 470, 471, 479, 483

        <Scalar> ::= void _                                                             <Scalar> ::= void ^

        ')' r 87
        '*' r 87
        ',' r 87
        Id r 87
        operator r 87


State 23
        Prior States: 0, 12, 19, 24, 25, 31, 34, 35, 36, 57, 65, 67, 73, 79, 113, 116, 119, 121, 129, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 217, 222, 230, 253, 434, 436, 455, 465, 467, 469, 470, 471, 479, 483

        <Type> ::= <Base> _ <Pointers>                                                  <Type> ::= <Base> ^ <Pointers>
        <Pointers> ::= _ '*' <Pointers>                                                 <Pointers> ::= ^ '*' <Pointers>
        <Pointers> ::= _                                                                <Pointers> ::= ^

        '*' s 53
        <Pointers> g 54
        ')' r 90
        ',' r 90
        Id r 90
        operator r 90


State 24
        Prior States: 0, 6, 25, 31, 34, 36, 65

        <Func ID> ::= <CallCV> _ <Type> Id                                              <Func ID> ::= <CallCV> ^ <Type> Id
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string

        '@' s 1
        bool s 2
        byte s 3
        enum s 47
        int s 10
        sbyte s 14
        string s 17
        struct s 48
        uint s 20
        void s 22
        <Base> g 23
        <Scalar> g 38
        <Type> g 55


State 25
        Shift-Reduce Conflict

        Prior States: 0, 25, 31, 34, 36, 65

        <Decls> ::= <Decl> _ <Decls>                                                    <Decls> ::= <Decl> ^ <Decls>
    --> <Decls> ::= <Decl> _                                                            <Decls> ::= <Decl> ^
        <Decls> ::= _ <Decl> <Decls>                                                    <Decls> ::= ^ <Decl> <Decls>
        <Decls> ::= _ <Decl>                                                            <Decls> ::= ^ <Decl>
        <Decl> ::= _ <Func Decl>                                                        <Decl> ::= ^ <Func Decl>
        <Decl> ::= _ <Oper Decl>                                                        <Decl> ::= ^ <Oper Decl>
        <Decl> ::= _ <Func Proto>                                                       <Decl> ::= ^ <Func Proto>
        <Decl> ::= _ <Struct Decl>                                                      <Decl> ::= ^ <Struct Decl>
        <Decl> ::= _ <Enum Decl>                                                        <Decl> ::= ^ <Enum Decl>
        <Decl> ::= _ <Var Decl>                                                         <Decl> ::= ^ <Var Decl>
        <Decl> ::= _ <Typedef Decl>                                                     <Decl> ::= ^ <Typedef Decl>
        <Func Proto> ::= _ <Func ID> '(' <Types> ')' ';'                                <Func Proto> ::= ^ <Func ID> '(' <Types> ')' ';'
        <Func Proto> ::= _ <Func ID> '(' <Params> ')' ';'                               <Func Proto> ::= ^ <Func ID> '(' <Params> ')' ';'
        <Func Proto> ::= _ <Func ID> '(' ')' ';'                                        <Func Proto> ::= ^ <Func ID> '(' ')' ';'
        <Func Decl> ::= _ <Func ID> '(' <Params> ')' <Block>                            <Func Decl> ::= ^ <Func ID> '(' <Params> ')' <Block>
        <Func Decl> ::= _ <Func ID> '(' ')' <Block>                                     <Func Decl> ::= ^ <Func ID> '(' ')' <Block>
    --> <Func Decl> ::= _ entry <Func ID> '(' <Params> ')' <Block>                      <Func Decl> ::= ^ entry <Func ID> '(' <Params> ')' <Block>
    --> <Func Decl> ::= _ entry <Func ID> '(' ')' <Block>                               <Func Decl> ::= ^ entry <Func ID> '(' ')' <Block>
    --> <Oper Decl> ::= _ override <Type> operator '==' '(' <Params> ')' <Block>        <Oper Decl> ::= ^ override <Type> operator '==' '(' <Params> ')' <Block>
    --> <Oper Decl> ::= _ override <Type> operator '!=' '(' <Params> ')' <Block>        <Oper Decl> ::= ^ override <Type> operator '!=' '(' <Params> ')' <Block>
    --> <Oper Decl> ::= _ override <Type> operator '<=' '(' <Params> ')' <Block>        <Oper Decl> ::= ^ override <Type> operator '<=' '(' <Params> ')' <Block>
    --> <Oper Decl> ::= _ override <Type> operator '>=' '(' <Params> ')' <Block>        <Oper Decl> ::= ^ override <Type> operator '>=' '(' <Params> ')' <Block>
    --> <Oper Decl> ::= _ override <Type> operator '>' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '>' '(' <Params> ')' <Block>
    --> <Oper Decl> ::= _ override <Type> operator '<' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '<' '(' <Params> ')' <Block>
    --> <Oper Decl> ::= _ override <Type> operator '+' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '+' '(' <Params> ')' <Block>
    --> <Oper Decl> ::= _ override <Type> operator '-' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '-' '(' <Params> ')' <Block>
    --> <Oper Decl> ::= _ override <Type> operator '*' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '*' '(' <Params> ')' <Block>
    --> <Oper Decl> ::= _ override <Type> operator '/' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '/' '(' <Params> ')' <Block>
    --> <Oper Decl> ::= _ override <Type> operator '%' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '%' '(' <Params> ')' <Block>
    --> <Oper Decl> ::= _ override <Type> operator '^' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '^' '(' <Params> ')' <Block>
    --> <Oper Decl> ::= _ override <Type> operator '&' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '&' '(' <Params> ')' <Block>
    --> <Oper Decl> ::= _ override <Type> operator '|' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '|' '(' <Params> ')' <Block>
        <Func ID> ::= _ <CallCV> <Type> Id                                              <Func ID> ::= ^ <CallCV> <Type> Id
    --> <CallCV> ::= _ stdcall                                                          <CallCV> ::= ^ stdcall
    --> <CallCV> ::= _ fastcall                                                         <CallCV> ::= ^ fastcall
    --> <CallCV> ::= _ cdecl                                                            <CallCV> ::= ^ cdecl
    --> <Typedef Decl> ::= _ typedef <Type> Id ';'                                      <Typedef Decl> ::= ^ typedef <Type> Id ';'
    --> <Struct Decl> ::= _ struct Id '{' <Struct Def> '}' ';'                          <Struct Decl> ::= ^ struct Id '{' <Struct Def> '}' ';'
        <Var Decl> ::= _ <Mod> <Type> <Var> <Var List> ';'                              <Var Decl> ::= ^ <Mod> <Type> <Var> <Var List> ';'
        <Var Decl> ::= _ <Type> <Var> <Var List> ';'                                    <Var Decl> ::= ^ <Type> <Var> <Var List> ';'
        <Var Decl> ::= _ <Mod> <Var> <Var List> ';'                                     <Var Decl> ::= ^ <Mod> <Var> <Var List> ';'
    --> <Mod> ::= _ extern                                                              <Mod> ::= ^ extern
    --> <Mod> ::= _ static                                                              <Mod> ::= ^ static
    --> <Mod> ::= _ const                                                               <Mod> ::= ^ const
    --> <Mod> ::= _ private                                                             <Mod> ::= ^ private
    --> <Enum Decl> ::= _ enum Id '{' <Enum Def> '}' ';'                                <Enum Decl> ::= ^ enum Id '{' <Enum Def> '}' ';'
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
    --> <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
    --> <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
    --> <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
    --> <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
    --> <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
    --> <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
    --> <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
    --> <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
    --> <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
    --> <Scalar> ::= _ string                                                           <Scalar> ::= ^ string

        '@' s 1
        bool s 2
        byte s 3
        cdecl s 4
        const s 5
        entry s 6
        enum s 7
        extern s 8
        fastcall s 9
        int s 10
        override s 12
        private s 13
        sbyte s 14
        static s 15
        stdcall s 16
        string s 17
        struct s 18
        typedef s 19
        uint s 20
        void s 22
        <Base> g 23
        <CallCV> g 24
        <Decl> g 25
        <Decls> g 56
        <Enum Decl> g 27
        <Func Decl> g 28
        <Func ID> g 29
        <Func Proto> g 30
        <Mod> g 35
        <Oper Decl> g 37
        <Scalar> g 38
        <Struct Decl> g 39
        <Type> g 40
        <Typedef Decl> g 41
        <Var Decl> g 42
        (EOF) r 11
        namespace r 11
        use r 11


State 26
        Prior States: 0, 31

        <GLOBAL> ::= <Decls> _                                                          <GLOBAL> ::= <Decls> ^

        (EOF) r 6
        '@' r 6
        bool r 6
        byte r 6
        cdecl r 6
        const r 6
        entry r 6
        enum r 6
        extern r 6
        fastcall r 6
        int r 6
        namespace r 6
        override r 6
        private r 6
        sbyte r 6
        static r 6
        stdcall r 6
        string r 6
        struct r 6
        typedef r 6
        uint r 6
        use r 6
        void r 6


State 27
        Prior States: 0, 25, 31, 34, 36, 65

        <Decl> ::= <Enum Decl> _                                                        <Decl> ::= <Enum Decl> ^

        (EOF) r 16
        '@' r 16
        bool r 16
        byte r 16
        cdecl r 16
        const r 16
        entry r 16
        enum r 16
        extern r 16
        fastcall r 16
        int r 16
        namespace r 16
        override r 16
        private r 16
        sbyte r 16
        static r 16
        stdcall r 16
        string r 16
        struct r 16
        typedef r 16
        uint r 16
        use r 16
        void r 16


State 28
        Prior States: 0, 25, 31, 34, 36, 65

        <Decl> ::= <Func Decl> _                                                        <Decl> ::= <Func Decl> ^

        (EOF) r 12
        '@' r 12
        bool r 12
        byte r 12
        cdecl r 12
        const r 12
        entry r 12
        enum r 12
        extern r 12
        fastcall r 12
        int r 12
        namespace r 12
        override r 12
        private r 12
        sbyte r 12
        static r 12
        stdcall r 12
        string r 12
        struct r 12
        typedef r 12
        uint r 12
        use r 12
        void r 12


State 29
        Prior States: 0, 25, 31, 34, 36, 65

        <Func Proto> ::= <Func ID> _ '(' <Types> ')' ';'                                <Func Proto> ::= <Func ID> ^ '(' <Types> ')' ';'
        <Func Proto> ::= <Func ID> _ '(' <Params> ')' ';'                               <Func Proto> ::= <Func ID> ^ '(' <Params> ')' ';'
        <Func Proto> ::= <Func ID> _ '(' ')' ';'                                        <Func Proto> ::= <Func ID> ^ '(' ')' ';'
        <Func Decl> ::= <Func ID> _ '(' <Params> ')' <Block>                            <Func Decl> ::= <Func ID> ^ '(' <Params> ')' <Block>
        <Func Decl> ::= <Func ID> _ '(' ')' <Block>                                     <Func Decl> ::= <Func ID> ^ '(' ')' <Block>

        '(' s 57


State 30
        Prior States: 0, 25, 31, 34, 36, 65

        <Decl> ::= <Func Proto> _                                                       <Decl> ::= <Func Proto> ^

        (EOF) r 14
        '@' r 14
        bool r 14
        byte r 14
        cdecl r 14
        const r 14
        entry r 14
        enum r 14
        extern r 14
        fastcall r 14
        int r 14
        namespace r 14
        override r 14
        private r 14
        sbyte r 14
        static r 14
        stdcall r 14
        string r 14
        struct r 14
        typedef r 14
        uint r 14
        use r 14
        void r 14


State 31
        Prior States: 0, 31

        <GLOBALS> ::= <GLOBAL> _ <GLOBALS>                                              <GLOBALS> ::= <GLOBAL> ^ <GLOBALS>
        <Import> ::= _ use Id ';'                                                       <Import> ::= ^ use Id ';'
        <Imports> ::= _ <Import>                                                        <Imports> ::= ^ <Import>
        <Imports> ::= _ <Import> <Imports>                                              <Imports> ::= ^ <Import> <Imports>
        <Namespace> ::= _ namespace Id ';'                                              <Namespace> ::= ^ namespace Id ';'
        <GLOBALS> ::= _ <GLOBAL> <GLOBALS>                                              <GLOBALS> ::= ^ <GLOBAL> <GLOBALS>
        <GLOBALS> ::= _                                                                 <GLOBALS> ::= ^
        <GLOBAL> ::= _ <Decls>                                                          <GLOBAL> ::= ^ <Decls>
        <GLOBAL> ::= _ <Namespace> <Imports> <Decls>                                    <GLOBAL> ::= ^ <Namespace> <Imports> <Decls>
        <GLOBAL> ::= _ <Imports> <Decls>                                                <GLOBAL> ::= ^ <Imports> <Decls>
        <GLOBAL> ::= _ <Namespace> <Decls>                                              <GLOBAL> ::= ^ <Namespace> <Decls>
        <Decls> ::= _ <Decl> <Decls>                                                    <Decls> ::= ^ <Decl> <Decls>
        <Decls> ::= _ <Decl>                                                            <Decls> ::= ^ <Decl>
        <Decl> ::= _ <Func Decl>                                                        <Decl> ::= ^ <Func Decl>
        <Decl> ::= _ <Oper Decl>                                                        <Decl> ::= ^ <Oper Decl>
        <Decl> ::= _ <Func Proto>                                                       <Decl> ::= ^ <Func Proto>
        <Decl> ::= _ <Struct Decl>                                                      <Decl> ::= ^ <Struct Decl>
        <Decl> ::= _ <Enum Decl>                                                        <Decl> ::= ^ <Enum Decl>
        <Decl> ::= _ <Var Decl>                                                         <Decl> ::= ^ <Var Decl>
        <Decl> ::= _ <Typedef Decl>                                                     <Decl> ::= ^ <Typedef Decl>
        <Func Proto> ::= _ <Func ID> '(' <Types> ')' ';'                                <Func Proto> ::= ^ <Func ID> '(' <Types> ')' ';'
        <Func Proto> ::= _ <Func ID> '(' <Params> ')' ';'                               <Func Proto> ::= ^ <Func ID> '(' <Params> ')' ';'
        <Func Proto> ::= _ <Func ID> '(' ')' ';'                                        <Func Proto> ::= ^ <Func ID> '(' ')' ';'
        <Func Decl> ::= _ <Func ID> '(' <Params> ')' <Block>                            <Func Decl> ::= ^ <Func ID> '(' <Params> ')' <Block>
        <Func Decl> ::= _ <Func ID> '(' ')' <Block>                                     <Func Decl> ::= ^ <Func ID> '(' ')' <Block>
        <Func Decl> ::= _ entry <Func ID> '(' <Params> ')' <Block>                      <Func Decl> ::= ^ entry <Func ID> '(' <Params> ')' <Block>
        <Func Decl> ::= _ entry <Func ID> '(' ')' <Block>                               <Func Decl> ::= ^ entry <Func ID> '(' ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '==' '(' <Params> ')' <Block>        <Oper Decl> ::= ^ override <Type> operator '==' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '!=' '(' <Params> ')' <Block>        <Oper Decl> ::= ^ override <Type> operator '!=' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '<=' '(' <Params> ')' <Block>        <Oper Decl> ::= ^ override <Type> operator '<=' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '>=' '(' <Params> ')' <Block>        <Oper Decl> ::= ^ override <Type> operator '>=' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '>' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '>' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '<' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '<' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '+' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '+' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '-' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '-' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '*' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '*' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '/' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '/' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '%' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '%' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '^' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '^' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '&' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '&' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '|' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '|' '(' <Params> ')' <Block>
        <Func ID> ::= _ <CallCV> <Type> Id                                              <Func ID> ::= ^ <CallCV> <Type> Id
        <CallCV> ::= _ stdcall                                                          <CallCV> ::= ^ stdcall
        <CallCV> ::= _ fastcall                                                         <CallCV> ::= ^ fastcall
        <CallCV> ::= _ cdecl                                                            <CallCV> ::= ^ cdecl
        <Typedef Decl> ::= _ typedef <Type> Id ';'                                      <Typedef Decl> ::= ^ typedef <Type> Id ';'
        <Struct Decl> ::= _ struct Id '{' <Struct Def> '}' ';'                          <Struct Decl> ::= ^ struct Id '{' <Struct Def> '}' ';'
        <Var Decl> ::= _ <Mod> <Type> <Var> <Var List> ';'                              <Var Decl> ::= ^ <Mod> <Type> <Var> <Var List> ';'
        <Var Decl> ::= _ <Type> <Var> <Var List> ';'                                    <Var Decl> ::= ^ <Type> <Var> <Var List> ';'
        <Var Decl> ::= _ <Mod> <Var> <Var List> ';'                                     <Var Decl> ::= ^ <Mod> <Var> <Var List> ';'
        <Mod> ::= _ extern                                                              <Mod> ::= ^ extern
        <Mod> ::= _ static                                                              <Mod> ::= ^ static
        <Mod> ::= _ const                                                               <Mod> ::= ^ const
        <Mod> ::= _ private                                                             <Mod> ::= ^ private
        <Enum Decl> ::= _ enum Id '{' <Enum Def> '}' ';'                                <Enum Decl> ::= ^ enum Id '{' <Enum Def> '}' ';'
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string

        '@' s 1
        bool s 2
        byte s 3
        cdecl s 4
        const s 5
        entry s 6
        enum s 7
        extern s 8
        fastcall s 9
        int s 10
        namespace s 11
        override s 12
        private s 13
        sbyte s 14
        static s 15
        stdcall s 16
        string s 17
        struct s 18
        typedef s 19
        uint s 20
        use s 21
        void s 22
        <Base> g 23
        <CallCV> g 24
        <Decl> g 25
        <Decls> g 26
        <Enum Decl> g 27
        <Func Decl> g 28
        <Func ID> g 29
        <Func Proto> g 30
        <GLOBAL> g 31
        <GLOBALS> g 58
        <Import> g 33
        <Imports> g 34
        <Mod> g 35
        <Namespace> g 36
        <Oper Decl> g 37
        <Scalar> g 38
        <Struct Decl> g 39
        <Type> g 40
        <Typedef Decl> g 41
        <Var Decl> g 42
        (EOF) r 5


State 32
        Prior States: 0

        <S'> ::= <GLOBALS> _ (EOF)                                                      <S'> ::= <GLOBALS> ^ (EOF)

        (EOF) a


State 33
        Prior States: 0, 31, 33, 36

        <Imports> ::= <Import> _                                                        <Imports> ::= <Import> ^
        <Imports> ::= <Import> _ <Imports>                                              <Imports> ::= <Import> ^ <Imports>
        <Import> ::= _ use Id ';'                                                       <Import> ::= ^ use Id ';'
        <Imports> ::= _ <Import>                                                        <Imports> ::= ^ <Import>
        <Imports> ::= _ <Import> <Imports>                                              <Imports> ::= ^ <Import> <Imports>

        use s 21
        <Import> g 33
        <Imports> g 59
        '@' r 1
        bool r 1
        byte r 1
        cdecl r 1
        const r 1
        entry r 1
        enum r 1
        extern r 1
        fastcall r 1
        int r 1
        override r 1
        private r 1
        sbyte r 1
        static r 1
        stdcall r 1
        string r 1
        struct r 1
        typedef r 1
        uint r 1
        void r 1


State 34
        Prior States: 0, 31

        <GLOBAL> ::= <Imports> _ <Decls>                                                <GLOBAL> ::= <Imports> ^ <Decls>
        <Decls> ::= _ <Decl> <Decls>                                                    <Decls> ::= ^ <Decl> <Decls>
        <Decls> ::= _ <Decl>                                                            <Decls> ::= ^ <Decl>
        <Decl> ::= _ <Func Decl>                                                        <Decl> ::= ^ <Func Decl>
        <Decl> ::= _ <Oper Decl>                                                        <Decl> ::= ^ <Oper Decl>
        <Decl> ::= _ <Func Proto>                                                       <Decl> ::= ^ <Func Proto>
        <Decl> ::= _ <Struct Decl>                                                      <Decl> ::= ^ <Struct Decl>
        <Decl> ::= _ <Enum Decl>                                                        <Decl> ::= ^ <Enum Decl>
        <Decl> ::= _ <Var Decl>                                                         <Decl> ::= ^ <Var Decl>
        <Decl> ::= _ <Typedef Decl>                                                     <Decl> ::= ^ <Typedef Decl>
        <Func Proto> ::= _ <Func ID> '(' <Types> ')' ';'                                <Func Proto> ::= ^ <Func ID> '(' <Types> ')' ';'
        <Func Proto> ::= _ <Func ID> '(' <Params> ')' ';'                               <Func Proto> ::= ^ <Func ID> '(' <Params> ')' ';'
        <Func Proto> ::= _ <Func ID> '(' ')' ';'                                        <Func Proto> ::= ^ <Func ID> '(' ')' ';'
        <Func Decl> ::= _ <Func ID> '(' <Params> ')' <Block>                            <Func Decl> ::= ^ <Func ID> '(' <Params> ')' <Block>
        <Func Decl> ::= _ <Func ID> '(' ')' <Block>                                     <Func Decl> ::= ^ <Func ID> '(' ')' <Block>
        <Func Decl> ::= _ entry <Func ID> '(' <Params> ')' <Block>                      <Func Decl> ::= ^ entry <Func ID> '(' <Params> ')' <Block>
        <Func Decl> ::= _ entry <Func ID> '(' ')' <Block>                               <Func Decl> ::= ^ entry <Func ID> '(' ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '==' '(' <Params> ')' <Block>        <Oper Decl> ::= ^ override <Type> operator '==' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '!=' '(' <Params> ')' <Block>        <Oper Decl> ::= ^ override <Type> operator '!=' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '<=' '(' <Params> ')' <Block>        <Oper Decl> ::= ^ override <Type> operator '<=' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '>=' '(' <Params> ')' <Block>        <Oper Decl> ::= ^ override <Type> operator '>=' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '>' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '>' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '<' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '<' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '+' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '+' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '-' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '-' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '*' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '*' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '/' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '/' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '%' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '%' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '^' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '^' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '&' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '&' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '|' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '|' '(' <Params> ')' <Block>
        <Func ID> ::= _ <CallCV> <Type> Id                                              <Func ID> ::= ^ <CallCV> <Type> Id
        <CallCV> ::= _ stdcall                                                          <CallCV> ::= ^ stdcall
        <CallCV> ::= _ fastcall                                                         <CallCV> ::= ^ fastcall
        <CallCV> ::= _ cdecl                                                            <CallCV> ::= ^ cdecl
        <Typedef Decl> ::= _ typedef <Type> Id ';'                                      <Typedef Decl> ::= ^ typedef <Type> Id ';'
        <Struct Decl> ::= _ struct Id '{' <Struct Def> '}' ';'                          <Struct Decl> ::= ^ struct Id '{' <Struct Def> '}' ';'
        <Var Decl> ::= _ <Mod> <Type> <Var> <Var List> ';'                              <Var Decl> ::= ^ <Mod> <Type> <Var> <Var List> ';'
        <Var Decl> ::= _ <Type> <Var> <Var List> ';'                                    <Var Decl> ::= ^ <Type> <Var> <Var List> ';'
        <Var Decl> ::= _ <Mod> <Var> <Var List> ';'                                     <Var Decl> ::= ^ <Mod> <Var> <Var List> ';'
        <Mod> ::= _ extern                                                              <Mod> ::= ^ extern
        <Mod> ::= _ static                                                              <Mod> ::= ^ static
        <Mod> ::= _ const                                                               <Mod> ::= ^ const
        <Mod> ::= _ private                                                             <Mod> ::= ^ private
        <Enum Decl> ::= _ enum Id '{' <Enum Def> '}' ';'                                <Enum Decl> ::= ^ enum Id '{' <Enum Def> '}' ';'
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string

        '@' s 1
        bool s 2
        byte s 3
        cdecl s 4
        const s 5
        entry s 6
        enum s 7
        extern s 8
        fastcall s 9
        int s 10
        override s 12
        private s 13
        sbyte s 14
        static s 15
        stdcall s 16
        string s 17
        struct s 18
        typedef s 19
        uint s 20
        void s 22
        <Base> g 23
        <CallCV> g 24
        <Decl> g 25
        <Decls> g 60
        <Enum Decl> g 27
        <Func Decl> g 28
        <Func ID> g 29
        <Func Proto> g 30
        <Mod> g 35
        <Oper Decl> g 37
        <Scalar> g 38
        <Struct Decl> g 39
        <Type> g 40
        <Typedef Decl> g 41
        <Var Decl> g 42


State 35
        Prior States: 0, 25, 31, 34, 36, 65, 73, 113, 116, 217, 222, 230, 434, 436, 455, 465, 467, 469, 470, 471, 479, 483

        <Var Decl> ::= <Mod> _ <Type> <Var> <Var List> ';'                              <Var Decl> ::= <Mod> ^ <Type> <Var> <Var List> ';'
        <Var Decl> ::= <Mod> _ <Var> <Var List> ';'                                     <Var Decl> ::= <Mod> ^ <Var> <Var List> ';'
        <Var> ::= _ Id <Array>                                                          <Var> ::= ^ Id <Array>
        <Var> ::= _ Id                                                                  <Var> ::= ^ Id
        <Var> ::= _ Id <Array> '=' <Op If>                                              <Var> ::= ^ Id <Array> '=' <Op If>
        <Var> ::= _ Id '=' <Op If>                                                      <Var> ::= ^ Id '=' <Op If>
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string

        '@' s 1
        bool s 2
        byte s 3
        enum s 47
        Id s 61
        int s 10
        sbyte s 14
        string s 17
        struct s 48
        uint s 20
        void s 22
        <Base> g 23
        <Scalar> g 38
        <Type> g 62
        <Var> g 63


State 36
        Prior States: 0, 31

        <GLOBAL> ::= <Namespace> _ <Imports> <Decls>                                    <GLOBAL> ::= <Namespace> ^ <Imports> <Decls>
        <GLOBAL> ::= <Namespace> _ <Decls>                                              <GLOBAL> ::= <Namespace> ^ <Decls>
        <Import> ::= _ use Id ';'                                                       <Import> ::= ^ use Id ';'
        <Imports> ::= _ <Import>                                                        <Imports> ::= ^ <Import>
        <Imports> ::= _ <Import> <Imports>                                              <Imports> ::= ^ <Import> <Imports>
        <Decls> ::= _ <Decl> <Decls>                                                    <Decls> ::= ^ <Decl> <Decls>
        <Decls> ::= _ <Decl>                                                            <Decls> ::= ^ <Decl>
        <Decl> ::= _ <Func Decl>                                                        <Decl> ::= ^ <Func Decl>
        <Decl> ::= _ <Oper Decl>                                                        <Decl> ::= ^ <Oper Decl>
        <Decl> ::= _ <Func Proto>                                                       <Decl> ::= ^ <Func Proto>
        <Decl> ::= _ <Struct Decl>                                                      <Decl> ::= ^ <Struct Decl>
        <Decl> ::= _ <Enum Decl>                                                        <Decl> ::= ^ <Enum Decl>
        <Decl> ::= _ <Var Decl>                                                         <Decl> ::= ^ <Var Decl>
        <Decl> ::= _ <Typedef Decl>                                                     <Decl> ::= ^ <Typedef Decl>
        <Func Proto> ::= _ <Func ID> '(' <Types> ')' ';'                                <Func Proto> ::= ^ <Func ID> '(' <Types> ')' ';'
        <Func Proto> ::= _ <Func ID> '(' <Params> ')' ';'                               <Func Proto> ::= ^ <Func ID> '(' <Params> ')' ';'
        <Func Proto> ::= _ <Func ID> '(' ')' ';'                                        <Func Proto> ::= ^ <Func ID> '(' ')' ';'
        <Func Decl> ::= _ <Func ID> '(' <Params> ')' <Block>                            <Func Decl> ::= ^ <Func ID> '(' <Params> ')' <Block>
        <Func Decl> ::= _ <Func ID> '(' ')' <Block>                                     <Func Decl> ::= ^ <Func ID> '(' ')' <Block>
        <Func Decl> ::= _ entry <Func ID> '(' <Params> ')' <Block>                      <Func Decl> ::= ^ entry <Func ID> '(' <Params> ')' <Block>
        <Func Decl> ::= _ entry <Func ID> '(' ')' <Block>                               <Func Decl> ::= ^ entry <Func ID> '(' ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '==' '(' <Params> ')' <Block>        <Oper Decl> ::= ^ override <Type> operator '==' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '!=' '(' <Params> ')' <Block>        <Oper Decl> ::= ^ override <Type> operator '!=' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '<=' '(' <Params> ')' <Block>        <Oper Decl> ::= ^ override <Type> operator '<=' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '>=' '(' <Params> ')' <Block>        <Oper Decl> ::= ^ override <Type> operator '>=' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '>' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '>' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '<' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '<' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '+' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '+' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '-' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '-' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '*' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '*' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '/' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '/' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '%' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '%' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '^' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '^' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '&' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '&' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '|' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '|' '(' <Params> ')' <Block>
        <Func ID> ::= _ <CallCV> <Type> Id                                              <Func ID> ::= ^ <CallCV> <Type> Id
        <CallCV> ::= _ stdcall                                                          <CallCV> ::= ^ stdcall
        <CallCV> ::= _ fastcall                                                         <CallCV> ::= ^ fastcall
        <CallCV> ::= _ cdecl                                                            <CallCV> ::= ^ cdecl
        <Typedef Decl> ::= _ typedef <Type> Id ';'                                      <Typedef Decl> ::= ^ typedef <Type> Id ';'
        <Struct Decl> ::= _ struct Id '{' <Struct Def> '}' ';'                          <Struct Decl> ::= ^ struct Id '{' <Struct Def> '}' ';'
        <Var Decl> ::= _ <Mod> <Type> <Var> <Var List> ';'                              <Var Decl> ::= ^ <Mod> <Type> <Var> <Var List> ';'
        <Var Decl> ::= _ <Type> <Var> <Var List> ';'                                    <Var Decl> ::= ^ <Type> <Var> <Var List> ';'
        <Var Decl> ::= _ <Mod> <Var> <Var List> ';'                                     <Var Decl> ::= ^ <Mod> <Var> <Var List> ';'
        <Mod> ::= _ extern                                                              <Mod> ::= ^ extern
        <Mod> ::= _ static                                                              <Mod> ::= ^ static
        <Mod> ::= _ const                                                               <Mod> ::= ^ const
        <Mod> ::= _ private                                                             <Mod> ::= ^ private
        <Enum Decl> ::= _ enum Id '{' <Enum Def> '}' ';'                                <Enum Decl> ::= ^ enum Id '{' <Enum Def> '}' ';'
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string

        '@' s 1
        bool s 2
        byte s 3
        cdecl s 4
        const s 5
        entry s 6
        enum s 7
        extern s 8
        fastcall s 9
        int s 10
        override s 12
        private s 13
        sbyte s 14
        static s 15
        stdcall s 16
        string s 17
        struct s 18
        typedef s 19
        uint s 20
        use s 21
        void s 22
        <Base> g 23
        <CallCV> g 24
        <Decl> g 25
        <Decls> g 64
        <Enum Decl> g 27
        <Func Decl> g 28
        <Func ID> g 29
        <Func Proto> g 30
        <Import> g 33
        <Imports> g 65
        <Mod> g 35
        <Oper Decl> g 37
        <Scalar> g 38
        <Struct Decl> g 39
        <Type> g 40
        <Typedef Decl> g 41
        <Var Decl> g 42


State 37
        Prior States: 0, 25, 31, 34, 36, 65

        <Decl> ::= <Oper Decl> _                                                        <Decl> ::= <Oper Decl> ^

        (EOF) r 13
        '@' r 13
        bool r 13
        byte r 13
        cdecl r 13
        const r 13
        entry r 13
        enum r 13
        extern r 13
        fastcall r 13
        int r 13
        namespace r 13
        override r 13
        private r 13
        sbyte r 13
        static r 13
        stdcall r 13
        string r 13
        struct r 13
        typedef r 13
        uint r 13
        use r 13
        void r 13


State 38
        Prior States: 0, 12, 19, 24, 25, 31, 34, 35, 36, 57, 65, 67, 73, 79, 113, 116, 119, 121, 129, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 217, 222, 230, 253, 434, 436, 455, 465, 467, 469, 470, 471, 479, 483

        <Base> ::= <Scalar> _                                                           <Base> ::= <Scalar> ^

        ')' r 78
        '*' r 78
        ',' r 78
        Id r 78
        operator r 78


State 39
        Prior States: 0, 25, 31, 34, 36, 65

        <Decl> ::= <Struct Decl> _                                                      <Decl> ::= <Struct Decl> ^

        (EOF) r 15
        '@' r 15
        bool r 15
        byte r 15
        cdecl r 15
        const r 15
        entry r 15
        enum r 15
        extern r 15
        fastcall r 15
        int r 15
        namespace r 15
        override r 15
        private r 15
        sbyte r 15
        static r 15
        stdcall r 15
        string r 15
        struct r 15
        typedef r 15
        uint r 15
        use r 15
        void r 15


State 40
        Prior States: 0, 25, 31, 34, 36, 65, 73, 113, 116, 217, 222, 230, 434, 436, 455, 465, 467, 469, 470, 471, 479, 483

        <Var Decl> ::= <Type> _ <Var> <Var List> ';'                                    <Var Decl> ::= <Type> ^ <Var> <Var List> ';'
        <Var> ::= _ Id <Array>                                                          <Var> ::= ^ Id <Array>
        <Var> ::= _ Id                                                                  <Var> ::= ^ Id
        <Var> ::= _ Id <Array> '=' <Op If>                                              <Var> ::= ^ Id <Array> '=' <Op If>
        <Var> ::= _ Id '=' <Op If>                                                      <Var> ::= ^ Id '=' <Op If>

        Id s 61
        <Var> g 66


State 41
        Prior States: 0, 25, 31, 34, 36, 65

        <Decl> ::= <Typedef Decl> _                                                     <Decl> ::= <Typedef Decl> ^

        (EOF) r 18
        '@' r 18
        bool r 18
        byte r 18
        cdecl r 18
        const r 18
        entry r 18
        enum r 18
        extern r 18
        fastcall r 18
        int r 18
        namespace r 18
        override r 18
        private r 18
        sbyte r 18
        static r 18
        stdcall r 18
        string r 18
        struct r 18
        typedef r 18
        uint r 18
        use r 18
        void r 18


State 42
        Prior States: 0, 25, 31, 34, 36, 65

        <Decl> ::= <Var Decl> _                                                         <Decl> ::= <Var Decl> ^

        (EOF) r 17
        '@' r 17
        bool r 17
        byte r 17
        cdecl r 17
        const r 17
        entry r 17
        enum r 17
        extern r 17
        fastcall r 17
        int r 17
        namespace r 17
        override r 17
        private r 17
        sbyte r 17
        static r 17
        stdcall r 17
        string r 17
        struct r 17
        typedef r 17
        uint r 17
        use r 17
        void r 17


State 43
        Prior States: 1

        <Base> ::= '@' Id _                                                             <Base> ::= '@' Id ^

        ')' r 81
        '*' r 81
        ',' r 81
        Id r 81
        operator r 81


State 44
        Prior States: 6

        <Func Decl> ::= entry <Func ID> _ '(' <Params> ')' <Block>                      <Func Decl> ::= entry <Func ID> ^ '(' <Params> ')' <Block>
        <Func Decl> ::= entry <Func ID> _ '(' ')' <Block>                               <Func Decl> ::= entry <Func ID> ^ '(' ')' <Block>

        '(' s 67


State 45
        Prior States: 7

        <Enum Decl> ::= enum Id _ '{' <Enum Def> '}' ';'                                <Enum Decl> ::= enum Id ^ '{' <Enum Def> '}' ';'
        <Base> ::= enum Id _                                                            <Base> ::= enum Id ^

        '{' s 68
        '*' r 80
        Id r 80


State 46
        Prior States: 11

        <Namespace> ::= namespace Id _ ';'                                              <Namespace> ::= namespace Id ^ ';'

        ';' s 69


State 47
        Prior States: 12, 19, 24, 35, 57, 67, 73, 79, 113, 116, 119, 121, 129, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 217, 222, 230, 253, 434, 436, 455, 465, 467, 469, 470, 471, 479, 483

        <Base> ::= enum _ Id                                                            <Base> ::= enum ^ Id

        Id s 70


State 48
        Prior States: 12, 19, 24, 35, 57, 67, 73, 79, 113, 116, 119, 121, 129, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 217, 222, 230, 253, 434, 436, 455, 465, 467, 469, 470, 471, 479, 483

        <Base> ::= struct _ Id                                                          <Base> ::= struct ^ Id

        Id s 71


State 49
        Prior States: 12

        <Oper Decl> ::= override <Type> _ operator '==' '(' <Params> ')' <Block>        <Oper Decl> ::= override <Type> ^ operator '==' '(' <Params> ')' <Block>
        <Oper Decl> ::= override <Type> _ operator '!=' '(' <Params> ')' <Block>        <Oper Decl> ::= override <Type> ^ operator '!=' '(' <Params> ')' <Block>
        <Oper Decl> ::= override <Type> _ operator '<=' '(' <Params> ')' <Block>        <Oper Decl> ::= override <Type> ^ operator '<=' '(' <Params> ')' <Block>
        <Oper Decl> ::= override <Type> _ operator '>=' '(' <Params> ')' <Block>        <Oper Decl> ::= override <Type> ^ operator '>=' '(' <Params> ')' <Block>
        <Oper Decl> ::= override <Type> _ operator '>' '(' <Params> ')' <Block>         <Oper Decl> ::= override <Type> ^ operator '>' '(' <Params> ')' <Block>
        <Oper Decl> ::= override <Type> _ operator '<' '(' <Params> ')' <Block>         <Oper Decl> ::= override <Type> ^ operator '<' '(' <Params> ')' <Block>
        <Oper Decl> ::= override <Type> _ operator '+' '(' <Params> ')' <Block>         <Oper Decl> ::= override <Type> ^ operator '+' '(' <Params> ')' <Block>
        <Oper Decl> ::= override <Type> _ operator '-' '(' <Params> ')' <Block>         <Oper Decl> ::= override <Type> ^ operator '-' '(' <Params> ')' <Block>
        <Oper Decl> ::= override <Type> _ operator '*' '(' <Params> ')' <Block>         <Oper Decl> ::= override <Type> ^ operator '*' '(' <Params> ')' <Block>
        <Oper Decl> ::= override <Type> _ operator '/' '(' <Params> ')' <Block>         <Oper Decl> ::= override <Type> ^ operator '/' '(' <Params> ')' <Block>
        <Oper Decl> ::= override <Type> _ operator '%' '(' <Params> ')' <Block>         <Oper Decl> ::= override <Type> ^ operator '%' '(' <Params> ')' <Block>
        <Oper Decl> ::= override <Type> _ operator '^' '(' <Params> ')' <Block>         <Oper Decl> ::= override <Type> ^ operator '^' '(' <Params> ')' <Block>
        <Oper Decl> ::= override <Type> _ operator '&' '(' <Params> ')' <Block>         <Oper Decl> ::= override <Type> ^ operator '&' '(' <Params> ')' <Block>
        <Oper Decl> ::= override <Type> _ operator '|' '(' <Params> ')' <Block>         <Oper Decl> ::= override <Type> ^ operator '|' '(' <Params> ')' <Block>

        operator s 72


State 50
        Prior States: 18

        <Struct Decl> ::= struct Id _ '{' <Struct Def> '}' ';'                          <Struct Decl> ::= struct Id ^ '{' <Struct Def> '}' ';'
        <Base> ::= struct Id _                                                          <Base> ::= struct Id ^

        '{' s 73
        '*' r 79
        Id r 79


State 51
        Prior States: 19

        <Typedef Decl> ::= typedef <Type> _ Id ';'                                      <Typedef Decl> ::= typedef <Type> ^ Id ';'

        Id s 74


State 52
        Prior States: 21

        <Import> ::= use Id _ ';'                                                       <Import> ::= use Id ^ ';'

        ';' s 75


State 53
        Prior States: 23, 53, 88, 343

        <Pointers> ::= '*' _ <Pointers>                                                 <Pointers> ::= '*' ^ <Pointers>
        <Pointers> ::= _ '*' <Pointers>                                                 <Pointers> ::= ^ '*' <Pointers>
        <Pointers> ::= _                                                                <Pointers> ::= ^

        '*' s 53
        <Pointers> g 76
        ')' r 90
        ',' r 90
        Id r 90
        operator r 90


State 54
        Prior States: 23

        <Type> ::= <Base> <Pointers> _                                                  <Type> ::= <Base> <Pointers> ^

        ')' r 77
        ',' r 77
        Id r 77
        operator r 77


State 55
        Prior States: 24

        <Func ID> ::= <CallCV> <Type> _ Id                                              <Func ID> ::= <CallCV> <Type> ^ Id

        Id s 77


State 56
        Prior States: 25

        <Decls> ::= <Decl> <Decls> _                                                    <Decls> ::= <Decl> <Decls> ^

        (EOF) r 10
        '@' r 10
        bool r 10
        byte r 10
        cdecl r 10
        const r 10
        entry r 10
        enum r 10
        extern r 10
        fastcall r 10
        int r 10
        namespace r 10
        override r 10
        private r 10
        sbyte r 10
        static r 10
        stdcall r 10
        string r 10
        struct r 10
        typedef r 10
        uint r 10
        use r 10
        void r 10


State 57
        Prior States: 29

        <Func Proto> ::= <Func ID> '(' _ <Types> ')' ';'                                <Func Proto> ::= <Func ID> '(' ^ <Types> ')' ';'
        <Func Proto> ::= <Func ID> '(' _ <Params> ')' ';'                               <Func Proto> ::= <Func ID> '(' ^ <Params> ')' ';'
        <Func Proto> ::= <Func ID> '(' _ ')' ';'                                        <Func Proto> ::= <Func ID> '(' ^ ')' ';'
        <Func Decl> ::= <Func ID> '(' _ <Params> ')' <Block>                            <Func Decl> ::= <Func ID> '(' ^ <Params> ')' <Block>
        <Func Decl> ::= <Func ID> '(' _ ')' <Block>                                     <Func Decl> ::= <Func ID> '(' ^ ')' <Block>
        <Params> ::= _ <Param> ',' <Params>                                             <Params> ::= ^ <Param> ',' <Params>
        <Params> ::= _ <Param>                                                          <Params> ::= ^ <Param>
        <Param> ::= _ const <Type> Id                                                   <Param> ::= ^ const <Type> Id
        <Param> ::= _ <Type> Id                                                         <Param> ::= ^ <Type> Id
        <Types> ::= _ <Type> ',' <Types>                                                <Types> ::= ^ <Type> ',' <Types>
        <Types> ::= _ <Type>                                                            <Types> ::= ^ <Type>
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string

        ')' s 78
        '@' s 1
        bool s 2
        byte s 3
        const s 79
        enum s 47
        int s 10
        sbyte s 14
        string s 17
        struct s 48
        uint s 20
        void s 22
        <Base> g 23
        <Param> g 80
        <Params> g 81
        <Scalar> g 38
        <Type> g 82
        <Types> g 83


State 58
        Prior States: 31

        <GLOBALS> ::= <GLOBAL> <GLOBALS> _                                              <GLOBALS> ::= <GLOBAL> <GLOBALS> ^

        (EOF) r 4


State 59
        Prior States: 33

        <Imports> ::= <Import> <Imports> _                                              <Imports> ::= <Import> <Imports> ^

        '@' r 2
        bool r 2
        byte r 2
        cdecl r 2
        const r 2
        entry r 2
        enum r 2
        extern r 2
        fastcall r 2
        int r 2
        override r 2
        private r 2
        sbyte r 2
        static r 2
        stdcall r 2
        string r 2
        struct r 2
        typedef r 2
        uint r 2
        void r 2


State 60
        Prior States: 34

        <GLOBAL> ::= <Imports> <Decls> _                                                <GLOBAL> ::= <Imports> <Decls> ^

        (EOF) r 8
        '@' r 8
        bool r 8
        byte r 8
        cdecl r 8
        const r 8
        entry r 8
        enum r 8
        extern r 8
        fastcall r 8
        int r 8
        namespace r 8
        override r 8
        private r 8
        sbyte r 8
        static r 8
        stdcall r 8
        string r 8
        struct r 8
        typedef r 8
        uint r 8
        use r 8
        void r 8


State 61
        Prior States: 35, 40, 62, 188

        <Var> ::= Id _ <Array>                                                          <Var> ::= Id ^ <Array>
        <Var> ::= Id _                                                                  <Var> ::= Id ^
        <Var> ::= Id _ <Array> '=' <Op If>                                              <Var> ::= Id ^ <Array> '=' <Op If>
        <Var> ::= Id _ '=' <Op If>                                                      <Var> ::= Id ^ '=' <Op If>
        <Array> ::= _ '[' <Expression> ']'                                              <Array> ::= ^ '[' <Expression> ']'
        <Array> ::= _ '[' ']'                                                           <Array> ::= ^ '[' ']'

        '[' s 84
        '=' s 85
        <Array> g 86
        ',' r 58
        ';' r 58


State 62
        Prior States: 35

        <Var Decl> ::= <Mod> <Type> _ <Var> <Var List> ';'                              <Var Decl> ::= <Mod> <Type> ^ <Var> <Var List> ';'
        <Var> ::= _ Id <Array>                                                          <Var> ::= ^ Id <Array>
        <Var> ::= _ Id                                                                  <Var> ::= ^ Id
        <Var> ::= _ Id <Array> '=' <Op If>                                              <Var> ::= ^ Id <Array> '=' <Op If>
        <Var> ::= _ Id '=' <Op If>                                                      <Var> ::= ^ Id '=' <Op If>

        Id s 61
        <Var> g 87


State 63
        Prior States: 35

        <Var Decl> ::= <Mod> <Var> _ <Var List> ';'                                     <Var Decl> ::= <Mod> <Var> ^ <Var List> ';'
        <Var List> ::= _ ',' <Var Item> <Var List>                                      <Var List> ::= ^ ',' <Var Item> <Var List>
        <Var List> ::= _                                                                <Var List> ::= ^

        ',' s 88
        <Var List> g 89
        ';' r 64


State 64
        Prior States: 36

        <GLOBAL> ::= <Namespace> <Decls> _                                              <GLOBAL> ::= <Namespace> <Decls> ^

        (EOF) r 9
        '@' r 9
        bool r 9
        byte r 9
        cdecl r 9
        const r 9
        entry r 9
        enum r 9
        extern r 9
        fastcall r 9
        int r 9
        namespace r 9
        override r 9
        private r 9
        sbyte r 9
        static r 9
        stdcall r 9
        string r 9
        struct r 9
        typedef r 9
        uint r 9
        use r 9
        void r 9


State 65
        Prior States: 36

        <GLOBAL> ::= <Namespace> <Imports> _ <Decls>                                    <GLOBAL> ::= <Namespace> <Imports> ^ <Decls>
        <Decls> ::= _ <Decl> <Decls>                                                    <Decls> ::= ^ <Decl> <Decls>
        <Decls> ::= _ <Decl>                                                            <Decls> ::= ^ <Decl>
        <Decl> ::= _ <Func Decl>                                                        <Decl> ::= ^ <Func Decl>
        <Decl> ::= _ <Oper Decl>                                                        <Decl> ::= ^ <Oper Decl>
        <Decl> ::= _ <Func Proto>                                                       <Decl> ::= ^ <Func Proto>
        <Decl> ::= _ <Struct Decl>                                                      <Decl> ::= ^ <Struct Decl>
        <Decl> ::= _ <Enum Decl>                                                        <Decl> ::= ^ <Enum Decl>
        <Decl> ::= _ <Var Decl>                                                         <Decl> ::= ^ <Var Decl>
        <Decl> ::= _ <Typedef Decl>                                                     <Decl> ::= ^ <Typedef Decl>
        <Func Proto> ::= _ <Func ID> '(' <Types> ')' ';'                                <Func Proto> ::= ^ <Func ID> '(' <Types> ')' ';'
        <Func Proto> ::= _ <Func ID> '(' <Params> ')' ';'                               <Func Proto> ::= ^ <Func ID> '(' <Params> ')' ';'
        <Func Proto> ::= _ <Func ID> '(' ')' ';'                                        <Func Proto> ::= ^ <Func ID> '(' ')' ';'
        <Func Decl> ::= _ <Func ID> '(' <Params> ')' <Block>                            <Func Decl> ::= ^ <Func ID> '(' <Params> ')' <Block>
        <Func Decl> ::= _ <Func ID> '(' ')' <Block>                                     <Func Decl> ::= ^ <Func ID> '(' ')' <Block>
        <Func Decl> ::= _ entry <Func ID> '(' <Params> ')' <Block>                      <Func Decl> ::= ^ entry <Func ID> '(' <Params> ')' <Block>
        <Func Decl> ::= _ entry <Func ID> '(' ')' <Block>                               <Func Decl> ::= ^ entry <Func ID> '(' ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '==' '(' <Params> ')' <Block>        <Oper Decl> ::= ^ override <Type> operator '==' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '!=' '(' <Params> ')' <Block>        <Oper Decl> ::= ^ override <Type> operator '!=' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '<=' '(' <Params> ')' <Block>        <Oper Decl> ::= ^ override <Type> operator '<=' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '>=' '(' <Params> ')' <Block>        <Oper Decl> ::= ^ override <Type> operator '>=' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '>' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '>' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '<' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '<' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '+' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '+' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '-' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '-' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '*' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '*' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '/' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '/' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '%' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '%' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '^' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '^' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '&' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '&' '(' <Params> ')' <Block>
        <Oper Decl> ::= _ override <Type> operator '|' '(' <Params> ')' <Block>         <Oper Decl> ::= ^ override <Type> operator '|' '(' <Params> ')' <Block>
        <Func ID> ::= _ <CallCV> <Type> Id                                              <Func ID> ::= ^ <CallCV> <Type> Id
        <CallCV> ::= _ stdcall                                                          <CallCV> ::= ^ stdcall
        <CallCV> ::= _ fastcall                                                         <CallCV> ::= ^ fastcall
        <CallCV> ::= _ cdecl                                                            <CallCV> ::= ^ cdecl
        <Typedef Decl> ::= _ typedef <Type> Id ';'                                      <Typedef Decl> ::= ^ typedef <Type> Id ';'
        <Struct Decl> ::= _ struct Id '{' <Struct Def> '}' ';'                          <Struct Decl> ::= ^ struct Id '{' <Struct Def> '}' ';'
        <Var Decl> ::= _ <Mod> <Type> <Var> <Var List> ';'                              <Var Decl> ::= ^ <Mod> <Type> <Var> <Var List> ';'
        <Var Decl> ::= _ <Type> <Var> <Var List> ';'                                    <Var Decl> ::= ^ <Type> <Var> <Var List> ';'
        <Var Decl> ::= _ <Mod> <Var> <Var List> ';'                                     <Var Decl> ::= ^ <Mod> <Var> <Var List> ';'
        <Mod> ::= _ extern                                                              <Mod> ::= ^ extern
        <Mod> ::= _ static                                                              <Mod> ::= ^ static
        <Mod> ::= _ const                                                               <Mod> ::= ^ const
        <Mod> ::= _ private                                                             <Mod> ::= ^ private
        <Enum Decl> ::= _ enum Id '{' <Enum Def> '}' ';'                                <Enum Decl> ::= ^ enum Id '{' <Enum Def> '}' ';'
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string

        '@' s 1
        bool s 2
        byte s 3
        cdecl s 4
        const s 5
        entry s 6
        enum s 7
        extern s 8
        fastcall s 9
        int s 10
        override s 12
        private s 13
        sbyte s 14
        static s 15
        stdcall s 16
        string s 17
        struct s 18
        typedef s 19
        uint s 20
        void s 22
        <Base> g 23
        <CallCV> g 24
        <Decl> g 25
        <Decls> g 90
        <Enum Decl> g 27
        <Func Decl> g 28
        <Func ID> g 29
        <Func Proto> g 30
        <Mod> g 35
        <Oper Decl> g 37
        <Scalar> g 38
        <Struct Decl> g 39
        <Type> g 40
        <Typedef Decl> g 41
        <Var Decl> g 42


State 66
        Prior States: 40

        <Var Decl> ::= <Type> <Var> _ <Var List> ';'                                    <Var Decl> ::= <Type> <Var> ^ <Var List> ';'
        <Var List> ::= _ ',' <Var Item> <Var List>                                      <Var List> ::= ^ ',' <Var Item> <Var List>
        <Var List> ::= _                                                                <Var List> ::= ^

        ',' s 88
        <Var List> g 91
        ';' r 64


State 67
        Prior States: 44

        <Func Decl> ::= entry <Func ID> '(' _ <Params> ')' <Block>                      <Func Decl> ::= entry <Func ID> '(' ^ <Params> ')' <Block>
        <Func Decl> ::= entry <Func ID> '(' _ ')' <Block>                               <Func Decl> ::= entry <Func ID> '(' ^ ')' <Block>
        <Params> ::= _ <Param> ',' <Params>                                             <Params> ::= ^ <Param> ',' <Params>
        <Params> ::= _ <Param>                                                          <Params> ::= ^ <Param>
        <Param> ::= _ const <Type> Id                                                   <Param> ::= ^ const <Type> Id
        <Param> ::= _ <Type> Id                                                         <Param> ::= ^ <Type> Id
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string

        ')' s 92
        '@' s 1
        bool s 2
        byte s 3
        const s 79
        enum s 47
        int s 10
        sbyte s 14
        string s 17
        struct s 48
        uint s 20
        void s 22
        <Base> g 23
        <Param> g 80
        <Params> g 93
        <Scalar> g 38
        <Type> g 94


State 68
        Prior States: 45

        <Enum Decl> ::= enum Id '{' _ <Enum Def> '}' ';'                                <Enum Decl> ::= enum Id '{' ^ <Enum Def> '}' ';'
        <Enum Def> ::= _ <Enum Val> ',' <Enum Def>                                      <Enum Def> ::= ^ <Enum Val> ',' <Enum Def>
        <Enum Def> ::= _ <Enum Val>                                                     <Enum Def> ::= ^ <Enum Val>
        <Enum Val> ::= _ Id                                                             <Enum Val> ::= ^ Id
        <Enum Val> ::= _ Id '=' OctLiteral                                              <Enum Val> ::= ^ Id '=' OctLiteral
        <Enum Val> ::= _ Id '=' HexLiteral                                              <Enum Val> ::= ^ Id '=' HexLiteral
        <Enum Val> ::= _ Id '=' DecLiteral                                              <Enum Val> ::= ^ Id '=' DecLiteral

        Id s 95
        <Enum Def> g 96
        <Enum Val> g 97


State 69
        Prior States: 46

        <Namespace> ::= namespace Id ';' _                                              <Namespace> ::= namespace Id ';' ^

        '@' r 3
        bool r 3
        byte r 3
        cdecl r 3
        const r 3
        entry r 3
        enum r 3
        extern r 3
        fastcall r 3
        int r 3
        override r 3
        private r 3
        sbyte r 3
        static r 3
        stdcall r 3
        string r 3
        struct r 3
        typedef r 3
        uint r 3
        use r 3
        void r 3


State 70
        Prior States: 47

        <Base> ::= enum Id _                                                            <Base> ::= enum Id ^

        ')' r 80
        '*' r 80
        ',' r 80
        Id r 80
        operator r 80


State 71
        Prior States: 48

        <Base> ::= struct Id _                                                          <Base> ::= struct Id ^

        ')' r 79
        '*' r 79
        ',' r 79
        Id r 79
        operator r 79


State 72
        Prior States: 49

        <Oper Decl> ::= override <Type> operator _ '==' '(' <Params> ')' <Block>        <Oper Decl> ::= override <Type> operator ^ '==' '(' <Params> ')' <Block>
        <Oper Decl> ::= override <Type> operator _ '!=' '(' <Params> ')' <Block>        <Oper Decl> ::= override <Type> operator ^ '!=' '(' <Params> ')' <Block>
        <Oper Decl> ::= override <Type> operator _ '<=' '(' <Params> ')' <Block>        <Oper Decl> ::= override <Type> operator ^ '<=' '(' <Params> ')' <Block>
        <Oper Decl> ::= override <Type> operator _ '>=' '(' <Params> ')' <Block>        <Oper Decl> ::= override <Type> operator ^ '>=' '(' <Params> ')' <Block>
        <Oper Decl> ::= override <Type> operator _ '>' '(' <Params> ')' <Block>         <Oper Decl> ::= override <Type> operator ^ '>' '(' <Params> ')' <Block>
        <Oper Decl> ::= override <Type> operator _ '<' '(' <Params> ')' <Block>         <Oper Decl> ::= override <Type> operator ^ '<' '(' <Params> ')' <Block>
        <Oper Decl> ::= override <Type> operator _ '+' '(' <Params> ')' <Block>         <Oper Decl> ::= override <Type> operator ^ '+' '(' <Params> ')' <Block>
        <Oper Decl> ::= override <Type> operator _ '-' '(' <Params> ')' <Block>         <Oper Decl> ::= override <Type> operator ^ '-' '(' <Params> ')' <Block>
        <Oper Decl> ::= override <Type> operator _ '*' '(' <Params> ')' <Block>         <Oper Decl> ::= override <Type> operator ^ '*' '(' <Params> ')' <Block>
        <Oper Decl> ::= override <Type> operator _ '/' '(' <Params> ')' <Block>         <Oper Decl> ::= override <Type> operator ^ '/' '(' <Params> ')' <Block>
        <Oper Decl> ::= override <Type> operator _ '%' '(' <Params> ')' <Block>         <Oper Decl> ::= override <Type> operator ^ '%' '(' <Params> ')' <Block>
        <Oper Decl> ::= override <Type> operator _ '^' '(' <Params> ')' <Block>         <Oper Decl> ::= override <Type> operator ^ '^' '(' <Params> ')' <Block>
        <Oper Decl> ::= override <Type> operator _ '&' '(' <Params> ')' <Block>         <Oper Decl> ::= override <Type> operator ^ '&' '(' <Params> ')' <Block>
        <Oper Decl> ::= override <Type> operator _ '|' '(' <Params> ')' <Block>         <Oper Decl> ::= override <Type> operator ^ '|' '(' <Params> ')' <Block>

        '-' s 98
        '!=' s 99
        '%' s 100
        '&' s 101
        '*' s 102
        '/' s 103
        '^' s 104
        '|' s 105
        '+' s 106
        '<' s 107
        '<=' s 108
        '==' s 109
        '>' s 110
        '>=' s 111


State 73
        Prior States: 50

        <Struct Decl> ::= struct Id '{' _ <Struct Def> '}' ';'                          <Struct Decl> ::= struct Id '{' ^ <Struct Def> '}' ';'
        <Struct Def> ::= _ <Var Decl> <Struct Def>                                      <Struct Def> ::= ^ <Var Decl> <Struct Def>
        <Struct Def> ::= _ <Var Decl>                                                   <Struct Def> ::= ^ <Var Decl>
        <Var Decl> ::= _ <Mod> <Type> <Var> <Var List> ';'                              <Var Decl> ::= ^ <Mod> <Type> <Var> <Var List> ';'
        <Var Decl> ::= _ <Type> <Var> <Var List> ';'                                    <Var Decl> ::= ^ <Type> <Var> <Var List> ';'
        <Var Decl> ::= _ <Mod> <Var> <Var List> ';'                                     <Var Decl> ::= ^ <Mod> <Var> <Var List> ';'
        <Mod> ::= _ extern                                                              <Mod> ::= ^ extern
        <Mod> ::= _ static                                                              <Mod> ::= ^ static
        <Mod> ::= _ const                                                               <Mod> ::= ^ const
        <Mod> ::= _ private                                                             <Mod> ::= ^ private
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string

        '@' s 1
        bool s 2
        byte s 3
        const s 5
        enum s 47
        extern s 8
        int s 10
        private s 13
        sbyte s 14
        static s 15
        string s 17
        struct s 48
        uint s 20
        void s 22
        <Base> g 23
        <Mod> g 35
        <Scalar> g 38
        <Struct Def> g 112
        <Type> g 40
        <Var Decl> g 113


State 74
        Prior States: 51

        <Typedef Decl> ::= typedef <Type> Id _ ';'                                      <Typedef Decl> ::= typedef <Type> Id ^ ';'

        ';' s 114


State 75
        Prior States: 52

        <Import> ::= use Id ';' _                                                       <Import> ::= use Id ';' ^

        '@' r 0
        bool r 0
        byte r 0
        cdecl r 0
        const r 0
        entry r 0
        enum r 0
        extern r 0
        fastcall r 0
        int r 0
        override r 0
        private r 0
        sbyte r 0
        static r 0
        stdcall r 0
        string r 0
        struct r 0
        typedef r 0
        uint r 0
        use r 0
        void r 0


State 76
        Prior States: 53

        <Pointers> ::= '*' <Pointers> _                                                 <Pointers> ::= '*' <Pointers> ^

        ')' r 89
        ',' r 89
        Id r 89
        operator r 89


State 77
        Prior States: 55

        <Func ID> ::= <CallCV> <Type> Id _                                              <Func ID> ::= <CallCV> <Type> Id ^

        '(' r 46


State 78
        Prior States: 57

        <Func Proto> ::= <Func ID> '(' ')' _ ';'                                        <Func Proto> ::= <Func ID> '(' ')' ^ ';'
        <Func Decl> ::= <Func ID> '(' ')' _ <Block>                                     <Func Decl> ::= <Func ID> '(' ')' ^ <Block>
        <Block> ::= _ '{' <Stm List> '}'                                                <Block> ::= ^ '{' <Stm List> '}'

        ';' s 115
        '{' s 116
        <Block> g 117


State 79
        Prior States: 57, 67, 119, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210

        <Param> ::= const _ <Type> Id                                                   <Param> ::= const ^ <Type> Id
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string

        '@' s 1
        bool s 2
        byte s 3
        enum s 47
        int s 10
        sbyte s 14
        string s 17
        struct s 48
        uint s 20
        void s 22
        <Base> g 23
        <Scalar> g 38
        <Type> g 118


State 80
        Prior States: 57, 67, 119, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210

        <Params> ::= <Param> _ ',' <Params>                                             <Params> ::= <Param> ^ ',' <Params>
        <Params> ::= <Param> _                                                          <Params> ::= <Param> ^

        ',' s 119
        ')' r 41


State 81
        Prior States: 57

        <Func Proto> ::= <Func ID> '(' <Params> _ ')' ';'                               <Func Proto> ::= <Func ID> '(' <Params> ^ ')' ';'
        <Func Decl> ::= <Func ID> '(' <Params> _ ')' <Block>                            <Func Decl> ::= <Func ID> '(' <Params> ^ ')' <Block>

        ')' s 120


State 82
        Prior States: 57

        <Param> ::= <Type> _ Id                                                         <Param> ::= <Type> ^ Id
        <Types> ::= <Type> _ ',' <Types>                                                <Types> ::= <Type> ^ ',' <Types>
        <Types> ::= <Type> _                                                            <Types> ::= <Type> ^

        ',' s 121
        Id s 122
        ')' r 45


State 83
        Prior States: 57

        <Func Proto> ::= <Func ID> '(' <Types> _ ')' ';'                                <Func Proto> ::= <Func ID> '(' <Types> ^ ')' ';'

        ')' s 123


State 84
        Prior States: 61

        <Array> ::= '[' _ <Expression> ']'                                              <Array> ::= '[' ^ <Expression> ']'
        <Array> ::= '[' _ ']'                                                           <Array> ::= '[' ^ ']'
        <Expression> ::= _ <Op Assign>                                                  <Expression> ::= ^ <Op Assign>
        <Op Assign> ::= _ <Op If> '=' <Op Assign>                                       <Op Assign> ::= ^ <Op If> '=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<>' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '<>' <Op Assign>
        <Op Assign> ::= _ <Op If> '+=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '+=' <Op Assign>
        <Op Assign> ::= _ <Op If> '-=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '-=' <Op Assign>
        <Op Assign> ::= _ <Op If> '*=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '*=' <Op Assign>
        <Op Assign> ::= _ <Op If> '/=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '/=' <Op Assign>
        <Op Assign> ::= _ <Op If> '^=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '^=' <Op Assign>
        <Op Assign> ::= _ <Op If> '&=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '&=' <Op Assign>
        <Op Assign> ::= _ <Op If> '|=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '|=' <Op Assign>
        <Op Assign> ::= _ <Op If> '>>=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '>>=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<<=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '<<=' <Op Assign>
        <Op Assign> ::= _ <Op If>                                                       <Op Assign> ::= ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        ']' s 131
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Expression> g 167
        <Op Add> g 168
        <Op And> g 169
        <Op Assign> g 170
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 176
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184


State 85
        Prior States: 61

        <Var> ::= Id '=' _ <Op If>                                                      <Var> ::= Id '=' ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Add> g 168
        <Op And> g 169
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 185
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184


State 86
        Prior States: 61

        <Var> ::= Id <Array> _                                                          <Var> ::= Id <Array> ^
        <Var> ::= Id <Array> _ '=' <Op If>                                              <Var> ::= Id <Array> ^ '=' <Op If>

        '=' s 186
        ',' r 57
        ';' r 57


State 87
        Prior States: 62

        <Var Decl> ::= <Mod> <Type> <Var> _ <Var List> ';'                              <Var Decl> ::= <Mod> <Type> <Var> ^ <Var List> ';'
        <Var List> ::= _ ',' <Var Item> <Var List>                                      <Var List> ::= ^ ',' <Var Item> <Var List>
        <Var List> ::= _                                                                <Var List> ::= ^

        ',' s 88
        <Var List> g 187
        ';' r 64


State 88
        Prior States: 63, 66, 87, 189

        <Var List> ::= ',' _ <Var Item> <Var List>                                      <Var List> ::= ',' ^ <Var Item> <Var List>
        <Var Item> ::= _ <Pointers> <Var>                                               <Var Item> ::= ^ <Pointers> <Var>
        <Pointers> ::= _ '*' <Pointers>                                                 <Pointers> ::= ^ '*' <Pointers>
        <Pointers> ::= _                                                                <Pointers> ::= ^

        '*' s 53
        <Pointers> g 188
        <Var Item> g 189
        Id r 90


State 89
        Prior States: 63

        <Var Decl> ::= <Mod> <Var> <Var List> _ ';'                                     <Var Decl> ::= <Mod> <Var> <Var List> ^ ';'

        ';' s 190


State 90
        Prior States: 65

        <GLOBAL> ::= <Namespace> <Imports> <Decls> _                                    <GLOBAL> ::= <Namespace> <Imports> <Decls> ^

        (EOF) r 7
        '@' r 7
        bool r 7
        byte r 7
        cdecl r 7
        const r 7
        entry r 7
        enum r 7
        extern r 7
        fastcall r 7
        int r 7
        namespace r 7
        override r 7
        private r 7
        sbyte r 7
        static r 7
        stdcall r 7
        string r 7
        struct r 7
        typedef r 7
        uint r 7
        use r 7
        void r 7


State 91
        Prior States: 66

        <Var Decl> ::= <Type> <Var> <Var List> _ ';'                                    <Var Decl> ::= <Type> <Var> <Var List> ^ ';'

        ';' s 191


State 92
        Prior States: 67

        <Func Decl> ::= entry <Func ID> '(' ')' _ <Block>                               <Func Decl> ::= entry <Func ID> '(' ')' ^ <Block>
        <Block> ::= _ '{' <Stm List> '}'                                                <Block> ::= ^ '{' <Stm List> '}'

        '{' s 116
        <Block> g 192


State 93
        Prior States: 67

        <Func Decl> ::= entry <Func ID> '(' <Params> _ ')' <Block>                      <Func Decl> ::= entry <Func ID> '(' <Params> ^ ')' <Block>

        ')' s 193


State 94
        Prior States: 67, 119, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210

        <Param> ::= <Type> _ Id                                                         <Param> ::= <Type> ^ Id

        Id s 122


State 95
        Prior States: 68, 196

        <Enum Val> ::= Id _                                                             <Enum Val> ::= Id ^
        <Enum Val> ::= Id _ '=' OctLiteral                                              <Enum Val> ::= Id ^ '=' OctLiteral
        <Enum Val> ::= Id _ '=' HexLiteral                                              <Enum Val> ::= Id ^ '=' HexLiteral
        <Enum Val> ::= Id _ '=' DecLiteral                                              <Enum Val> ::= Id ^ '=' DecLiteral

        '=' s 194
        ',' r 73
        '}' r 73


State 96
        Prior States: 68

        <Enum Decl> ::= enum Id '{' <Enum Def> _ '}' ';'                                <Enum Decl> ::= enum Id '{' <Enum Def> ^ '}' ';'

        '}' s 195


State 97
        Prior States: 68, 196

        <Enum Def> ::= <Enum Val> _ ',' <Enum Def>                                      <Enum Def> ::= <Enum Val> ^ ',' <Enum Def>
        <Enum Def> ::= <Enum Val> _                                                     <Enum Def> ::= <Enum Val> ^

        ',' s 196
        '}' r 72


State 98
        Prior States: 72

        <Oper Decl> ::= override <Type> operator '-' _ '(' <Params> ')' <Block>         <Oper Decl> ::= override <Type> operator '-' ^ '(' <Params> ')' <Block>

        '(' s 197


State 99
        Prior States: 72

        <Oper Decl> ::= override <Type> operator '!=' _ '(' <Params> ')' <Block>        <Oper Decl> ::= override <Type> operator '!=' ^ '(' <Params> ')' <Block>

        '(' s 198


State 100
        Prior States: 72

        <Oper Decl> ::= override <Type> operator '%' _ '(' <Params> ')' <Block>         <Oper Decl> ::= override <Type> operator '%' ^ '(' <Params> ')' <Block>

        '(' s 199


State 101
        Prior States: 72

        <Oper Decl> ::= override <Type> operator '&' _ '(' <Params> ')' <Block>         <Oper Decl> ::= override <Type> operator '&' ^ '(' <Params> ')' <Block>

        '(' s 200


State 102
        Prior States: 72

        <Oper Decl> ::= override <Type> operator '*' _ '(' <Params> ')' <Block>         <Oper Decl> ::= override <Type> operator '*' ^ '(' <Params> ')' <Block>

        '(' s 201


State 103
        Prior States: 72

        <Oper Decl> ::= override <Type> operator '/' _ '(' <Params> ')' <Block>         <Oper Decl> ::= override <Type> operator '/' ^ '(' <Params> ')' <Block>

        '(' s 202


State 104
        Prior States: 72

        <Oper Decl> ::= override <Type> operator '^' _ '(' <Params> ')' <Block>         <Oper Decl> ::= override <Type> operator '^' ^ '(' <Params> ')' <Block>

        '(' s 203


State 105
        Prior States: 72

        <Oper Decl> ::= override <Type> operator '|' _ '(' <Params> ')' <Block>         <Oper Decl> ::= override <Type> operator '|' ^ '(' <Params> ')' <Block>

        '(' s 204


State 106
        Prior States: 72

        <Oper Decl> ::= override <Type> operator '+' _ '(' <Params> ')' <Block>         <Oper Decl> ::= override <Type> operator '+' ^ '(' <Params> ')' <Block>

        '(' s 205


State 107
        Prior States: 72

        <Oper Decl> ::= override <Type> operator '<' _ '(' <Params> ')' <Block>         <Oper Decl> ::= override <Type> operator '<' ^ '(' <Params> ')' <Block>

        '(' s 206


State 108
        Prior States: 72

        <Oper Decl> ::= override <Type> operator '<=' _ '(' <Params> ')' <Block>        <Oper Decl> ::= override <Type> operator '<=' ^ '(' <Params> ')' <Block>

        '(' s 207


State 109
        Prior States: 72

        <Oper Decl> ::= override <Type> operator '==' _ '(' <Params> ')' <Block>        <Oper Decl> ::= override <Type> operator '==' ^ '(' <Params> ')' <Block>

        '(' s 208


State 110
        Prior States: 72

        <Oper Decl> ::= override <Type> operator '>' _ '(' <Params> ')' <Block>         <Oper Decl> ::= override <Type> operator '>' ^ '(' <Params> ')' <Block>

        '(' s 209


State 111
        Prior States: 72

        <Oper Decl> ::= override <Type> operator '>=' _ '(' <Params> ')' <Block>        <Oper Decl> ::= override <Type> operator '>=' ^ '(' <Params> ')' <Block>

        '(' s 210


State 112
        Prior States: 73

        <Struct Decl> ::= struct Id '{' <Struct Def> _ '}' ';'                          <Struct Decl> ::= struct Id '{' <Struct Def> ^ '}' ';'

        '}' s 211


State 113
        Prior States: 73, 113

        <Struct Def> ::= <Var Decl> _ <Struct Def>                                      <Struct Def> ::= <Var Decl> ^ <Struct Def>
        <Struct Def> ::= <Var Decl> _                                                   <Struct Def> ::= <Var Decl> ^
        <Struct Def> ::= _ <Var Decl> <Struct Def>                                      <Struct Def> ::= ^ <Var Decl> <Struct Def>
        <Struct Def> ::= _ <Var Decl>                                                   <Struct Def> ::= ^ <Var Decl>
        <Var Decl> ::= _ <Mod> <Type> <Var> <Var List> ';'                              <Var Decl> ::= ^ <Mod> <Type> <Var> <Var List> ';'
        <Var Decl> ::= _ <Type> <Var> <Var List> ';'                                    <Var Decl> ::= ^ <Type> <Var> <Var List> ';'
        <Var Decl> ::= _ <Mod> <Var> <Var List> ';'                                     <Var Decl> ::= ^ <Mod> <Var> <Var List> ';'
        <Mod> ::= _ extern                                                              <Mod> ::= ^ extern
        <Mod> ::= _ static                                                              <Mod> ::= ^ static
        <Mod> ::= _ const                                                               <Mod> ::= ^ const
        <Mod> ::= _ private                                                             <Mod> ::= ^ private
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string

        '@' s 1
        bool s 2
        byte s 3
        const s 5
        enum s 47
        extern s 8
        int s 10
        private s 13
        sbyte s 14
        static s 15
        string s 17
        struct s 48
        uint s 20
        void s 22
        <Base> g 23
        <Mod> g 35
        <Scalar> g 38
        <Struct Def> g 212
        <Type> g 40
        <Var Decl> g 113
        '}' r 53


State 114
        Prior States: 74

        <Typedef Decl> ::= typedef <Type> Id ';' _                                      <Typedef Decl> ::= typedef <Type> Id ';' ^

        (EOF) r 50
        '@' r 50
        bool r 50
        byte r 50
        cdecl r 50
        const r 50
        entry r 50
        enum r 50
        extern r 50
        fastcall r 50
        int r 50
        namespace r 50
        override r 50
        private r 50
        sbyte r 50
        static r 50
        stdcall r 50
        string r 50
        struct r 50
        typedef r 50
        uint r 50
        use r 50
        void r 50


State 115
        Prior States: 78

        <Func Proto> ::= <Func ID> '(' ')' ';' _                                        <Func Proto> ::= <Func ID> '(' ')' ';' ^

        (EOF) r 21
        '@' r 21
        bool r 21
        byte r 21
        cdecl r 21
        const r 21
        entry r 21
        enum r 21
        extern r 21
        fastcall r 21
        int r 21
        namespace r 21
        override r 21
        private r 21
        sbyte r 21
        static r 21
        stdcall r 21
        string r 21
        struct r 21
        typedef r 21
        uint r 21
        use r 21
        void r 21


State 116
        Prior States: 78, 92, 116, 120, 193, 217, 222, 230, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 434, 436, 455, 465, 467, 469, 470, 471, 479, 483

        <Block> ::= '{' _ <Stm List> '}'                                                <Block> ::= '{' ^ <Stm List> '}'
        <Var Decl> ::= _ <Mod> <Type> <Var> <Var List> ';'                              <Var Decl> ::= ^ <Mod> <Type> <Var> <Var List> ';'
        <Var Decl> ::= _ <Type> <Var> <Var List> ';'                                    <Var Decl> ::= ^ <Type> <Var> <Var List> ';'
        <Var Decl> ::= _ <Mod> <Var> <Var List> ';'                                     <Var Decl> ::= ^ <Mod> <Var> <Var List> ';'
        <Mod> ::= _ extern                                                              <Mod> ::= ^ extern
        <Mod> ::= _ static                                                              <Mod> ::= ^ static
        <Mod> ::= _ const                                                               <Mod> ::= ^ const
        <Mod> ::= _ private                                                             <Mod> ::= ^ private
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string
        <Statement> ::= _ <Var Decl>                                                    <Statement> ::= ^ <Var Decl>
        <Statement> ::= _ Id ':'                                                        <Statement> ::= ^ Id ':'
        <Statement> ::= _ if '(' <Expression> ')' <Statement>                           <Statement> ::= ^ if '(' <Expression> ')' <Statement>
        <Statement> ::= _ if '(' <Expression> ')' <Then Stm> else <Statement>           <Statement> ::= ^ if '(' <Expression> ')' <Then Stm> else <Statement>
        <Statement> ::= _ while '(' <Expression> ')' <Statement>                        <Statement> ::= ^ while '(' <Expression> ')' <Statement>
        <Statement> ::= _ for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Statement>             <Statement> ::= ^ for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Statement>
        <Statement> ::= _ asm '{' <INSTRUCTIONS> '}'                                    <Statement> ::= ^ asm '{' <INSTRUCTIONS> '}'
        <Statement> ::= _ loop <Statement>                                              <Statement> ::= ^ loop <Statement>
        <Statement> ::= _ <Normal Stm>                                                  <Statement> ::= ^ <Normal Stm>
        <Normal Stm> ::= _ do <Statement> while '(' <Expression> ')'                    <Normal Stm> ::= ^ do <Statement> while '(' <Expression> ')'
        <Normal Stm> ::= _ switch '(' <Expression> ')' '{' <Case Stms> '}'              <Normal Stm> ::= ^ switch '(' <Expression> ')' '{' <Case Stms> '}'
        <Normal Stm> ::= _ <Block>                                                      <Normal Stm> ::= ^ <Block>
        <Normal Stm> ::= _ <Expression> ';'                                             <Normal Stm> ::= ^ <Expression> ';'
        <Normal Stm> ::= _ goto Id ';'                                                  <Normal Stm> ::= ^ goto Id ';'
        <Normal Stm> ::= _ break ';'                                                    <Normal Stm> ::= ^ break ';'
        <Normal Stm> ::= _ continue ';'                                                 <Normal Stm> ::= ^ continue ';'
        <Normal Stm> ::= _ goto case DecLiteral ';'                                     <Normal Stm> ::= ^ goto case DecLiteral ';'
        <Normal Stm> ::= _ goto default ';'                                             <Normal Stm> ::= ^ goto default ';'
        <Normal Stm> ::= _ next ';'                                                     <Normal Stm> ::= ^ next ';'
        <Normal Stm> ::= _ return <Expression> ';'                                      <Normal Stm> ::= ^ return <Expression> ';'
        <Normal Stm> ::= _ ';'                                                          <Normal Stm> ::= ^ ';'
        <Block> ::= _ '{' <Stm List> '}'                                                <Block> ::= ^ '{' <Stm List> '}'
        <Stm List> ::= _ <Statement> <Stm List>                                         <Stm List> ::= ^ <Statement> <Stm List>
        <Stm List> ::= _                                                                <Stm List> ::= ^
        <Expression> ::= _ <Op Assign>                                                  <Expression> ::= ^ <Op Assign>
        <Op Assign> ::= _ <Op If> '=' <Op Assign>                                       <Op Assign> ::= ^ <Op If> '=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<>' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '<>' <Op Assign>
        <Op Assign> ::= _ <Op If> '+=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '+=' <Op Assign>
        <Op Assign> ::= _ <Op If> '-=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '-=' <Op Assign>
        <Op Assign> ::= _ <Op If> '*=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '*=' <Op Assign>
        <Op Assign> ::= _ <Op If> '/=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '/=' <Op Assign>
        <Op Assign> ::= _ <Op If> '^=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '^=' <Op Assign>
        <Op Assign> ::= _ <Op If> '&=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '&=' <Op Assign>
        <Op Assign> ::= _ <Op If> '|=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '|=' <Op Assign>
        <Op Assign> ::= _ <Op If> '>>=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '>>=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<<=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '<<=' <Op Assign>
        <Op Assign> ::= _ <Op If>                                                       <Op Assign> ::= ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        ';' s 213
        '@' s 1
        '{' s 116
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        asm s 214
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        bool s 2
        BooleanLiteral s 141
        BP s 142
        break s 215
        BX s 143
        byte s 3
        CH s 144
        CharLiteral s 145
        CL s 146
        const s 5
        continue s 216
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        do s 217
        DS s 153
        DX s 154
        enum s 47
        ES s 155
        extern s 8
        for s 218
        FS s 156
        goto s 219
        GS s 157
        HexLiteral s 158
        Id s 220
        if s 221
        int s 10
        loop s 222
        next s 223
        NullLiteral s 160
        OctLiteral s 161
        private s 13
        return s 224
        sbyte s 14
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        static s 15
        string s 17
        StringLiteral s 166
        struct s 48
        switch s 225
        uint s 20
        void s 22
        while s 226
        <Base> g 23
        <Block> g 227
        <Expression> g 228
        <Mod> g 35
        <Normal Stm> g 229
        <Op Add> g 168
        <Op And> g 169
        <Op Assign> g 170
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 176
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Scalar> g 38
        <Statement> g 230
        <Stm List> g 231
        <Type> g 40
        <Value> g 184
        <Var Decl> g 232
        '}' r 123


State 117
        Prior States: 78

        <Func Decl> ::= <Func ID> '(' ')' <Block> _                                     <Func Decl> ::= <Func ID> '(' ')' <Block> ^

        (EOF) r 23
        '@' r 23
        bool r 23
        byte r 23
        cdecl r 23
        const r 23
        entry r 23
        enum r 23
        extern r 23
        fastcall r 23
        int r 23
        namespace r 23
        override r 23
        private r 23
        sbyte r 23
        static r 23
        stdcall r 23
        string r 23
        struct r 23
        typedef r 23
        uint r 23
        use r 23
        void r 23


State 118
        Prior States: 79

        <Param> ::= const <Type> _ Id                                                   <Param> ::= const <Type> ^ Id

        Id s 233


State 119
        Prior States: 80

        <Params> ::= <Param> ',' _ <Params>                                             <Params> ::= <Param> ',' ^ <Params>
        <Params> ::= _ <Param> ',' <Params>                                             <Params> ::= ^ <Param> ',' <Params>
        <Params> ::= _ <Param>                                                          <Params> ::= ^ <Param>
        <Param> ::= _ const <Type> Id                                                   <Param> ::= ^ const <Type> Id
        <Param> ::= _ <Type> Id                                                         <Param> ::= ^ <Type> Id
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string

        '@' s 1
        bool s 2
        byte s 3
        const s 79
        enum s 47
        int s 10
        sbyte s 14
        string s 17
        struct s 48
        uint s 20
        void s 22
        <Base> g 23
        <Param> g 80
        <Params> g 234
        <Scalar> g 38
        <Type> g 94


State 120
        Prior States: 81

        <Func Proto> ::= <Func ID> '(' <Params> ')' _ ';'                               <Func Proto> ::= <Func ID> '(' <Params> ')' ^ ';'
        <Func Decl> ::= <Func ID> '(' <Params> ')' _ <Block>                            <Func Decl> ::= <Func ID> '(' <Params> ')' ^ <Block>
        <Block> ::= _ '{' <Stm List> '}'                                                <Block> ::= ^ '{' <Stm List> '}'

        ';' s 235
        '{' s 116
        <Block> g 236


State 121
        Prior States: 82, 237

        <Types> ::= <Type> ',' _ <Types>                                                <Types> ::= <Type> ',' ^ <Types>
        <Types> ::= _ <Type> ',' <Types>                                                <Types> ::= ^ <Type> ',' <Types>
        <Types> ::= _ <Type>                                                            <Types> ::= ^ <Type>
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string

        '@' s 1
        bool s 2
        byte s 3
        enum s 47
        int s 10
        sbyte s 14
        string s 17
        struct s 48
        uint s 20
        void s 22
        <Base> g 23
        <Scalar> g 38
        <Type> g 237
        <Types> g 238


State 122
        Prior States: 82, 94

        <Param> ::= <Type> Id _                                                         <Param> ::= <Type> Id ^

        ')' r 43
        ',' r 43


State 123
        Prior States: 83

        <Func Proto> ::= <Func ID> '(' <Types> ')' _ ';'                                <Func Proto> ::= <Func ID> '(' <Types> ')' ^ ';'

        ';' s 239


State 124
        Prior States: 84, 85, 116, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 217, 222, 224, 230, 251, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 285, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <Op Unary> ::= '-' _ <Op Unary>                                                 <Op Unary> ::= '-' ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Pointer> g 180
        <Op Unary> g 240
        <REGISTER> g 183
        <Value> g 184


State 125
        Prior States: 84, 85, 116, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 217, 222, 224, 230, 251, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 285, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <Op Unary> ::= '--' _ <Op Unary>                                                <Op Unary> ::= '--' ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Pointer> g 180
        <Op Unary> g 241
        <REGISTER> g 183
        <Value> g 184


State 126
        Prior States: 84, 85, 116, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 217, 222, 224, 230, 251, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 285, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <Op Unary> ::= '!' _ <Op Unary>                                                 <Op Unary> ::= '!' ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Pointer> g 180
        <Op Unary> g 242
        <REGISTER> g 183
        <Value> g 184


State 127
        Prior States: 84, 85, 116, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 217, 222, 224, 230, 251, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 285, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <Op Unary> ::= '$' _ <Op Unary>                                                 <Op Unary> ::= '$' ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Pointer> g 180
        <Op Unary> g 243
        <REGISTER> g 183
        <Value> g 184


State 128
        Prior States: 84, 85, 116, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 217, 222, 224, 230, 251, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 285, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <Op Unary> ::= '&' _ <Op Unary>                                                 <Op Unary> ::= '&' ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Pointer> g 180
        <Op Unary> g 244
        <REGISTER> g 183
        <Value> g 184


State 129
        Prior States: 84, 85, 116, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 217, 222, 224, 230, 251, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 285, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <Op Unary> ::= '(' _ <Type> ')' <Op Unary>                                      <Op Unary> ::= '(' ^ <Type> ')' <Op Unary>
        <Value> ::= '(' _ <Expression> ')'                                              <Value> ::= '(' ^ <Expression> ')'
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string
        <Expression> ::= _ <Op Assign>                                                  <Expression> ::= ^ <Op Assign>
        <Op Assign> ::= _ <Op If> '=' <Op Assign>                                       <Op Assign> ::= ^ <Op If> '=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<>' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '<>' <Op Assign>
        <Op Assign> ::= _ <Op If> '+=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '+=' <Op Assign>
        <Op Assign> ::= _ <Op If> '-=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '-=' <Op Assign>
        <Op Assign> ::= _ <Op If> '*=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '*=' <Op Assign>
        <Op Assign> ::= _ <Op If> '/=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '/=' <Op Assign>
        <Op Assign> ::= _ <Op If> '^=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '^=' <Op Assign>
        <Op Assign> ::= _ <Op If> '&=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '&=' <Op Assign>
        <Op Assign> ::= _ <Op If> '|=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '|=' <Op Assign>
        <Op Assign> ::= _ <Op If> '>>=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '>>=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<<=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '<<=' <Op Assign>
        <Op Assign> ::= _ <Op If>                                                       <Op Assign> ::= ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '@' s 1
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        bool s 2
        BooleanLiteral s 141
        BP s 142
        BX s 143
        byte s 3
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        enum s 47
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        int s 10
        NullLiteral s 160
        OctLiteral s 161
        sbyte s 14
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        string s 17
        StringLiteral s 166
        struct s 48
        uint s 20
        void s 22
        <Base> g 23
        <Expression> g 245
        <Op Add> g 168
        <Op And> g 169
        <Op Assign> g 170
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 176
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Scalar> g 38
        <Type> g 246
        <Value> g 184


State 130
        Prior States: 84, 85, 116, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 217, 222, 224, 230, 251, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 285, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <Op Unary> ::= '*' _ <Op Unary>                                                 <Op Unary> ::= '*' ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Pointer> g 180
        <Op Unary> g 247
        <REGISTER> g 183
        <Value> g 184


State 131
        Prior States: 84

        <Array> ::= '[' ']' _                                                           <Array> ::= '[' ']' ^

        ',' r 62
        ';' r 62
        '=' r 62


State 132
        Prior States: 84, 85, 116, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 217, 222, 224, 230, 251, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 285, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <Op Unary> ::= '~' _ <Op Unary>                                                 <Op Unary> ::= '~' ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Pointer> g 180
        <Op Unary> g 248
        <REGISTER> g 183
        <Value> g 184


State 133
        Prior States: 84, 85, 116, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 217, 222, 224, 230, 251, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 285, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <Op Unary> ::= '++' _ <Op Unary>                                                <Op Unary> ::= '++' ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Pointer> g 180
        <Op Unary> g 249
        <REGISTER> g 183
        <Value> g 184


State 134
        Prior States: 84, 85, 116, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 217, 222, 224, 230, 251, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 285, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <Op Unary> ::= '£' _ <Op Unary>                                                 <Op Unary> ::= '£' ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Pointer> g 180
        <Op Unary> g 250
        <REGISTER> g 183
        <Value> g 184


State 135
        Prior States: 84, 85, 116, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 217, 222, 224, 230, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 287, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 456, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <REGISTER> ::= AH _                                                             <REGISTER> ::= AH ^

        '-' r 220
        '--' r 220
        '!=' r 220
        '%' r 220
        '&' r 220
        '&&' r 220
        '&=' r 220
        ')' r 220
        '*' r 220
        '*=' r 220
        ',' r 220
        '.' r 220
        '/' r 220
        '/=' r 220
        ':' r 220
        ';' r 220
        '?' r 220
        '[' r 220
        ']' r 220
        '^' r 220
        '^=' r 220
        '|' r 220
        '||' r 220
        '|=' r 220
        '~>' r 220
        '+' r 220
        '++' r 220
        '+=' r 220
        '<' r 220
        '<~' r 220
        '<<' r 220
        '<<=' r 220
        '<=' r 220
        '<>' r 220
        '=' r 220
        '-=' r 220
        '==' r 220
        '>' r 220
        '->' r 220
        '>=' r 220
        '>>' r 220
        '>>=' r 220


State 136
        Prior States: 84, 85, 116, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 217, 222, 224, 230, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 287, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 456, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <REGISTER> ::= AL _                                                             <REGISTER> ::= AL ^

        '-' r 221
        '--' r 221
        '!=' r 221
        '%' r 221
        '&' r 221
        '&&' r 221
        '&=' r 221
        ')' r 221
        '*' r 221
        '*=' r 221
        ',' r 221
        '.' r 221
        '/' r 221
        '/=' r 221
        ':' r 221
        ';' r 221
        '?' r 221
        '[' r 221
        ']' r 221
        '^' r 221
        '^=' r 221
        '|' r 221
        '||' r 221
        '|=' r 221
        '~>' r 221
        '+' r 221
        '++' r 221
        '+=' r 221
        '<' r 221
        '<~' r 221
        '<<' r 221
        '<<=' r 221
        '<=' r 221
        '<>' r 221
        '=' r 221
        '-=' r 221
        '==' r 221
        '>' r 221
        '->' r 221
        '>=' r 221
        '>>' r 221
        '>>=' r 221


State 137
        Prior States: 84, 85, 116, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 217, 222, 224, 230, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 287, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 456, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <REGISTER> ::= AX _                                                             <REGISTER> ::= AX ^

        '-' r 206
        '--' r 206
        '!=' r 206
        '%' r 206
        '&' r 206
        '&&' r 206
        '&=' r 206
        ')' r 206
        '*' r 206
        '*=' r 206
        ',' r 206
        '.' r 206
        '/' r 206
        '/=' r 206
        ':' r 206
        ';' r 206
        '?' r 206
        '[' r 206
        ']' r 206
        '^' r 206
        '^=' r 206
        '|' r 206
        '||' r 206
        '|=' r 206
        '~>' r 206
        '+' r 206
        '++' r 206
        '+=' r 206
        '<' r 206
        '<~' r 206
        '<<' r 206
        '<<=' r 206
        '<=' r 206
        '<>' r 206
        '=' r 206
        '-=' r 206
        '==' r 206
        '>' r 206
        '->' r 206
        '>=' r 206
        '>>' r 206
        '>>=' r 206


State 138
        Prior States: 84, 85, 116, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 217, 222, 224, 230, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 287, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 456, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <REGISTER> ::= BH _                                                             <REGISTER> ::= BH ^

        '-' r 222
        '--' r 222
        '!=' r 222
        '%' r 222
        '&' r 222
        '&&' r 222
        '&=' r 222
        ')' r 222
        '*' r 222
        '*=' r 222
        ',' r 222
        '.' r 222
        '/' r 222
        '/=' r 222
        ':' r 222
        ';' r 222
        '?' r 222
        '[' r 222
        ']' r 222
        '^' r 222
        '^=' r 222
        '|' r 222
        '||' r 222
        '|=' r 222
        '~>' r 222
        '+' r 222
        '++' r 222
        '+=' r 222
        '<' r 222
        '<~' r 222
        '<<' r 222
        '<<=' r 222
        '<=' r 222
        '<>' r 222
        '=' r 222
        '-=' r 222
        '==' r 222
        '>' r 222
        '->' r 222
        '>=' r 222
        '>>' r 222
        '>>=' r 222


State 139
        Prior States: 84, 85, 116, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 217, 222, 224, 230, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 287, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 456, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <Value> ::= BinaryLiteral _                                                     <Value> ::= BinaryLiteral ^

        '-' r 195
        '--' r 195
        '!=' r 195
        '%' r 195
        '&' r 195
        '&&' r 195
        '&=' r 195
        ')' r 195
        '*' r 195
        '*=' r 195
        ',' r 195
        '.' r 195
        '/' r 195
        '/=' r 195
        ':' r 195
        ';' r 195
        '?' r 195
        '[' r 195
        ']' r 195
        '^' r 195
        '^=' r 195
        '|' r 195
        '||' r 195
        '|=' r 195
        '~>' r 195
        '+' r 195
        '++' r 195
        '+=' r 195
        '<' r 195
        '<~' r 195
        '<<' r 195
        '<<=' r 195
        '<=' r 195
        '<>' r 195
        '=' r 195
        '-=' r 195
        '==' r 195
        '>' r 195
        '->' r 195
        '>=' r 195
        '>>' r 195
        '>>=' r 195


State 140
        Prior States: 84, 85, 116, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 217, 222, 224, 230, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 287, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 456, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <REGISTER> ::= BL _                                                             <REGISTER> ::= BL ^

        '-' r 223
        '--' r 223
        '!=' r 223
        '%' r 223
        '&' r 223
        '&&' r 223
        '&=' r 223
        ')' r 223
        '*' r 223
        '*=' r 223
        ',' r 223
        '.' r 223
        '/' r 223
        '/=' r 223
        ':' r 223
        ';' r 223
        '?' r 223
        '[' r 223
        ']' r 223
        '^' r 223
        '^=' r 223
        '|' r 223
        '||' r 223
        '|=' r 223
        '~>' r 223
        '+' r 223
        '++' r 223
        '+=' r 223
        '<' r 223
        '<~' r 223
        '<<' r 223
        '<<=' r 223
        '<=' r 223
        '<>' r 223
        '=' r 223
        '-=' r 223
        '==' r 223
        '>' r 223
        '->' r 223
        '>=' r 223
        '>>' r 223
        '>>=' r 223


State 141
        Prior States: 84, 85, 116, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 217, 222, 224, 230, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 287, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 456, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <Value> ::= BooleanLiteral _                                                    <Value> ::= BooleanLiteral ^

        '-' r 196
        '--' r 196
        '!=' r 196
        '%' r 196
        '&' r 196
        '&&' r 196
        '&=' r 196
        ')' r 196
        '*' r 196
        '*=' r 196
        ',' r 196
        '.' r 196
        '/' r 196
        '/=' r 196
        ':' r 196
        ';' r 196
        '?' r 196
        '[' r 196
        ']' r 196
        '^' r 196
        '^=' r 196
        '|' r 196
        '||' r 196
        '|=' r 196
        '~>' r 196
        '+' r 196
        '++' r 196
        '+=' r 196
        '<' r 196
        '<~' r 196
        '<<' r 196
        '<<=' r 196
        '<=' r 196
        '<>' r 196
        '=' r 196
        '-=' r 196
        '==' r 196
        '>' r 196
        '->' r 196
        '>=' r 196
        '>>' r 196
        '>>=' r 196


State 142
        Prior States: 84, 85, 116, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 217, 222, 224, 230, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 287, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 456, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <REGISTER> ::= BP _                                                             <REGISTER> ::= BP ^

        '-' r 213
        '--' r 213
        '!=' r 213
        '%' r 213
        '&' r 213
        '&&' r 213
        '&=' r 213
        ')' r 213
        '*' r 213
        '*=' r 213
        ',' r 213
        '.' r 213
        '/' r 213
        '/=' r 213
        ':' r 213
        ';' r 213
        '?' r 213
        '[' r 213
        ']' r 213
        '^' r 213
        '^=' r 213
        '|' r 213
        '||' r 213
        '|=' r 213
        '~>' r 213
        '+' r 213
        '++' r 213
        '+=' r 213
        '<' r 213
        '<~' r 213
        '<<' r 213
        '<<=' r 213
        '<=' r 213
        '<>' r 213
        '=' r 213
        '-=' r 213
        '==' r 213
        '>' r 213
        '->' r 213
        '>=' r 213
        '>>' r 213
        '>>=' r 213


State 143
        Prior States: 84, 85, 116, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 217, 222, 224, 230, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 287, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 456, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <REGISTER> ::= BX _                                                             <REGISTER> ::= BX ^

        '-' r 207
        '--' r 207
        '!=' r 207
        '%' r 207
        '&' r 207
        '&&' r 207
        '&=' r 207
        ')' r 207
        '*' r 207
        '*=' r 207
        ',' r 207
        '.' r 207
        '/' r 207
        '/=' r 207
        ':' r 207
        ';' r 207
        '?' r 207
        '[' r 207
        ']' r 207
        '^' r 207
        '^=' r 207
        '|' r 207
        '||' r 207
        '|=' r 207
        '~>' r 207
        '+' r 207
        '++' r 207
        '+=' r 207
        '<' r 207
        '<~' r 207
        '<<' r 207
        '<<=' r 207
        '<=' r 207
        '<>' r 207
        '=' r 207
        '-=' r 207
        '==' r 207
        '>' r 207
        '->' r 207
        '>=' r 207
        '>>' r 207
        '>>=' r 207


State 144
        Prior States: 84, 85, 116, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 217, 222, 224, 230, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 287, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 456, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <REGISTER> ::= CH _                                                             <REGISTER> ::= CH ^

        '-' r 224
        '--' r 224
        '!=' r 224
        '%' r 224
        '&' r 224
        '&&' r 224
        '&=' r 224
        ')' r 224
        '*' r 224
        '*=' r 224
        ',' r 224
        '.' r 224
        '/' r 224
        '/=' r 224
        ':' r 224
        ';' r 224
        '?' r 224
        '[' r 224
        ']' r 224
        '^' r 224
        '^=' r 224
        '|' r 224
        '||' r 224
        '|=' r 224
        '~>' r 224
        '+' r 224
        '++' r 224
        '+=' r 224
        '<' r 224
        '<~' r 224
        '<<' r 224
        '<<=' r 224
        '<=' r 224
        '<>' r 224
        '=' r 224
        '-=' r 224
        '==' r 224
        '>' r 224
        '->' r 224
        '>=' r 224
        '>>' r 224
        '>>=' r 224


State 145
        Prior States: 84, 85, 116, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 217, 222, 224, 230, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 287, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 456, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <Value> ::= CharLiteral _                                                       <Value> ::= CharLiteral ^

        '-' r 194
        '--' r 194
        '!=' r 194
        '%' r 194
        '&' r 194
        '&&' r 194
        '&=' r 194
        ')' r 194
        '*' r 194
        '*=' r 194
        ',' r 194
        '.' r 194
        '/' r 194
        '/=' r 194
        ':' r 194
        ';' r 194
        '?' r 194
        '[' r 194
        ']' r 194
        '^' r 194
        '^=' r 194
        '|' r 194
        '||' r 194
        '|=' r 194
        '~>' r 194
        '+' r 194
        '++' r 194
        '+=' r 194
        '<' r 194
        '<~' r 194
        '<<' r 194
        '<<=' r 194
        '<=' r 194
        '<>' r 194
        '=' r 194
        '-=' r 194
        '==' r 194
        '>' r 194
        '->' r 194
        '>=' r 194
        '>>' r 194
        '>>=' r 194


State 146
        Prior States: 84, 85, 116, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 217, 222, 224, 230, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 287, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 456, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <REGISTER> ::= CL _                                                             <REGISTER> ::= CL ^

        '-' r 225
        '--' r 225
        '!=' r 225
        '%' r 225
        '&' r 225
        '&&' r 225
        '&=' r 225
        ')' r 225
        '*' r 225
        '*=' r 225
        ',' r 225
        '.' r 225
        '/' r 225
        '/=' r 225
        ':' r 225
        ';' r 225
        '?' r 225
        '[' r 225
        ']' r 225
        '^' r 225
        '^=' r 225
        '|' r 225
        '||' r 225
        '|=' r 225
        '~>' r 225
        '+' r 225
        '++' r 225
        '+=' r 225
        '<' r 225
        '<~' r 225
        '<<' r 225
        '<<=' r 225
        '<=' r 225
        '<>' r 225
        '=' r 225
        '-=' r 225
        '==' r 225
        '>' r 225
        '->' r 225
        '>=' r 225
        '>>' r 225
        '>>=' r 225


State 147
        Prior States: 84, 85, 116, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 217, 222, 224, 230, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 287, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 456, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <REGISTER> ::= CS _                                                             <REGISTER> ::= CS ^

        '-' r 214
        '--' r 214
        '!=' r 214
        '%' r 214
        '&' r 214
        '&&' r 214
        '&=' r 214
        ')' r 214
        '*' r 214
        '*=' r 214
        ',' r 214
        '.' r 214
        '/' r 214
        '/=' r 214
        ':' r 214
        ';' r 214
        '?' r 214
        '[' r 214
        ']' r 214
        '^' r 214
        '^=' r 214
        '|' r 214
        '||' r 214
        '|=' r 214
        '~>' r 214
        '+' r 214
        '++' r 214
        '+=' r 214
        '<' r 214
        '<~' r 214
        '<<' r 214
        '<<=' r 214
        '<=' r 214
        '<>' r 214
        '=' r 214
        '-=' r 214
        '==' r 214
        '>' r 214
        '->' r 214
        '>=' r 214
        '>>' r 214
        '>>=' r 214


State 148
        Prior States: 84, 85, 116, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 217, 222, 224, 230, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 287, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 456, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <REGISTER> ::= CX _                                                             <REGISTER> ::= CX ^

        '-' r 208
        '--' r 208
        '!=' r 208
        '%' r 208
        '&' r 208
        '&&' r 208
        '&=' r 208
        ')' r 208
        '*' r 208
        '*=' r 208
        ',' r 208
        '.' r 208
        '/' r 208
        '/=' r 208
        ':' r 208
        ';' r 208
        '?' r 208
        '[' r 208
        ']' r 208
        '^' r 208
        '^=' r 208
        '|' r 208
        '||' r 208
        '|=' r 208
        '~>' r 208
        '+' r 208
        '++' r 208
        '+=' r 208
        '<' r 208
        '<~' r 208
        '<<' r 208
        '<<=' r 208
        '<=' r 208
        '<>' r 208
        '=' r 208
        '-=' r 208
        '==' r 208
        '>' r 208
        '->' r 208
        '>=' r 208
        '>>' r 208
        '>>=' r 208


State 149
        Prior States: 84, 85, 116, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 217, 222, 224, 230, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 287, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 456, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <Value> ::= DecLiteral _                                                        <Value> ::= DecLiteral ^

        '-' r 192
        '--' r 192
        '!=' r 192
        '%' r 192
        '&' r 192
        '&&' r 192
        '&=' r 192
        ')' r 192
        '*' r 192
        '*=' r 192
        ',' r 192
        '.' r 192
        '/' r 192
        '/=' r 192
        ':' r 192
        ';' r 192
        '?' r 192
        '[' r 192
        ']' r 192
        '^' r 192
        '^=' r 192
        '|' r 192
        '||' r 192
        '|=' r 192
        '~>' r 192
        '+' r 192
        '++' r 192
        '+=' r 192
        '<' r 192
        '<~' r 192
        '<<' r 192
        '<<=' r 192
        '<=' r 192
        '<>' r 192
        '=' r 192
        '-=' r 192
        '==' r 192
        '>' r 192
        '->' r 192
        '>=' r 192
        '>>' r 192
        '>>=' r 192


State 150
        Prior States: 84, 85, 116, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 217, 222, 224, 230, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 287, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 456, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <REGISTER> ::= DH _                                                             <REGISTER> ::= DH ^

        '-' r 226
        '--' r 226
        '!=' r 226
        '%' r 226
        '&' r 226
        '&&' r 226
        '&=' r 226
        ')' r 226
        '*' r 226
        '*=' r 226
        ',' r 226
        '.' r 226
        '/' r 226
        '/=' r 226
        ':' r 226
        ';' r 226
        '?' r 226
        '[' r 226
        ']' r 226
        '^' r 226
        '^=' r 226
        '|' r 226
        '||' r 226
        '|=' r 226
        '~>' r 226
        '+' r 226
        '++' r 226
        '+=' r 226
        '<' r 226
        '<~' r 226
        '<<' r 226
        '<<=' r 226
        '<=' r 226
        '<>' r 226
        '=' r 226
        '-=' r 226
        '==' r 226
        '>' r 226
        '->' r 226
        '>=' r 226
        '>>' r 226
        '>>=' r 226


State 151
        Prior States: 84, 85, 116, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 217, 222, 224, 230, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 287, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 456, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <REGISTER> ::= DI _                                                             <REGISTER> ::= DI ^

        '-' r 211
        '--' r 211
        '!=' r 211
        '%' r 211
        '&' r 211
        '&&' r 211
        '&=' r 211
        ')' r 211
        '*' r 211
        '*=' r 211
        ',' r 211
        '.' r 211
        '/' r 211
        '/=' r 211
        ':' r 211
        ';' r 211
        '?' r 211
        '[' r 211
        ']' r 211
        '^' r 211
        '^=' r 211
        '|' r 211
        '||' r 211
        '|=' r 211
        '~>' r 211
        '+' r 211
        '++' r 211
        '+=' r 211
        '<' r 211
        '<~' r 211
        '<<' r 211
        '<<=' r 211
        '<=' r 211
        '<>' r 211
        '=' r 211
        '-=' r 211
        '==' r 211
        '>' r 211
        '->' r 211
        '>=' r 211
        '>>' r 211
        '>>=' r 211


State 152
        Prior States: 84, 85, 116, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 217, 222, 224, 230, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 287, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 456, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <REGISTER> ::= DL _                                                             <REGISTER> ::= DL ^

        '-' r 227
        '--' r 227
        '!=' r 227
        '%' r 227
        '&' r 227
        '&&' r 227
        '&=' r 227
        ')' r 227
        '*' r 227
        '*=' r 227
        ',' r 227
        '.' r 227
        '/' r 227
        '/=' r 227
        ':' r 227
        ';' r 227
        '?' r 227
        '[' r 227
        ']' r 227
        '^' r 227
        '^=' r 227
        '|' r 227
        '||' r 227
        '|=' r 227
        '~>' r 227
        '+' r 227
        '++' r 227
        '+=' r 227
        '<' r 227
        '<~' r 227
        '<<' r 227
        '<<=' r 227
        '<=' r 227
        '<>' r 227
        '=' r 227
        '-=' r 227
        '==' r 227
        '>' r 227
        '->' r 227
        '>=' r 227
        '>>' r 227
        '>>=' r 227


State 153
        Prior States: 84, 85, 116, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 217, 222, 224, 230, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 287, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 456, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <REGISTER> ::= DS _                                                             <REGISTER> ::= DS ^

        '-' r 215
        '--' r 215
        '!=' r 215
        '%' r 215
        '&' r 215
        '&&' r 215
        '&=' r 215
        ')' r 215
        '*' r 215
        '*=' r 215
        ',' r 215
        '.' r 215
        '/' r 215
        '/=' r 215
        ':' r 215
        ';' r 215
        '?' r 215
        '[' r 215
        ']' r 215
        '^' r 215
        '^=' r 215
        '|' r 215
        '||' r 215
        '|=' r 215
        '~>' r 215
        '+' r 215
        '++' r 215
        '+=' r 215
        '<' r 215
        '<~' r 215
        '<<' r 215
        '<<=' r 215
        '<=' r 215
        '<>' r 215
        '=' r 215
        '-=' r 215
        '==' r 215
        '>' r 215
        '->' r 215
        '>=' r 215
        '>>' r 215
        '>>=' r 215


State 154
        Prior States: 84, 85, 116, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 217, 222, 224, 230, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 287, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 456, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <REGISTER> ::= DX _                                                             <REGISTER> ::= DX ^

        '-' r 209
        '--' r 209
        '!=' r 209
        '%' r 209
        '&' r 209
        '&&' r 209
        '&=' r 209
        ')' r 209
        '*' r 209
        '*=' r 209
        ',' r 209
        '.' r 209
        '/' r 209
        '/=' r 209
        ':' r 209
        ';' r 209
        '?' r 209
        '[' r 209
        ']' r 209
        '^' r 209
        '^=' r 209
        '|' r 209
        '||' r 209
        '|=' r 209
        '~>' r 209
        '+' r 209
        '++' r 209
        '+=' r 209
        '<' r 209
        '<~' r 209
        '<<' r 209
        '<<=' r 209
        '<=' r 209
        '<>' r 209
        '=' r 209
        '-=' r 209
        '==' r 209
        '>' r 209
        '->' r 209
        '>=' r 209
        '>>' r 209
        '>>=' r 209


State 155
        Prior States: 84, 85, 116, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 217, 222, 224, 230, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 287, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 456, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <REGISTER> ::= ES _                                                             <REGISTER> ::= ES ^

        '-' r 216
        '--' r 216
        '!=' r 216
        '%' r 216
        '&' r 216
        '&&' r 216
        '&=' r 216
        ')' r 216
        '*' r 216
        '*=' r 216
        ',' r 216
        '.' r 216
        '/' r 216
        '/=' r 216
        ':' r 216
        ';' r 216
        '?' r 216
        '[' r 216
        ']' r 216
        '^' r 216
        '^=' r 216
        '|' r 216
        '||' r 216
        '|=' r 216
        '~>' r 216
        '+' r 216
        '++' r 216
        '+=' r 216
        '<' r 216
        '<~' r 216
        '<<' r 216
        '<<=' r 216
        '<=' r 216
        '<>' r 216
        '=' r 216
        '-=' r 216
        '==' r 216
        '>' r 216
        '->' r 216
        '>=' r 216
        '>>' r 216
        '>>=' r 216


State 156
        Prior States: 84, 85, 116, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 217, 222, 224, 230, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 287, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 456, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <REGISTER> ::= FS _                                                             <REGISTER> ::= FS ^

        '-' r 217
        '--' r 217
        '!=' r 217
        '%' r 217
        '&' r 217
        '&&' r 217
        '&=' r 217
        ')' r 217
        '*' r 217
        '*=' r 217
        ',' r 217
        '.' r 217
        '/' r 217
        '/=' r 217
        ':' r 217
        ';' r 217
        '?' r 217
        '[' r 217
        ']' r 217
        '^' r 217
        '^=' r 217
        '|' r 217
        '||' r 217
        '|=' r 217
        '~>' r 217
        '+' r 217
        '++' r 217
        '+=' r 217
        '<' r 217
        '<~' r 217
        '<<' r 217
        '<<=' r 217
        '<=' r 217
        '<>' r 217
        '=' r 217
        '-=' r 217
        '==' r 217
        '>' r 217
        '->' r 217
        '>=' r 217
        '>>' r 217
        '>>=' r 217


State 157
        Prior States: 84, 85, 116, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 217, 222, 224, 230, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 287, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 456, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <REGISTER> ::= GS _                                                             <REGISTER> ::= GS ^

        '-' r 218
        '--' r 218
        '!=' r 218
        '%' r 218
        '&' r 218
        '&&' r 218
        '&=' r 218
        ')' r 218
        '*' r 218
        '*=' r 218
        ',' r 218
        '.' r 218
        '/' r 218
        '/=' r 218
        ':' r 218
        ';' r 218
        '?' r 218
        '[' r 218
        ']' r 218
        '^' r 218
        '^=' r 218
        '|' r 218
        '||' r 218
        '|=' r 218
        '~>' r 218
        '+' r 218
        '++' r 218
        '+=' r 218
        '<' r 218
        '<~' r 218
        '<<' r 218
        '<<=' r 218
        '<=' r 218
        '<>' r 218
        '=' r 218
        '-=' r 218
        '==' r 218
        '>' r 218
        '->' r 218
        '>=' r 218
        '>>' r 218
        '>>=' r 218


State 158
        Prior States: 84, 85, 116, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 217, 222, 224, 230, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 287, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 456, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <Value> ::= HexLiteral _                                                        <Value> ::= HexLiteral ^

        '-' r 191
        '--' r 191
        '!=' r 191
        '%' r 191
        '&' r 191
        '&&' r 191
        '&=' r 191
        ')' r 191
        '*' r 191
        '*=' r 191
        ',' r 191
        '.' r 191
        '/' r 191
        '/=' r 191
        ':' r 191
        ';' r 191
        '?' r 191
        '[' r 191
        ']' r 191
        '^' r 191
        '^=' r 191
        '|' r 191
        '||' r 191
        '|=' r 191
        '~>' r 191
        '+' r 191
        '++' r 191
        '+=' r 191
        '<' r 191
        '<~' r 191
        '<<' r 191
        '<<=' r 191
        '<=' r 191
        '<>' r 191
        '=' r 191
        '-=' r 191
        '==' r 191
        '>' r 191
        '->' r 191
        '>=' r 191
        '>>' r 191
        '>>=' r 191


State 159
        Prior States: 84, 85, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 224, 251, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 285, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 451, 452, 453, 454, 468, 478

        <Op Pointer> ::= Id _ '::' <Value>                                              <Op Pointer> ::= Id ^ '::' <Value>
        <Value> ::= Id _ '(' <PARAM EXPR> ')'                                           <Value> ::= Id ^ '(' <PARAM EXPR> ')'
        <Value> ::= Id _ '(' ')'                                                        <Value> ::= Id ^ '(' ')'
        <Value> ::= Id _                                                                <Value> ::= Id ^

        '(' s 251
        '::' s 252
        '-' r 200
        '--' r 200
        '!=' r 200
        '%' r 200
        '&' r 200
        '&&' r 200
        '&=' r 200
        ')' r 200
        '*' r 200
        '*=' r 200
        ',' r 200
        '.' r 200
        '/' r 200
        '/=' r 200
        ':' r 200
        ';' r 200
        '?' r 200
        '[' r 200
        ']' r 200
        '^' r 200
        '^=' r 200
        '|' r 200
        '||' r 200
        '|=' r 200
        '~>' r 200
        '+' r 200
        '++' r 200
        '+=' r 200
        '<' r 200
        '<~' r 200
        '<<' r 200
        '<<=' r 200
        '<=' r 200
        '<>' r 200
        '=' r 200
        '-=' r 200
        '==' r 200
        '>' r 200
        '->' r 200
        '>=' r 200
        '>>' r 200
        '>>=' r 200


State 160
        Prior States: 84, 85, 116, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 217, 222, 224, 230, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 287, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 456, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <Value> ::= NullLiteral _                                                       <Value> ::= NullLiteral ^

        '-' r 197
        '--' r 197
        '!=' r 197
        '%' r 197
        '&' r 197
        '&&' r 197
        '&=' r 197
        ')' r 197
        '*' r 197
        '*=' r 197
        ',' r 197
        '.' r 197
        '/' r 197
        '/=' r 197
        ':' r 197
        ';' r 197
        '?' r 197
        '[' r 197
        ']' r 197
        '^' r 197
        '^=' r 197
        '|' r 197
        '||' r 197
        '|=' r 197
        '~>' r 197
        '+' r 197
        '++' r 197
        '+=' r 197
        '<' r 197
        '<~' r 197
        '<<' r 197
        '<<=' r 197
        '<=' r 197
        '<>' r 197
        '=' r 197
        '-=' r 197
        '==' r 197
        '>' r 197
        '->' r 197
        '>=' r 197
        '>>' r 197
        '>>=' r 197


State 161
        Prior States: 84, 85, 116, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 217, 222, 224, 230, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 287, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 456, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <Value> ::= OctLiteral _                                                        <Value> ::= OctLiteral ^

        '-' r 190
        '--' r 190
        '!=' r 190
        '%' r 190
        '&' r 190
        '&&' r 190
        '&=' r 190
        ')' r 190
        '*' r 190
        '*=' r 190
        ',' r 190
        '.' r 190
        '/' r 190
        '/=' r 190
        ':' r 190
        ';' r 190
        '?' r 190
        '[' r 190
        ']' r 190
        '^' r 190
        '^=' r 190
        '|' r 190
        '||' r 190
        '|=' r 190
        '~>' r 190
        '+' r 190
        '++' r 190
        '+=' r 190
        '<' r 190
        '<~' r 190
        '<<' r 190
        '<<=' r 190
        '<=' r 190
        '<>' r 190
        '=' r 190
        '-=' r 190
        '==' r 190
        '>' r 190
        '->' r 190
        '>=' r 190
        '>>' r 190
        '>>=' r 190


State 162
        Prior States: 84, 85, 116, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 217, 222, 224, 230, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 287, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 456, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <REGISTER> ::= SI _                                                             <REGISTER> ::= SI ^

        '-' r 210
        '--' r 210
        '!=' r 210
        '%' r 210
        '&' r 210
        '&&' r 210
        '&=' r 210
        ')' r 210
        '*' r 210
        '*=' r 210
        ',' r 210
        '.' r 210
        '/' r 210
        '/=' r 210
        ':' r 210
        ';' r 210
        '?' r 210
        '[' r 210
        ']' r 210
        '^' r 210
        '^=' r 210
        '|' r 210
        '||' r 210
        '|=' r 210
        '~>' r 210
        '+' r 210
        '++' r 210
        '+=' r 210
        '<' r 210
        '<~' r 210
        '<<' r 210
        '<<=' r 210
        '<=' r 210
        '<>' r 210
        '=' r 210
        '-=' r 210
        '==' r 210
        '>' r 210
        '->' r 210
        '>=' r 210
        '>>' r 210
        '>>=' r 210


State 163
        Prior States: 84, 85, 116, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 217, 222, 224, 230, 251, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 285, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <Op Unary> ::= sizeof _ '(' <Type> ')'                                          <Op Unary> ::= sizeof ^ '(' <Type> ')'
        <Op Unary> ::= sizeof _ '(' Id <Pointers> ')'                                   <Op Unary> ::= sizeof ^ '(' Id <Pointers> ')'

        '(' s 253


State 164
        Prior States: 84, 85, 116, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 217, 222, 224, 230, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 287, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 456, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <REGISTER> ::= SP _                                                             <REGISTER> ::= SP ^

        '-' r 212
        '--' r 212
        '!=' r 212
        '%' r 212
        '&' r 212
        '&&' r 212
        '&=' r 212
        ')' r 212
        '*' r 212
        '*=' r 212
        ',' r 212
        '.' r 212
        '/' r 212
        '/=' r 212
        ':' r 212
        ';' r 212
        '?' r 212
        '[' r 212
        ']' r 212
        '^' r 212
        '^=' r 212
        '|' r 212
        '||' r 212
        '|=' r 212
        '~>' r 212
        '+' r 212
        '++' r 212
        '+=' r 212
        '<' r 212
        '<~' r 212
        '<<' r 212
        '<<=' r 212
        '<=' r 212
        '<>' r 212
        '=' r 212
        '-=' r 212
        '==' r 212
        '>' r 212
        '->' r 212
        '>=' r 212
        '>>' r 212
        '>>=' r 212


State 165
        Prior States: 84, 85, 116, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 217, 222, 224, 230, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 287, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 456, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <REGISTER> ::= SS _                                                             <REGISTER> ::= SS ^

        '-' r 219
        '--' r 219
        '!=' r 219
        '%' r 219
        '&' r 219
        '&&' r 219
        '&=' r 219
        ')' r 219
        '*' r 219
        '*=' r 219
        ',' r 219
        '.' r 219
        '/' r 219
        '/=' r 219
        ':' r 219
        ';' r 219
        '?' r 219
        '[' r 219
        ']' r 219
        '^' r 219
        '^=' r 219
        '|' r 219
        '||' r 219
        '|=' r 219
        '~>' r 219
        '+' r 219
        '++' r 219
        '+=' r 219
        '<' r 219
        '<~' r 219
        '<<' r 219
        '<<=' r 219
        '<=' r 219
        '<>' r 219
        '=' r 219
        '-=' r 219
        '==' r 219
        '>' r 219
        '->' r 219
        '>=' r 219
        '>>' r 219
        '>>=' r 219


State 166
        Prior States: 84, 85, 116, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 217, 222, 224, 230, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 287, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 456, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <Value> ::= StringLiteral _                                                     <Value> ::= StringLiteral ^

        '-' r 193
        '--' r 193
        '!=' r 193
        '%' r 193
        '&' r 193
        '&&' r 193
        '&=' r 193
        ')' r 193
        '*' r 193
        '*=' r 193
        ',' r 193
        '.' r 193
        '/' r 193
        '/=' r 193
        ':' r 193
        ';' r 193
        '?' r 193
        '[' r 193
        ']' r 193
        '^' r 193
        '^=' r 193
        '|' r 193
        '||' r 193
        '|=' r 193
        '~>' r 193
        '+' r 193
        '++' r 193
        '+=' r 193
        '<' r 193
        '<~' r 193
        '<<' r 193
        '<<=' r 193
        '<=' r 193
        '<>' r 193
        '=' r 193
        '-=' r 193
        '==' r 193
        '>' r 193
        '->' r 193
        '>=' r 193
        '>>' r 193
        '>>=' r 193


State 167
        Prior States: 84

        <Array> ::= '[' <Expression> _ ']'                                              <Array> ::= '[' <Expression> ^ ']'

        ']' s 254


State 168
        Prior States: 84, 85, 116, 129, 186, 217, 222, 224, 230, 251, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 280, 281, 282, 285, 321, 326, 330, 331, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <Op Shift> ::= <Op Add> _                                                       <Op Shift> ::= <Op Add> ^
        <Op Add> ::= <Op Add> _ '+' <Op Mult>                                           <Op Add> ::= <Op Add> ^ '+' <Op Mult>
        <Op Add> ::= <Op Add> _ '-' <Op Mult>                                           <Op Add> ::= <Op Add> ^ '-' <Op Mult>

        '-' s 255
        '+' s 256
        '!=' r 162
        '&' r 162
        '&&' r 162
        '&=' r 162
        ')' r 162
        '*=' r 162
        ',' r 162
        '/=' r 162
        ':' r 162
        ';' r 162
        '?' r 162
        ']' r 162
        '^' r 162
        '^=' r 162
        '|' r 162
        '||' r 162
        '|=' r 162
        '~>' r 162
        '+=' r 162
        '<' r 162
        '<~' r 162
        '<<' r 162
        '<<=' r 162
        '<=' r 162
        '<>' r 162
        '=' r 162
        '-=' r 162
        '==' r 162
        '>' r 162
        '>=' r 162
        '>>' r 162
        '>>=' r 162


State 169
        Prior States: 84, 85, 116, 129, 186, 217, 222, 224, 230, 251, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 281, 285, 321, 326, 330, 331, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <Op Or> ::= <Op And> _                                                          <Op Or> ::= <Op And> ^
        <Op And> ::= <Op And> _ '&&' <Op BinOR>                                         <Op And> ::= <Op And> ^ '&&' <Op BinOR>

        '&&' s 257
        '&=' r 140
        ')' r 140
        '*=' r 140
        ',' r 140
        '/=' r 140
        ':' r 140
        ';' r 140
        '?' r 140
        ']' r 140
        '^=' r 140
        '||' r 140
        '|=' r 140
        '+=' r 140
        '<<=' r 140
        '<>' r 140
        '=' r 140
        '-=' r 140
        '>>=' r 140


State 170
        Prior States: 84, 116, 129, 217, 222, 224, 230, 251, 285, 321, 326, 330, 331, 340, 408, 431, 432, 434, 436, 451, 452, 453, 454, 455, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <Expression> ::= <Op Assign> _                                                  <Expression> ::= <Op Assign> ^

        ')' r 124
        ',' r 124
        ';' r 124
        ']' r 124


State 171
        Prior States: 84, 85, 116, 129, 186, 217, 222, 224, 230, 251, 257, 259, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 281, 282, 285, 321, 326, 330, 331, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <Op BinXOR> ::= <Op BinAND> _                                                   <Op BinXOR> ::= <Op BinAND> ^
        <Op BinAND> ::= <Op BinAND> _ '&' <Op Equate>                                   <Op BinAND> ::= <Op BinAND> ^ '&' <Op Equate>

        '&' s 258
        '&&' r 146
        '&=' r 146
        ')' r 146
        '*=' r 146
        ',' r 146
        '/=' r 146
        ':' r 146
        ';' r 146
        '?' r 146
        ']' r 146
        '^' r 146
        '^=' r 146
        '|' r 146
        '||' r 146
        '|=' r 146
        '+=' r 146
        '<<=' r 146
        '<>' r 146
        '=' r 146
        '-=' r 146
        '>>=' r 146


State 172
        Prior States: 84, 85, 116, 129, 186, 217, 222, 224, 230, 251, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 281, 282, 285, 321, 326, 330, 331, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <Op And> ::= <Op BinOR> _                                                       <Op And> ::= <Op BinOR> ^
        <Op BinOR> ::= <Op BinOR> _ '|' <Op BinXOR>                                     <Op BinOR> ::= <Op BinOR> ^ '|' <Op BinXOR>

        '|' s 259
        '&&' r 142
        '&=' r 142
        ')' r 142
        '*=' r 142
        ',' r 142
        '/=' r 142
        ':' r 142
        ';' r 142
        '?' r 142
        ']' r 142
        '^=' r 142
        '||' r 142
        '|=' r 142
        '+=' r 142
        '<<=' r 142
        '<>' r 142
        '=' r 142
        '-=' r 142
        '>>=' r 142


State 173
        Prior States: 84, 85, 116, 129, 186, 217, 222, 224, 230, 251, 257, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 281, 282, 285, 321, 326, 330, 331, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <Op BinOR> ::= <Op BinXOR> _                                                    <Op BinOR> ::= <Op BinXOR> ^
        <Op BinXOR> ::= <Op BinXOR> _ '^' <Op BinAND>                                   <Op BinXOR> ::= <Op BinXOR> ^ '^' <Op BinAND>

        '^' s 260
        '&&' r 144
        '&=' r 144
        ')' r 144
        '*=' r 144
        ',' r 144
        '/=' r 144
        ':' r 144
        ';' r 144
        '?' r 144
        ']' r 144
        '^=' r 144
        '|' r 144
        '||' r 144
        '|=' r 144
        '+=' r 144
        '<<=' r 144
        '<>' r 144
        '=' r 144
        '-=' r 144
        '>>=' r 144


State 174
        Prior States: 84, 85, 116, 129, 186, 217, 222, 224, 230, 251, 257, 258, 259, 260, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 281, 282, 285, 321, 326, 330, 331, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <Op NEqual> ::= <Op Compare> _                                                  <Op NEqual> ::= <Op Compare> ^
        <Op Compare> ::= <Op Compare> _ '<' <Op Shift>                                  <Op Compare> ::= <Op Compare> ^ '<' <Op Shift>
        <Op Compare> ::= <Op Compare> _ '>' <Op Shift>                                  <Op Compare> ::= <Op Compare> ^ '>' <Op Shift>
        <Op Compare> ::= <Op Compare> _ '<=' <Op Shift>                                 <Op Compare> ::= <Op Compare> ^ '<=' <Op Shift>
        <Op Compare> ::= <Op Compare> _ '>=' <Op Shift>                                 <Op Compare> ::= <Op Compare> ^ '>=' <Op Shift>

        '<' s 261
        '<=' s 262
        '>' s 263
        '>=' s 264
        '!=' r 152
        '&' r 152
        '&&' r 152
        '&=' r 152
        ')' r 152
        '*=' r 152
        ',' r 152
        '/=' r 152
        ':' r 152
        ';' r 152
        '?' r 152
        ']' r 152
        '^' r 152
        '^=' r 152
        '|' r 152
        '||' r 152
        '|=' r 152
        '+=' r 152
        '<<=' r 152
        '<>' r 152
        '=' r 152
        '-=' r 152
        '==' r 152
        '>>=' r 152


State 175
        Prior States: 84, 85, 116, 129, 186, 217, 222, 224, 230, 251, 257, 259, 260, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 281, 282, 285, 321, 326, 330, 331, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <Op BinAND> ::= <Op Equate> _                                                   <Op BinAND> ::= <Op Equate> ^
        <Op Equate> ::= <Op Equate> _ '==' <Op NEqual>                                  <Op Equate> ::= <Op Equate> ^ '==' <Op NEqual>

        '==' s 265
        '&' r 148
        '&&' r 148
        '&=' r 148
        ')' r 148
        '*=' r 148
        ',' r 148
        '/=' r 148
        ':' r 148
        ';' r 148
        '?' r 148
        ']' r 148
        '^' r 148
        '^=' r 148
        '|' r 148
        '||' r 148
        '|=' r 148
        '+=' r 148
        '<<=' r 148
        '<>' r 148
        '=' r 148
        '-=' r 148
        '>>=' r 148


State 176
        Prior States: 84, 116, 129, 217, 222, 224, 230, 251, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 285, 321, 326, 330, 331, 340, 408, 431, 432, 434, 436, 451, 452, 453, 454, 455, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <Op Assign> ::= <Op If> _ '=' <Op Assign>                                       <Op Assign> ::= <Op If> ^ '=' <Op Assign>
        <Op Assign> ::= <Op If> _ '<>' <Op Assign>                                      <Op Assign> ::= <Op If> ^ '<>' <Op Assign>
        <Op Assign> ::= <Op If> _ '+=' <Op Assign>                                      <Op Assign> ::= <Op If> ^ '+=' <Op Assign>
        <Op Assign> ::= <Op If> _ '-=' <Op Assign>                                      <Op Assign> ::= <Op If> ^ '-=' <Op Assign>
        <Op Assign> ::= <Op If> _ '*=' <Op Assign>                                      <Op Assign> ::= <Op If> ^ '*=' <Op Assign>
        <Op Assign> ::= <Op If> _ '/=' <Op Assign>                                      <Op Assign> ::= <Op If> ^ '/=' <Op Assign>
        <Op Assign> ::= <Op If> _ '^=' <Op Assign>                                      <Op Assign> ::= <Op If> ^ '^=' <Op Assign>
        <Op Assign> ::= <Op If> _ '&=' <Op Assign>                                      <Op Assign> ::= <Op If> ^ '&=' <Op Assign>
        <Op Assign> ::= <Op If> _ '|=' <Op Assign>                                      <Op Assign> ::= <Op If> ^ '|=' <Op Assign>
        <Op Assign> ::= <Op If> _ '>>=' <Op Assign>                                     <Op Assign> ::= <Op If> ^ '>>=' <Op Assign>
        <Op Assign> ::= <Op If> _ '<<=' <Op Assign>                                     <Op Assign> ::= <Op If> ^ '<<=' <Op Assign>
        <Op Assign> ::= <Op If> _                                                       <Op Assign> ::= <Op If> ^

        '&=' s 266
        '*=' s 267
        '/=' s 268
        '^=' s 269
        '|=' s 270
        '+=' s 271
        '<<=' s 272
        '<>' s 273
        '=' s 274
        '-=' s 275
        '>>=' s 276
        ')' r 136
        ',' r 136
        ';' r 136
        ']' r 136


State 177
        Prior States: 84, 85, 116, 129, 186, 217, 222, 224, 230, 251, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 280, 281, 282, 285, 288, 289, 290, 291, 321, 326, 330, 331, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <Op Add> ::= <Op Mult> _                                                        <Op Add> ::= <Op Mult> ^
        <Op Mult> ::= <Op Mult> _ '*' <Op Unary>                                        <Op Mult> ::= <Op Mult> ^ '*' <Op Unary>
        <Op Mult> ::= <Op Mult> _ '/' <Op Unary>                                        <Op Mult> ::= <Op Mult> ^ '/' <Op Unary>
        <Op Mult> ::= <Op Mult> _ '%' <Op Unary>                                        <Op Mult> ::= <Op Mult> ^ '%' <Op Unary>

        '%' s 277
        '*' s 278
        '/' s 279
        '-' r 165
        '!=' r 165
        '&' r 165
        '&&' r 165
        '&=' r 165
        ')' r 165
        '*=' r 165
        ',' r 165
        '/=' r 165
        ':' r 165
        ';' r 165
        '?' r 165
        ']' r 165
        '^' r 165
        '^=' r 165
        '|' r 165
        '||' r 165
        '|=' r 165
        '~>' r 165
        '+' r 165
        '+=' r 165
        '<' r 165
        '<~' r 165
        '<<' r 165
        '<<=' r 165
        '<=' r 165
        '<>' r 165
        '=' r 165
        '-=' r 165
        '==' r 165
        '>' r 165
        '>=' r 165
        '>>' r 165
        '>>=' r 165


State 178
        Prior States: 84, 85, 116, 129, 186, 217, 222, 224, 230, 251, 257, 258, 259, 260, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 281, 282, 285, 321, 326, 330, 331, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <Op Equate> ::= <Op NEqual> _                                                   <Op Equate> ::= <Op NEqual> ^
        <Op NEqual> ::= <Op NEqual> _ '!=' <Op Compare>                                 <Op NEqual> ::= <Op NEqual> ^ '!=' <Op Compare>

        '!=' s 280
        '&' r 150
        '&&' r 150
        '&=' r 150
        ')' r 150
        '*=' r 150
        ',' r 150
        '/=' r 150
        ':' r 150
        ';' r 150
        '?' r 150
        ']' r 150
        '^' r 150
        '^=' r 150
        '|' r 150
        '||' r 150
        '|=' r 150
        '+=' r 150
        '<<=' r 150
        '<>' r 150
        '=' r 150
        '-=' r 150
        '==' r 150
        '>>=' r 150


State 179
        Prior States: 84, 85, 116, 129, 186, 217, 222, 224, 230, 251, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 281, 285, 321, 326, 330, 331, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <Op If> ::= <Op Or> _ '?' <Op If> ':' <Op If>                                   <Op If> ::= <Op Or> ^ '?' <Op If> ':' <Op If>
        <Op If> ::= <Op Or> _                                                           <Op If> ::= <Op Or> ^
        <Op Or> ::= <Op Or> _ '||' <Op And>                                             <Op Or> ::= <Op Or> ^ '||' <Op And>

        '?' s 281
        '||' s 282
        '&=' r 138
        ')' r 138
        '*=' r 138
        ',' r 138
        '/=' r 138
        ':' r 138
        ';' r 138
        ']' r 138
        '^=' r 138
        '|=' r 138
        '+=' r 138
        '<<=' r 138
        '<>' r 138
        '=' r 138
        '-=' r 138
        '>>=' r 138


State 180
        Prior States: 84, 85, 116, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 217, 222, 224, 230, 251, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 285, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <Op Unary> ::= <Op Pointer> _ '++'                                              <Op Unary> ::= <Op Pointer> ^ '++'
        <Op Unary> ::= <Op Pointer> _ '--'                                              <Op Unary> ::= <Op Pointer> ^ '--'
        <Op Unary> ::= <Op Pointer> _                                                   <Op Unary> ::= <Op Pointer> ^
        <Op Pointer> ::= <Op Pointer> _ '.' <Value>                                     <Op Pointer> ::= <Op Pointer> ^ '.' <Value>
        <Op Pointer> ::= <Op Pointer> _ '->' <Value>                                    <Op Pointer> ::= <Op Pointer> ^ '->' <Value>
        <Op Pointer> ::= <Op Pointer> _ '[' <Expression> ']'                            <Op Pointer> ::= <Op Pointer> ^ '[' <Expression> ']'

        '--' s 283
        '.' s 284
        '[' s 285
        '++' s 286
        '->' s 287
        '-' r 184
        '!=' r 184
        '%' r 184
        '&' r 184
        '&&' r 184
        '&=' r 184
        ')' r 184
        '*' r 184
        '*=' r 184
        ',' r 184
        '/' r 184
        '/=' r 184
        ':' r 184
        ';' r 184
        '?' r 184
        ']' r 184
        '^' r 184
        '^=' r 184
        '|' r 184
        '||' r 184
        '|=' r 184
        '~>' r 184
        '+' r 184
        '+=' r 184
        '<' r 184
        '<~' r 184
        '<<' r 184
        '<<=' r 184
        '<=' r 184
        '<>' r 184
        '=' r 184
        '-=' r 184
        '==' r 184
        '>' r 184
        '>=' r 184
        '>>' r 184
        '>>=' r 184


State 181
        Prior States: 84, 85, 116, 129, 186, 217, 222, 224, 230, 251, 257, 258, 259, 260, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 280, 281, 282, 285, 321, 326, 330, 331, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <Op Compare> ::= <Op Shift> _                                                   <Op Compare> ::= <Op Shift> ^
        <Op Shift> ::= <Op Shift> _ '<<' <Op Add>                                       <Op Shift> ::= <Op Shift> ^ '<<' <Op Add>
        <Op Shift> ::= <Op Shift> _ '>>' <Op Add>                                       <Op Shift> ::= <Op Shift> ^ '>>' <Op Add>
        <Op Shift> ::= <Op Shift> _ '~>' <Op Add>                                       <Op Shift> ::= <Op Shift> ^ '~>' <Op Add>
        <Op Shift> ::= <Op Shift> _ '<~' <Op Add>                                       <Op Shift> ::= <Op Shift> ^ '<~' <Op Add>

        '~>' s 288
        '<~' s 289
        '<<' s 290
        '>>' s 291
        '!=' r 157
        '&' r 157
        '&&' r 157
        '&=' r 157
        ')' r 157
        '*=' r 157
        ',' r 157
        '/=' r 157
        ':' r 157
        ';' r 157
        '?' r 157
        ']' r 157
        '^' r 157
        '^=' r 157
        '|' r 157
        '||' r 157
        '|=' r 157
        '+=' r 157
        '<' r 157
        '<<=' r 157
        '<=' r 157
        '<>' r 157
        '=' r 157
        '-=' r 157
        '==' r 157
        '>' r 157
        '>=' r 157
        '>>=' r 157


State 182
        Prior States: 84, 85, 116, 129, 186, 217, 222, 224, 230, 251, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 280, 281, 282, 285, 288, 289, 290, 291, 321, 326, 330, 331, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <Op Mult> ::= <Op Unary> _                                                      <Op Mult> ::= <Op Unary> ^

        '-' r 169
        '!=' r 169
        '%' r 169
        '&' r 169
        '&&' r 169
        '&=' r 169
        ')' r 169
        '*' r 169
        '*=' r 169
        ',' r 169
        '/' r 169
        '/=' r 169
        ':' r 169
        ';' r 169
        '?' r 169
        ']' r 169
        '^' r 169
        '^=' r 169
        '|' r 169
        '||' r 169
        '|=' r 169
        '~>' r 169
        '+' r 169
        '+=' r 169
        '<' r 169
        '<~' r 169
        '<<' r 169
        '<<=' r 169
        '<=' r 169
        '<>' r 169
        '=' r 169
        '-=' r 169
        '==' r 169
        '>' r 169
        '>=' r 169
        '>>' r 169
        '>>=' r 169


State 183
        Prior States: 84, 85, 116, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 217, 222, 224, 230, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 287, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 456, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <Value> ::= <REGISTER> _                                                        <Value> ::= <REGISTER> ^

        '-' r 202
        '--' r 202
        '!=' r 202
        '%' r 202
        '&' r 202
        '&&' r 202
        '&=' r 202
        ')' r 202
        '*' r 202
        '*=' r 202
        ',' r 202
        '.' r 202
        '/' r 202
        '/=' r 202
        ':' r 202
        ';' r 202
        '?' r 202
        '[' r 202
        ']' r 202
        '^' r 202
        '^=' r 202
        '|' r 202
        '||' r 202
        '|=' r 202
        '~>' r 202
        '+' r 202
        '++' r 202
        '+=' r 202
        '<' r 202
        '<~' r 202
        '<<' r 202
        '<<=' r 202
        '<=' r 202
        '<>' r 202
        '=' r 202
        '-=' r 202
        '==' r 202
        '>' r 202
        '->' r 202
        '>=' r 202
        '>>' r 202
        '>>=' r 202


State 184
        Prior States: 84, 85, 116, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 186, 217, 222, 224, 230, 251, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 285, 288, 289, 290, 291, 321, 326, 330, 331, 336, 340, 408, 412, 431, 432, 434, 436, 451, 452, 453, 454, 455, 465, 467, 468, 469, 470, 471, 478, 479, 483

        <Op Pointer> ::= <Value> _                                                      <Op Pointer> ::= <Value> ^

        '-' r 189
        '--' r 189
        '!=' r 189
        '%' r 189
        '&' r 189
        '&&' r 189
        '&=' r 189
        ')' r 189
        '*' r 189
        '*=' r 189
        ',' r 189
        '.' r 189
        '/' r 189
        '/=' r 189
        ':' r 189
        ';' r 189
        '?' r 189
        '[' r 189
        ']' r 189
        '^' r 189
        '^=' r 189
        '|' r 189
        '||' r 189
        '|=' r 189
        '~>' r 189
        '+' r 189
        '++' r 189
        '+=' r 189
        '<' r 189
        '<~' r 189
        '<<' r 189
        '<<=' r 189
        '<=' r 189
        '<>' r 189
        '=' r 189
        '-=' r 189
        '==' r 189
        '>' r 189
        '->' r 189
        '>=' r 189
        '>>' r 189
        '>>=' r 189


State 185
        Prior States: 85

        <Var> ::= Id '=' <Op If> _                                                      <Var> ::= Id '=' <Op If> ^

        ',' r 60
        ';' r 60


State 186
        Prior States: 86

        <Var> ::= Id <Array> '=' _ <Op If>                                              <Var> ::= Id <Array> '=' ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Add> g 168
        <Op And> g 169
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 292
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184


State 187
        Prior States: 87

        <Var Decl> ::= <Mod> <Type> <Var> <Var List> _ ';'                              <Var Decl> ::= <Mod> <Type> <Var> <Var List> ^ ';'

        ';' s 293


State 188
        Prior States: 88

        <Var Item> ::= <Pointers> _ <Var>                                               <Var Item> ::= <Pointers> ^ <Var>
        <Var> ::= _ Id <Array>                                                          <Var> ::= ^ Id <Array>
        <Var> ::= _ Id                                                                  <Var> ::= ^ Id
        <Var> ::= _ Id <Array> '=' <Op If>                                              <Var> ::= ^ Id <Array> '=' <Op If>
        <Var> ::= _ Id '=' <Op If>                                                      <Var> ::= ^ Id '=' <Op If>

        Id s 61
        <Var> g 294


State 189
        Prior States: 88

        <Var List> ::= ',' <Var Item> _ <Var List>                                      <Var List> ::= ',' <Var Item> ^ <Var List>
        <Var List> ::= _ ',' <Var Item> <Var List>                                      <Var List> ::= ^ ',' <Var Item> <Var List>
        <Var List> ::= _                                                                <Var List> ::= ^

        ',' s 88
        <Var List> g 295
        ';' r 64


State 190
        Prior States: 89

        <Var Decl> ::= <Mod> <Var> <Var List> ';' _                                     <Var Decl> ::= <Mod> <Var> <Var List> ';' ^

        (EOF) r 56
        '-' r 56
        '--' r 56
        '!' r 56
        '$' r 56
        '&' r 56
        '(' r 56
        '*' r 56
        ';' r 56
        '@' r 56
        '{' r 56
        '}' r 56
        '~' r 56
        '++' r 56
        '£' r 56
        AH r 56
        AL r 56
        asm r 56
        AX r 56
        BH r 56
        BinaryLiteral r 56
        BL r 56
        bool r 56
        BooleanLiteral r 56
        BP r 56
        break r 56
        BX r 56
        byte r 56
        case r 56
        cdecl r 56
        CH r 56
        CharLiteral r 56
        CL r 56
        const r 56
        continue r 56
        CS r 56
        CX r 56
        DecLiteral r 56
        default r 56
        DH r 56
        DI r 56
        DL r 56
        do r 56
        DS r 56
        DX r 56
        entry r 56
        enum r 56
        ES r 56
        extern r 56
        fastcall r 56
        for r 56
        FS r 56
        goto r 56
        GS r 56
        HexLiteral r 56
        Id r 56
        if r 56
        int r 56
        loop r 56
        namespace r 56
        next r 56
        NullLiteral r 56
        OctLiteral r 56
        override r 56
        private r 56
        return r 56
        sbyte r 56
        SI r 56
        sizeof r 56
        SP r 56
        SS r 56
        static r 56
        stdcall r 56
        string r 56
        StringLiteral r 56
        struct r 56
        switch r 56
        typedef r 56
        uint r 56
        use r 56
        void r 56
        while r 56


State 191
        Prior States: 91

        <Var Decl> ::= <Type> <Var> <Var List> ';' _                                    <Var Decl> ::= <Type> <Var> <Var List> ';' ^

        (EOF) r 55
        '-' r 55
        '--' r 55
        '!' r 55
        '$' r 55
        '&' r 55
        '(' r 55
        '*' r 55
        ';' r 55
        '@' r 55
        '{' r 55
        '}' r 55
        '~' r 55
        '++' r 55
        '£' r 55
        AH r 55
        AL r 55
        asm r 55
        AX r 55
        BH r 55
        BinaryLiteral r 55
        BL r 55
        bool r 55
        BooleanLiteral r 55
        BP r 55
        break r 55
        BX r 55
        byte r 55
        case r 55
        cdecl r 55
        CH r 55
        CharLiteral r 55
        CL r 55
        const r 55
        continue r 55
        CS r 55
        CX r 55
        DecLiteral r 55
        default r 55
        DH r 55
        DI r 55
        DL r 55
        do r 55
        DS r 55
        DX r 55
        entry r 55
        enum r 55
        ES r 55
        extern r 55
        fastcall r 55
        for r 55
        FS r 55
        goto r 55
        GS r 55
        HexLiteral r 55
        Id r 55
        if r 55
        int r 55
        loop r 55
        namespace r 55
        next r 55
        NullLiteral r 55
        OctLiteral r 55
        override r 55
        private r 55
        return r 55
        sbyte r 55
        SI r 55
        sizeof r 55
        SP r 55
        SS r 55
        static r 55
        stdcall r 55
        string r 55
        StringLiteral r 55
        struct r 55
        switch r 55
        typedef r 55
        uint r 55
        use r 55
        void r 55
        while r 55


State 192
        Prior States: 92

        <Func Decl> ::= entry <Func ID> '(' ')' <Block> _                               <Func Decl> ::= entry <Func ID> '(' ')' <Block> ^

        (EOF) r 25
        '@' r 25
        bool r 25
        byte r 25
        cdecl r 25
        const r 25
        entry r 25
        enum r 25
        extern r 25
        fastcall r 25
        int r 25
        namespace r 25
        override r 25
        private r 25
        sbyte r 25
        static r 25
        stdcall r 25
        string r 25
        struct r 25
        typedef r 25
        uint r 25
        use r 25
        void r 25


State 193
        Prior States: 93

        <Func Decl> ::= entry <Func ID> '(' <Params> ')' _ <Block>                      <Func Decl> ::= entry <Func ID> '(' <Params> ')' ^ <Block>
        <Block> ::= _ '{' <Stm List> '}'                                                <Block> ::= ^ '{' <Stm List> '}'

        '{' s 116
        <Block> g 296


State 194
        Prior States: 95

        <Enum Val> ::= Id '=' _ OctLiteral                                              <Enum Val> ::= Id '=' ^ OctLiteral
        <Enum Val> ::= Id '=' _ HexLiteral                                              <Enum Val> ::= Id '=' ^ HexLiteral
        <Enum Val> ::= Id '=' _ DecLiteral                                              <Enum Val> ::= Id '=' ^ DecLiteral

        DecLiteral s 297
        HexLiteral s 298
        OctLiteral s 299


State 195
        Prior States: 96

        <Enum Decl> ::= enum Id '{' <Enum Def> '}' _ ';'                                <Enum Decl> ::= enum Id '{' <Enum Def> '}' ^ ';'

        ';' s 300


State 196
        Prior States: 97

        <Enum Def> ::= <Enum Val> ',' _ <Enum Def>                                      <Enum Def> ::= <Enum Val> ',' ^ <Enum Def>
        <Enum Def> ::= _ <Enum Val> ',' <Enum Def>                                      <Enum Def> ::= ^ <Enum Val> ',' <Enum Def>
        <Enum Def> ::= _ <Enum Val>                                                     <Enum Def> ::= ^ <Enum Val>
        <Enum Val> ::= _ Id                                                             <Enum Val> ::= ^ Id
        <Enum Val> ::= _ Id '=' OctLiteral                                              <Enum Val> ::= ^ Id '=' OctLiteral
        <Enum Val> ::= _ Id '=' HexLiteral                                              <Enum Val> ::= ^ Id '=' HexLiteral
        <Enum Val> ::= _ Id '=' DecLiteral                                              <Enum Val> ::= ^ Id '=' DecLiteral

        Id s 95
        <Enum Def> g 301
        <Enum Val> g 97


State 197
        Prior States: 98

        <Oper Decl> ::= override <Type> operator '-' '(' _ <Params> ')' <Block>         <Oper Decl> ::= override <Type> operator '-' '(' ^ <Params> ')' <Block>
        <Params> ::= _ <Param> ',' <Params>                                             <Params> ::= ^ <Param> ',' <Params>
        <Params> ::= _ <Param>                                                          <Params> ::= ^ <Param>
        <Param> ::= _ const <Type> Id                                                   <Param> ::= ^ const <Type> Id
        <Param> ::= _ <Type> Id                                                         <Param> ::= ^ <Type> Id
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string

        '@' s 1
        bool s 2
        byte s 3
        const s 79
        enum s 47
        int s 10
        sbyte s 14
        string s 17
        struct s 48
        uint s 20
        void s 22
        <Base> g 23
        <Param> g 80
        <Params> g 302
        <Scalar> g 38
        <Type> g 94


State 198
        Prior States: 99

        <Oper Decl> ::= override <Type> operator '!=' '(' _ <Params> ')' <Block>        <Oper Decl> ::= override <Type> operator '!=' '(' ^ <Params> ')' <Block>
        <Params> ::= _ <Param> ',' <Params>                                             <Params> ::= ^ <Param> ',' <Params>
        <Params> ::= _ <Param>                                                          <Params> ::= ^ <Param>
        <Param> ::= _ const <Type> Id                                                   <Param> ::= ^ const <Type> Id
        <Param> ::= _ <Type> Id                                                         <Param> ::= ^ <Type> Id
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string

        '@' s 1
        bool s 2
        byte s 3
        const s 79
        enum s 47
        int s 10
        sbyte s 14
        string s 17
        struct s 48
        uint s 20
        void s 22
        <Base> g 23
        <Param> g 80
        <Params> g 303
        <Scalar> g 38
        <Type> g 94


State 199
        Prior States: 100

        <Oper Decl> ::= override <Type> operator '%' '(' _ <Params> ')' <Block>         <Oper Decl> ::= override <Type> operator '%' '(' ^ <Params> ')' <Block>
        <Params> ::= _ <Param> ',' <Params>                                             <Params> ::= ^ <Param> ',' <Params>
        <Params> ::= _ <Param>                                                          <Params> ::= ^ <Param>
        <Param> ::= _ const <Type> Id                                                   <Param> ::= ^ const <Type> Id
        <Param> ::= _ <Type> Id                                                         <Param> ::= ^ <Type> Id
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string

        '@' s 1
        bool s 2
        byte s 3
        const s 79
        enum s 47
        int s 10
        sbyte s 14
        string s 17
        struct s 48
        uint s 20
        void s 22
        <Base> g 23
        <Param> g 80
        <Params> g 304
        <Scalar> g 38
        <Type> g 94


State 200
        Prior States: 101

        <Oper Decl> ::= override <Type> operator '&' '(' _ <Params> ')' <Block>         <Oper Decl> ::= override <Type> operator '&' '(' ^ <Params> ')' <Block>
        <Params> ::= _ <Param> ',' <Params>                                             <Params> ::= ^ <Param> ',' <Params>
        <Params> ::= _ <Param>                                                          <Params> ::= ^ <Param>
        <Param> ::= _ const <Type> Id                                                   <Param> ::= ^ const <Type> Id
        <Param> ::= _ <Type> Id                                                         <Param> ::= ^ <Type> Id
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string

        '@' s 1
        bool s 2
        byte s 3
        const s 79
        enum s 47
        int s 10
        sbyte s 14
        string s 17
        struct s 48
        uint s 20
        void s 22
        <Base> g 23
        <Param> g 80
        <Params> g 305
        <Scalar> g 38
        <Type> g 94


State 201
        Prior States: 102

        <Oper Decl> ::= override <Type> operator '*' '(' _ <Params> ')' <Block>         <Oper Decl> ::= override <Type> operator '*' '(' ^ <Params> ')' <Block>
        <Params> ::= _ <Param> ',' <Params>                                             <Params> ::= ^ <Param> ',' <Params>
        <Params> ::= _ <Param>                                                          <Params> ::= ^ <Param>
        <Param> ::= _ const <Type> Id                                                   <Param> ::= ^ const <Type> Id
        <Param> ::= _ <Type> Id                                                         <Param> ::= ^ <Type> Id
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string

        '@' s 1
        bool s 2
        byte s 3
        const s 79
        enum s 47
        int s 10
        sbyte s 14
        string s 17
        struct s 48
        uint s 20
        void s 22
        <Base> g 23
        <Param> g 80
        <Params> g 306
        <Scalar> g 38
        <Type> g 94


State 202
        Prior States: 103

        <Oper Decl> ::= override <Type> operator '/' '(' _ <Params> ')' <Block>         <Oper Decl> ::= override <Type> operator '/' '(' ^ <Params> ')' <Block>
        <Params> ::= _ <Param> ',' <Params>                                             <Params> ::= ^ <Param> ',' <Params>
        <Params> ::= _ <Param>                                                          <Params> ::= ^ <Param>
        <Param> ::= _ const <Type> Id                                                   <Param> ::= ^ const <Type> Id
        <Param> ::= _ <Type> Id                                                         <Param> ::= ^ <Type> Id
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string

        '@' s 1
        bool s 2
        byte s 3
        const s 79
        enum s 47
        int s 10
        sbyte s 14
        string s 17
        struct s 48
        uint s 20
        void s 22
        <Base> g 23
        <Param> g 80
        <Params> g 307
        <Scalar> g 38
        <Type> g 94


State 203
        Prior States: 104

        <Oper Decl> ::= override <Type> operator '^' '(' _ <Params> ')' <Block>         <Oper Decl> ::= override <Type> operator '^' '(' ^ <Params> ')' <Block>
        <Params> ::= _ <Param> ',' <Params>                                             <Params> ::= ^ <Param> ',' <Params>
        <Params> ::= _ <Param>                                                          <Params> ::= ^ <Param>
        <Param> ::= _ const <Type> Id                                                   <Param> ::= ^ const <Type> Id
        <Param> ::= _ <Type> Id                                                         <Param> ::= ^ <Type> Id
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string

        '@' s 1
        bool s 2
        byte s 3
        const s 79
        enum s 47
        int s 10
        sbyte s 14
        string s 17
        struct s 48
        uint s 20
        void s 22
        <Base> g 23
        <Param> g 80
        <Params> g 308
        <Scalar> g 38
        <Type> g 94


State 204
        Prior States: 105

        <Oper Decl> ::= override <Type> operator '|' '(' _ <Params> ')' <Block>         <Oper Decl> ::= override <Type> operator '|' '(' ^ <Params> ')' <Block>
        <Params> ::= _ <Param> ',' <Params>                                             <Params> ::= ^ <Param> ',' <Params>
        <Params> ::= _ <Param>                                                          <Params> ::= ^ <Param>
        <Param> ::= _ const <Type> Id                                                   <Param> ::= ^ const <Type> Id
        <Param> ::= _ <Type> Id                                                         <Param> ::= ^ <Type> Id
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string

        '@' s 1
        bool s 2
        byte s 3
        const s 79
        enum s 47
        int s 10
        sbyte s 14
        string s 17
        struct s 48
        uint s 20
        void s 22
        <Base> g 23
        <Param> g 80
        <Params> g 309
        <Scalar> g 38
        <Type> g 94


State 205
        Prior States: 106

        <Oper Decl> ::= override <Type> operator '+' '(' _ <Params> ')' <Block>         <Oper Decl> ::= override <Type> operator '+' '(' ^ <Params> ')' <Block>
        <Params> ::= _ <Param> ',' <Params>                                             <Params> ::= ^ <Param> ',' <Params>
        <Params> ::= _ <Param>                                                          <Params> ::= ^ <Param>
        <Param> ::= _ const <Type> Id                                                   <Param> ::= ^ const <Type> Id
        <Param> ::= _ <Type> Id                                                         <Param> ::= ^ <Type> Id
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string

        '@' s 1
        bool s 2
        byte s 3
        const s 79
        enum s 47
        int s 10
        sbyte s 14
        string s 17
        struct s 48
        uint s 20
        void s 22
        <Base> g 23
        <Param> g 80
        <Params> g 310
        <Scalar> g 38
        <Type> g 94


State 206
        Prior States: 107

        <Oper Decl> ::= override <Type> operator '<' '(' _ <Params> ')' <Block>         <Oper Decl> ::= override <Type> operator '<' '(' ^ <Params> ')' <Block>
        <Params> ::= _ <Param> ',' <Params>                                             <Params> ::= ^ <Param> ',' <Params>
        <Params> ::= _ <Param>                                                          <Params> ::= ^ <Param>
        <Param> ::= _ const <Type> Id                                                   <Param> ::= ^ const <Type> Id
        <Param> ::= _ <Type> Id                                                         <Param> ::= ^ <Type> Id
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string

        '@' s 1
        bool s 2
        byte s 3
        const s 79
        enum s 47
        int s 10
        sbyte s 14
        string s 17
        struct s 48
        uint s 20
        void s 22
        <Base> g 23
        <Param> g 80
        <Params> g 311
        <Scalar> g 38
        <Type> g 94


State 207
        Prior States: 108

        <Oper Decl> ::= override <Type> operator '<=' '(' _ <Params> ')' <Block>        <Oper Decl> ::= override <Type> operator '<=' '(' ^ <Params> ')' <Block>
        <Params> ::= _ <Param> ',' <Params>                                             <Params> ::= ^ <Param> ',' <Params>
        <Params> ::= _ <Param>                                                          <Params> ::= ^ <Param>
        <Param> ::= _ const <Type> Id                                                   <Param> ::= ^ const <Type> Id
        <Param> ::= _ <Type> Id                                                         <Param> ::= ^ <Type> Id
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string

        '@' s 1
        bool s 2
        byte s 3
        const s 79
        enum s 47
        int s 10
        sbyte s 14
        string s 17
        struct s 48
        uint s 20
        void s 22
        <Base> g 23
        <Param> g 80
        <Params> g 312
        <Scalar> g 38
        <Type> g 94


State 208
        Prior States: 109

        <Oper Decl> ::= override <Type> operator '==' '(' _ <Params> ')' <Block>        <Oper Decl> ::= override <Type> operator '==' '(' ^ <Params> ')' <Block>
        <Params> ::= _ <Param> ',' <Params>                                             <Params> ::= ^ <Param> ',' <Params>
        <Params> ::= _ <Param>                                                          <Params> ::= ^ <Param>
        <Param> ::= _ const <Type> Id                                                   <Param> ::= ^ const <Type> Id
        <Param> ::= _ <Type> Id                                                         <Param> ::= ^ <Type> Id
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string

        '@' s 1
        bool s 2
        byte s 3
        const s 79
        enum s 47
        int s 10
        sbyte s 14
        string s 17
        struct s 48
        uint s 20
        void s 22
        <Base> g 23
        <Param> g 80
        <Params> g 313
        <Scalar> g 38
        <Type> g 94


State 209
        Prior States: 110

        <Oper Decl> ::= override <Type> operator '>' '(' _ <Params> ')' <Block>         <Oper Decl> ::= override <Type> operator '>' '(' ^ <Params> ')' <Block>
        <Params> ::= _ <Param> ',' <Params>                                             <Params> ::= ^ <Param> ',' <Params>
        <Params> ::= _ <Param>                                                          <Params> ::= ^ <Param>
        <Param> ::= _ const <Type> Id                                                   <Param> ::= ^ const <Type> Id
        <Param> ::= _ <Type> Id                                                         <Param> ::= ^ <Type> Id
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string

        '@' s 1
        bool s 2
        byte s 3
        const s 79
        enum s 47
        int s 10
        sbyte s 14
        string s 17
        struct s 48
        uint s 20
        void s 22
        <Base> g 23
        <Param> g 80
        <Params> g 314
        <Scalar> g 38
        <Type> g 94


State 210
        Prior States: 111

        <Oper Decl> ::= override <Type> operator '>=' '(' _ <Params> ')' <Block>        <Oper Decl> ::= override <Type> operator '>=' '(' ^ <Params> ')' <Block>
        <Params> ::= _ <Param> ',' <Params>                                             <Params> ::= ^ <Param> ',' <Params>
        <Params> ::= _ <Param>                                                          <Params> ::= ^ <Param>
        <Param> ::= _ const <Type> Id                                                   <Param> ::= ^ const <Type> Id
        <Param> ::= _ <Type> Id                                                         <Param> ::= ^ <Type> Id
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string

        '@' s 1
        bool s 2
        byte s 3
        const s 79
        enum s 47
        int s 10
        sbyte s 14
        string s 17
        struct s 48
        uint s 20
        void s 22
        <Base> g 23
        <Param> g 80
        <Params> g 315
        <Scalar> g 38
        <Type> g 94


State 211
        Prior States: 112

        <Struct Decl> ::= struct Id '{' <Struct Def> '}' _ ';'                          <Struct Decl> ::= struct Id '{' <Struct Def> '}' ^ ';'

        ';' s 316


State 212
        Prior States: 113

        <Struct Def> ::= <Var Decl> <Struct Def> _                                      <Struct Def> ::= <Var Decl> <Struct Def> ^

        '}' r 52


State 213
        Prior States: 116, 217, 222, 230, 434, 436, 455, 465, 467, 469, 470, 471, 479, 483

        <Normal Stm> ::= ';' _                                                          <Normal Stm> ::= ';' ^

        '-' r 115
        '--' r 115
        '!' r 115
        '$' r 115
        '&' r 115
        '(' r 115
        '*' r 115
        ';' r 115
        '@' r 115
        '{' r 115
        '}' r 115
        '~' r 115
        '++' r 115
        '£' r 115
        AH r 115
        AL r 115
        asm r 115
        AX r 115
        BH r 115
        BinaryLiteral r 115
        BL r 115
        bool r 115
        BooleanLiteral r 115
        BP r 115
        break r 115
        BX r 115
        byte r 115
        case r 115
        CH r 115
        CharLiteral r 115
        CL r 115
        const r 115
        continue r 115
        CS r 115
        CX r 115
        DecLiteral r 115
        default r 115
        DH r 115
        DI r 115
        DL r 115
        do r 115
        DS r 115
        DX r 115
        else r 115
        enum r 115
        ES r 115
        extern r 115
        for r 115
        FS r 115
        goto r 115
        GS r 115
        HexLiteral r 115
        Id r 115
        if r 115
        int r 115
        loop r 115
        next r 115
        NullLiteral r 115
        OctLiteral r 115
        private r 115
        return r 115
        sbyte r 115
        SI r 115
        sizeof r 115
        SP r 115
        SS r 115
        static r 115
        string r 115
        StringLiteral r 115
        struct r 115
        switch r 115
        uint r 115
        void r 115
        while r 115


State 214
        Prior States: 116, 217, 222, 230, 434, 436, 455, 465, 467, 469, 470, 471, 479, 483

        <Statement> ::= asm _ '{' <INSTRUCTIONS> '}'                                    <Statement> ::= asm ^ '{' <INSTRUCTIONS> '}'

        '{' s 317


State 215
        Prior States: 116, 217, 222, 230, 434, 436, 455, 465, 467, 469, 470, 471, 479, 483

        <Normal Stm> ::= break _ ';'                                                    <Normal Stm> ::= break ^ ';'

        ';' s 318


State 216
        Prior States: 116, 217, 222, 230, 434, 436, 455, 465, 467, 469, 470, 471, 479, 483

        <Normal Stm> ::= continue _ ';'                                                 <Normal Stm> ::= continue ^ ';'

        ';' s 319


State 217
        Prior States: 116, 217, 222, 230, 434, 436, 455, 465, 467, 469, 470, 471, 479, 483

        <Normal Stm> ::= do _ <Statement> while '(' <Expression> ')'                    <Normal Stm> ::= do ^ <Statement> while '(' <Expression> ')'
        <Var Decl> ::= _ <Mod> <Type> <Var> <Var List> ';'                              <Var Decl> ::= ^ <Mod> <Type> <Var> <Var List> ';'
        <Var Decl> ::= _ <Type> <Var> <Var List> ';'                                    <Var Decl> ::= ^ <Type> <Var> <Var List> ';'
        <Var Decl> ::= _ <Mod> <Var> <Var List> ';'                                     <Var Decl> ::= ^ <Mod> <Var> <Var List> ';'
        <Mod> ::= _ extern                                                              <Mod> ::= ^ extern
        <Mod> ::= _ static                                                              <Mod> ::= ^ static
        <Mod> ::= _ const                                                               <Mod> ::= ^ const
        <Mod> ::= _ private                                                             <Mod> ::= ^ private
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string
        <Statement> ::= _ <Var Decl>                                                    <Statement> ::= ^ <Var Decl>
        <Statement> ::= _ Id ':'                                                        <Statement> ::= ^ Id ':'
        <Statement> ::= _ if '(' <Expression> ')' <Statement>                           <Statement> ::= ^ if '(' <Expression> ')' <Statement>
        <Statement> ::= _ if '(' <Expression> ')' <Then Stm> else <Statement>           <Statement> ::= ^ if '(' <Expression> ')' <Then Stm> else <Statement>
        <Statement> ::= _ while '(' <Expression> ')' <Statement>                        <Statement> ::= ^ while '(' <Expression> ')' <Statement>
        <Statement> ::= _ for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Statement>             <Statement> ::= ^ for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Statement>
        <Statement> ::= _ asm '{' <INSTRUCTIONS> '}'                                    <Statement> ::= ^ asm '{' <INSTRUCTIONS> '}'
        <Statement> ::= _ loop <Statement>                                              <Statement> ::= ^ loop <Statement>
        <Statement> ::= _ <Normal Stm>                                                  <Statement> ::= ^ <Normal Stm>
        <Normal Stm> ::= _ do <Statement> while '(' <Expression> ')'                    <Normal Stm> ::= ^ do <Statement> while '(' <Expression> ')'
        <Normal Stm> ::= _ switch '(' <Expression> ')' '{' <Case Stms> '}'              <Normal Stm> ::= ^ switch '(' <Expression> ')' '{' <Case Stms> '}'
        <Normal Stm> ::= _ <Block>                                                      <Normal Stm> ::= ^ <Block>
        <Normal Stm> ::= _ <Expression> ';'                                             <Normal Stm> ::= ^ <Expression> ';'
        <Normal Stm> ::= _ goto Id ';'                                                  <Normal Stm> ::= ^ goto Id ';'
        <Normal Stm> ::= _ break ';'                                                    <Normal Stm> ::= ^ break ';'
        <Normal Stm> ::= _ continue ';'                                                 <Normal Stm> ::= ^ continue ';'
        <Normal Stm> ::= _ goto case DecLiteral ';'                                     <Normal Stm> ::= ^ goto case DecLiteral ';'
        <Normal Stm> ::= _ goto default ';'                                             <Normal Stm> ::= ^ goto default ';'
        <Normal Stm> ::= _ next ';'                                                     <Normal Stm> ::= ^ next ';'
        <Normal Stm> ::= _ return <Expression> ';'                                      <Normal Stm> ::= ^ return <Expression> ';'
        <Normal Stm> ::= _ ';'                                                          <Normal Stm> ::= ^ ';'
        <Block> ::= _ '{' <Stm List> '}'                                                <Block> ::= ^ '{' <Stm List> '}'
        <Expression> ::= _ <Op Assign>                                                  <Expression> ::= ^ <Op Assign>
        <Op Assign> ::= _ <Op If> '=' <Op Assign>                                       <Op Assign> ::= ^ <Op If> '=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<>' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '<>' <Op Assign>
        <Op Assign> ::= _ <Op If> '+=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '+=' <Op Assign>
        <Op Assign> ::= _ <Op If> '-=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '-=' <Op Assign>
        <Op Assign> ::= _ <Op If> '*=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '*=' <Op Assign>
        <Op Assign> ::= _ <Op If> '/=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '/=' <Op Assign>
        <Op Assign> ::= _ <Op If> '^=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '^=' <Op Assign>
        <Op Assign> ::= _ <Op If> '&=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '&=' <Op Assign>
        <Op Assign> ::= _ <Op If> '|=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '|=' <Op Assign>
        <Op Assign> ::= _ <Op If> '>>=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '>>=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<<=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '<<=' <Op Assign>
        <Op Assign> ::= _ <Op If>                                                       <Op Assign> ::= ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        ';' s 213
        '@' s 1
        '{' s 116
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        asm s 214
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        bool s 2
        BooleanLiteral s 141
        BP s 142
        break s 215
        BX s 143
        byte s 3
        CH s 144
        CharLiteral s 145
        CL s 146
        const s 5
        continue s 216
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        do s 217
        DS s 153
        DX s 154
        enum s 47
        ES s 155
        extern s 8
        for s 218
        FS s 156
        goto s 219
        GS s 157
        HexLiteral s 158
        Id s 220
        if s 221
        int s 10
        loop s 222
        next s 223
        NullLiteral s 160
        OctLiteral s 161
        private s 13
        return s 224
        sbyte s 14
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        static s 15
        string s 17
        StringLiteral s 166
        struct s 48
        switch s 225
        uint s 20
        void s 22
        while s 226
        <Base> g 23
        <Block> g 227
        <Expression> g 228
        <Mod> g 35
        <Normal Stm> g 229
        <Op Add> g 168
        <Op And> g 169
        <Op Assign> g 170
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 176
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Scalar> g 38
        <Statement> g 320
        <Type> g 40
        <Value> g 184
        <Var Decl> g 232


State 218
        Prior States: 116, 217, 222, 230, 436, 455, 465, 467, 471

        <Statement> ::= for _ '(' <Arg> ';' <Arg> ';' <Arg> ')' <Statement>             <Statement> ::= for ^ '(' <Arg> ';' <Arg> ';' <Arg> ')' <Statement>

        '(' s 321


State 219
        Prior States: 116, 217, 222, 230, 434, 436, 455, 465, 467, 469, 470, 471, 479, 483

        <Normal Stm> ::= goto _ Id ';'                                                  <Normal Stm> ::= goto ^ Id ';'
        <Normal Stm> ::= goto _ case DecLiteral ';'                                     <Normal Stm> ::= goto ^ case DecLiteral ';'
        <Normal Stm> ::= goto _ default ';'                                             <Normal Stm> ::= goto ^ default ';'

        case s 322
        default s 323
        Id s 324


State 220
        Prior States: 116, 217, 222, 230, 434, 436, 455, 465, 467, 469, 470, 471, 479, 483

        <Statement> ::= Id _ ':'                                                        <Statement> ::= Id ^ ':'
        <Op Pointer> ::= Id _ '::' <Value>                                              <Op Pointer> ::= Id ^ '::' <Value>
        <Value> ::= Id _ '(' <PARAM EXPR> ')'                                           <Value> ::= Id ^ '(' <PARAM EXPR> ')'
        <Value> ::= Id _ '(' ')'                                                        <Value> ::= Id ^ '(' ')'
        <Value> ::= Id _                                                                <Value> ::= Id ^

        '(' s 251
        ':' s 325
        '::' s 252
        '-' r 200
        '--' r 200
        '!=' r 200
        '%' r 200
        '&' r 200
        '&&' r 200
        '&=' r 200
        '*' r 200
        '*=' r 200
        '.' r 200
        '/' r 200
        '/=' r 200
        ';' r 200
        '?' r 200
        '[' r 200
        '^' r 200
        '^=' r 200
        '|' r 200
        '||' r 200
        '|=' r 200
        '~>' r 200
        '+' r 200
        '++' r 200
        '+=' r 200
        '<' r 200
        '<~' r 200
        '<<' r 200
        '<<=' r 200
        '<=' r 200
        '<>' r 200
        '=' r 200
        '-=' r 200
        '==' r 200
        '>' r 200
        '->' r 200
        '>=' r 200
        '>>' r 200
        '>>=' r 200


State 221
        Prior States: 116, 217, 222, 230, 436, 455, 465, 467, 471

        <Statement> ::= if _ '(' <Expression> ')' <Statement>                           <Statement> ::= if ^ '(' <Expression> ')' <Statement>
        <Statement> ::= if _ '(' <Expression> ')' <Then Stm> else <Statement>           <Statement> ::= if ^ '(' <Expression> ')' <Then Stm> else <Statement>

        '(' s 326


State 222
        Prior States: 116, 217, 222, 230, 434, 436, 455, 465, 467, 469, 470, 471, 479, 483

        <Statement> ::= loop _ <Statement>                                              <Statement> ::= loop ^ <Statement>
        <Var Decl> ::= _ <Mod> <Type> <Var> <Var List> ';'                              <Var Decl> ::= ^ <Mod> <Type> <Var> <Var List> ';'
        <Var Decl> ::= _ <Type> <Var> <Var List> ';'                                    <Var Decl> ::= ^ <Type> <Var> <Var List> ';'
        <Var Decl> ::= _ <Mod> <Var> <Var List> ';'                                     <Var Decl> ::= ^ <Mod> <Var> <Var List> ';'
        <Mod> ::= _ extern                                                              <Mod> ::= ^ extern
        <Mod> ::= _ static                                                              <Mod> ::= ^ static
        <Mod> ::= _ const                                                               <Mod> ::= ^ const
        <Mod> ::= _ private                                                             <Mod> ::= ^ private
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string
        <Statement> ::= _ <Var Decl>                                                    <Statement> ::= ^ <Var Decl>
        <Statement> ::= _ Id ':'                                                        <Statement> ::= ^ Id ':'
        <Statement> ::= _ if '(' <Expression> ')' <Statement>                           <Statement> ::= ^ if '(' <Expression> ')' <Statement>
        <Statement> ::= _ if '(' <Expression> ')' <Then Stm> else <Statement>           <Statement> ::= ^ if '(' <Expression> ')' <Then Stm> else <Statement>
        <Statement> ::= _ while '(' <Expression> ')' <Statement>                        <Statement> ::= ^ while '(' <Expression> ')' <Statement>
        <Statement> ::= _ for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Statement>             <Statement> ::= ^ for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Statement>
        <Statement> ::= _ asm '{' <INSTRUCTIONS> '}'                                    <Statement> ::= ^ asm '{' <INSTRUCTIONS> '}'
        <Statement> ::= _ loop <Statement>                                              <Statement> ::= ^ loop <Statement>
        <Statement> ::= _ <Normal Stm>                                                  <Statement> ::= ^ <Normal Stm>
        <Normal Stm> ::= _ do <Statement> while '(' <Expression> ')'                    <Normal Stm> ::= ^ do <Statement> while '(' <Expression> ')'
        <Normal Stm> ::= _ switch '(' <Expression> ')' '{' <Case Stms> '}'              <Normal Stm> ::= ^ switch '(' <Expression> ')' '{' <Case Stms> '}'
        <Normal Stm> ::= _ <Block>                                                      <Normal Stm> ::= ^ <Block>
        <Normal Stm> ::= _ <Expression> ';'                                             <Normal Stm> ::= ^ <Expression> ';'
        <Normal Stm> ::= _ goto Id ';'                                                  <Normal Stm> ::= ^ goto Id ';'
        <Normal Stm> ::= _ break ';'                                                    <Normal Stm> ::= ^ break ';'
        <Normal Stm> ::= _ continue ';'                                                 <Normal Stm> ::= ^ continue ';'
        <Normal Stm> ::= _ goto case DecLiteral ';'                                     <Normal Stm> ::= ^ goto case DecLiteral ';'
        <Normal Stm> ::= _ goto default ';'                                             <Normal Stm> ::= ^ goto default ';'
        <Normal Stm> ::= _ next ';'                                                     <Normal Stm> ::= ^ next ';'
        <Normal Stm> ::= _ return <Expression> ';'                                      <Normal Stm> ::= ^ return <Expression> ';'
        <Normal Stm> ::= _ ';'                                                          <Normal Stm> ::= ^ ';'
        <Block> ::= _ '{' <Stm List> '}'                                                <Block> ::= ^ '{' <Stm List> '}'
        <Expression> ::= _ <Op Assign>                                                  <Expression> ::= ^ <Op Assign>
        <Op Assign> ::= _ <Op If> '=' <Op Assign>                                       <Op Assign> ::= ^ <Op If> '=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<>' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '<>' <Op Assign>
        <Op Assign> ::= _ <Op If> '+=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '+=' <Op Assign>
        <Op Assign> ::= _ <Op If> '-=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '-=' <Op Assign>
        <Op Assign> ::= _ <Op If> '*=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '*=' <Op Assign>
        <Op Assign> ::= _ <Op If> '/=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '/=' <Op Assign>
        <Op Assign> ::= _ <Op If> '^=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '^=' <Op Assign>
        <Op Assign> ::= _ <Op If> '&=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '&=' <Op Assign>
        <Op Assign> ::= _ <Op If> '|=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '|=' <Op Assign>
        <Op Assign> ::= _ <Op If> '>>=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '>>=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<<=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '<<=' <Op Assign>
        <Op Assign> ::= _ <Op If>                                                       <Op Assign> ::= ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        ';' s 213
        '@' s 1
        '{' s 116
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        asm s 214
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        bool s 2
        BooleanLiteral s 141
        BP s 142
        break s 215
        BX s 143
        byte s 3
        CH s 144
        CharLiteral s 145
        CL s 146
        const s 5
        continue s 216
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        do s 217
        DS s 153
        DX s 154
        enum s 47
        ES s 155
        extern s 8
        for s 218
        FS s 156
        goto s 219
        GS s 157
        HexLiteral s 158
        Id s 220
        if s 221
        int s 10
        loop s 222
        next s 223
        NullLiteral s 160
        OctLiteral s 161
        private s 13
        return s 224
        sbyte s 14
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        static s 15
        string s 17
        StringLiteral s 166
        struct s 48
        switch s 225
        uint s 20
        void s 22
        while s 226
        <Base> g 23
        <Block> g 227
        <Expression> g 228
        <Mod> g 35
        <Normal Stm> g 229
        <Op Add> g 168
        <Op And> g 169
        <Op Assign> g 170
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 176
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Scalar> g 38
        <Statement> g 327
        <Type> g 40
        <Value> g 184
        <Var Decl> g 232


State 223
        Prior States: 116, 217, 222, 230, 434, 436, 455, 465, 467, 469, 470, 471, 479, 483

        <Normal Stm> ::= next _ ';'                                                     <Normal Stm> ::= next ^ ';'

        ';' s 328


State 224
        Prior States: 116, 217, 222, 230, 434, 436, 455, 465, 467, 469, 470, 471, 479, 483

        <Normal Stm> ::= return _ <Expression> ';'                                      <Normal Stm> ::= return ^ <Expression> ';'
        <Expression> ::= _ <Op Assign>                                                  <Expression> ::= ^ <Op Assign>
        <Op Assign> ::= _ <Op If> '=' <Op Assign>                                       <Op Assign> ::= ^ <Op If> '=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<>' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '<>' <Op Assign>
        <Op Assign> ::= _ <Op If> '+=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '+=' <Op Assign>
        <Op Assign> ::= _ <Op If> '-=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '-=' <Op Assign>
        <Op Assign> ::= _ <Op If> '*=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '*=' <Op Assign>
        <Op Assign> ::= _ <Op If> '/=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '/=' <Op Assign>
        <Op Assign> ::= _ <Op If> '^=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '^=' <Op Assign>
        <Op Assign> ::= _ <Op If> '&=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '&=' <Op Assign>
        <Op Assign> ::= _ <Op If> '|=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '|=' <Op Assign>
        <Op Assign> ::= _ <Op If> '>>=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '>>=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<<=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '<<=' <Op Assign>
        <Op Assign> ::= _ <Op If>                                                       <Op Assign> ::= ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Expression> g 329
        <Op Add> g 168
        <Op And> g 169
        <Op Assign> g 170
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 176
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184


State 225
        Prior States: 116, 217, 222, 230, 434, 436, 455, 465, 467, 469, 470, 471, 479, 483

        <Normal Stm> ::= switch _ '(' <Expression> ')' '{' <Case Stms> '}'              <Normal Stm> ::= switch ^ '(' <Expression> ')' '{' <Case Stms> '}'

        '(' s 330


State 226
        Prior States: 116, 217, 222, 230, 436, 455, 465, 467, 471

        <Statement> ::= while _ '(' <Expression> ')' <Statement>                        <Statement> ::= while ^ '(' <Expression> ')' <Statement>

        '(' s 331


State 227
        Prior States: 116, 217, 222, 230, 434, 436, 455, 465, 467, 469, 470, 471, 479, 483

        <Normal Stm> ::= <Block> _                                                      <Normal Stm> ::= <Block> ^

        '-' r 106
        '--' r 106
        '!' r 106
        '$' r 106
        '&' r 106
        '(' r 106
        '*' r 106
        ';' r 106
        '@' r 106
        '{' r 106
        '}' r 106
        '~' r 106
        '++' r 106
        '£' r 106
        AH r 106
        AL r 106
        asm r 106
        AX r 106
        BH r 106
        BinaryLiteral r 106
        BL r 106
        bool r 106
        BooleanLiteral r 106
        BP r 106
        break r 106
        BX r 106
        byte r 106
        case r 106
        CH r 106
        CharLiteral r 106
        CL r 106
        const r 106
        continue r 106
        CS r 106
        CX r 106
        DecLiteral r 106
        default r 106
        DH r 106
        DI r 106
        DL r 106
        do r 106
        DS r 106
        DX r 106
        else r 106
        enum r 106
        ES r 106
        extern r 106
        for r 106
        FS r 106
        goto r 106
        GS r 106
        HexLiteral r 106
        Id r 106
        if r 106
        int r 106
        loop r 106
        next r 106
        NullLiteral r 106
        OctLiteral r 106
        private r 106
        return r 106
        sbyte r 106
        SI r 106
        sizeof r 106
        SP r 106
        SS r 106
        static r 106
        string r 106
        StringLiteral r 106
        struct r 106
        switch r 106
        uint r 106
        void r 106
        while r 106


State 228
        Prior States: 116, 217, 222, 230, 434, 436, 455, 465, 467, 469, 470, 471, 479, 483

        <Normal Stm> ::= <Expression> _ ';'                                             <Normal Stm> ::= <Expression> ^ ';'

        ';' s 332


State 229
        Prior States: 116, 217, 222, 230, 436, 455, 465, 467, 471

        <Statement> ::= <Normal Stm> _                                                  <Statement> ::= <Normal Stm> ^

        '-' r 99
        '--' r 99
        '!' r 99
        '$' r 99
        '&' r 99
        '(' r 99
        '*' r 99
        ';' r 99
        '@' r 99
        '{' r 99
        '}' r 99
        '~' r 99
        '++' r 99
        '£' r 99
        AH r 99
        AL r 99
        asm r 99
        AX r 99
        BH r 99
        BinaryLiteral r 99
        BL r 99
        bool r 99
        BooleanLiteral r 99
        BP r 99
        break r 99
        BX r 99
        byte r 99
        case r 99
        CH r 99
        CharLiteral r 99
        CL r 99
        const r 99
        continue r 99
        CS r 99
        CX r 99
        DecLiteral r 99
        default r 99
        DH r 99
        DI r 99
        DL r 99
        do r 99
        DS r 99
        DX r 99
        enum r 99
        ES r 99
        extern r 99
        for r 99
        FS r 99
        goto r 99
        GS r 99
        HexLiteral r 99
        Id r 99
        if r 99
        int r 99
        loop r 99
        next r 99
        NullLiteral r 99
        OctLiteral r 99
        private r 99
        return r 99
        sbyte r 99
        SI r 99
        sizeof r 99
        SP r 99
        SS r 99
        static r 99
        string r 99
        StringLiteral r 99
        struct r 99
        switch r 99
        uint r 99
        void r 99
        while r 99


State 230
        Prior States: 116, 230, 465, 471

        <Stm List> ::= <Statement> _ <Stm List>                                         <Stm List> ::= <Statement> ^ <Stm List>
        <Var Decl> ::= _ <Mod> <Type> <Var> <Var List> ';'                              <Var Decl> ::= ^ <Mod> <Type> <Var> <Var List> ';'
        <Var Decl> ::= _ <Type> <Var> <Var List> ';'                                    <Var Decl> ::= ^ <Type> <Var> <Var List> ';'
        <Var Decl> ::= _ <Mod> <Var> <Var List> ';'                                     <Var Decl> ::= ^ <Mod> <Var> <Var List> ';'
        <Mod> ::= _ extern                                                              <Mod> ::= ^ extern
        <Mod> ::= _ static                                                              <Mod> ::= ^ static
        <Mod> ::= _ const                                                               <Mod> ::= ^ const
        <Mod> ::= _ private                                                             <Mod> ::= ^ private
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string
        <Statement> ::= _ <Var Decl>                                                    <Statement> ::= ^ <Var Decl>
        <Statement> ::= _ Id ':'                                                        <Statement> ::= ^ Id ':'
        <Statement> ::= _ if '(' <Expression> ')' <Statement>                           <Statement> ::= ^ if '(' <Expression> ')' <Statement>
        <Statement> ::= _ if '(' <Expression> ')' <Then Stm> else <Statement>           <Statement> ::= ^ if '(' <Expression> ')' <Then Stm> else <Statement>
        <Statement> ::= _ while '(' <Expression> ')' <Statement>                        <Statement> ::= ^ while '(' <Expression> ')' <Statement>
        <Statement> ::= _ for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Statement>             <Statement> ::= ^ for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Statement>
        <Statement> ::= _ asm '{' <INSTRUCTIONS> '}'                                    <Statement> ::= ^ asm '{' <INSTRUCTIONS> '}'
        <Statement> ::= _ loop <Statement>                                              <Statement> ::= ^ loop <Statement>
        <Statement> ::= _ <Normal Stm>                                                  <Statement> ::= ^ <Normal Stm>
        <Normal Stm> ::= _ do <Statement> while '(' <Expression> ')'                    <Normal Stm> ::= ^ do <Statement> while '(' <Expression> ')'
        <Normal Stm> ::= _ switch '(' <Expression> ')' '{' <Case Stms> '}'              <Normal Stm> ::= ^ switch '(' <Expression> ')' '{' <Case Stms> '}'
        <Normal Stm> ::= _ <Block>                                                      <Normal Stm> ::= ^ <Block>
        <Normal Stm> ::= _ <Expression> ';'                                             <Normal Stm> ::= ^ <Expression> ';'
        <Normal Stm> ::= _ goto Id ';'                                                  <Normal Stm> ::= ^ goto Id ';'
        <Normal Stm> ::= _ break ';'                                                    <Normal Stm> ::= ^ break ';'
        <Normal Stm> ::= _ continue ';'                                                 <Normal Stm> ::= ^ continue ';'
        <Normal Stm> ::= _ goto case DecLiteral ';'                                     <Normal Stm> ::= ^ goto case DecLiteral ';'
        <Normal Stm> ::= _ goto default ';'                                             <Normal Stm> ::= ^ goto default ';'
        <Normal Stm> ::= _ next ';'                                                     <Normal Stm> ::= ^ next ';'
        <Normal Stm> ::= _ return <Expression> ';'                                      <Normal Stm> ::= ^ return <Expression> ';'
        <Normal Stm> ::= _ ';'                                                          <Normal Stm> ::= ^ ';'
        <Block> ::= _ '{' <Stm List> '}'                                                <Block> ::= ^ '{' <Stm List> '}'
        <Stm List> ::= _ <Statement> <Stm List>                                         <Stm List> ::= ^ <Statement> <Stm List>
        <Stm List> ::= _                                                                <Stm List> ::= ^
        <Expression> ::= _ <Op Assign>                                                  <Expression> ::= ^ <Op Assign>
        <Op Assign> ::= _ <Op If> '=' <Op Assign>                                       <Op Assign> ::= ^ <Op If> '=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<>' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '<>' <Op Assign>
        <Op Assign> ::= _ <Op If> '+=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '+=' <Op Assign>
        <Op Assign> ::= _ <Op If> '-=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '-=' <Op Assign>
        <Op Assign> ::= _ <Op If> '*=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '*=' <Op Assign>
        <Op Assign> ::= _ <Op If> '/=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '/=' <Op Assign>
        <Op Assign> ::= _ <Op If> '^=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '^=' <Op Assign>
        <Op Assign> ::= _ <Op If> '&=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '&=' <Op Assign>
        <Op Assign> ::= _ <Op If> '|=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '|=' <Op Assign>
        <Op Assign> ::= _ <Op If> '>>=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '>>=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<<=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '<<=' <Op Assign>
        <Op Assign> ::= _ <Op If>                                                       <Op Assign> ::= ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        ';' s 213
        '@' s 1
        '{' s 116
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        asm s 214
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        bool s 2
        BooleanLiteral s 141
        BP s 142
        break s 215
        BX s 143
        byte s 3
        CH s 144
        CharLiteral s 145
        CL s 146
        const s 5
        continue s 216
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        do s 217
        DS s 153
        DX s 154
        enum s 47
        ES s 155
        extern s 8
        for s 218
        FS s 156
        goto s 219
        GS s 157
        HexLiteral s 158
        Id s 220
        if s 221
        int s 10
        loop s 222
        next s 223
        NullLiteral s 160
        OctLiteral s 161
        private s 13
        return s 224
        sbyte s 14
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        static s 15
        string s 17
        StringLiteral s 166
        struct s 48
        switch s 225
        uint s 20
        void s 22
        while s 226
        <Base> g 23
        <Block> g 227
        <Expression> g 228
        <Mod> g 35
        <Normal Stm> g 229
        <Op Add> g 168
        <Op And> g 169
        <Op Assign> g 170
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 176
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Scalar> g 38
        <Statement> g 230
        <Stm List> g 333
        <Type> g 40
        <Value> g 184
        <Var Decl> g 232
        '}' r 123
        case r 123
        default r 123


State 231
        Prior States: 116

        <Block> ::= '{' <Stm List> _ '}'                                                <Block> ::= '{' <Stm List> ^ '}'

        '}' s 334


State 232
        Prior States: 116, 217, 222, 230, 434, 436, 455, 465, 467, 469, 470, 471, 479, 483

        <Statement> ::= <Var Decl> _                                                    <Statement> ::= <Var Decl> ^

        '-' r 91
        '--' r 91
        '!' r 91
        '$' r 91
        '&' r 91
        '(' r 91
        '*' r 91
        ';' r 91
        '@' r 91
        '{' r 91
        '}' r 91
        '~' r 91
        '++' r 91
        '£' r 91
        AH r 91
        AL r 91
        asm r 91
        AX r 91
        BH r 91
        BinaryLiteral r 91
        BL r 91
        bool r 91
        BooleanLiteral r 91
        BP r 91
        break r 91
        BX r 91
        byte r 91
        case r 91
        CH r 91
        CharLiteral r 91
        CL r 91
        const r 91
        continue r 91
        CS r 91
        CX r 91
        DecLiteral r 91
        default r 91
        DH r 91
        DI r 91
        DL r 91
        do r 91
        DS r 91
        DX r 91
        enum r 91
        ES r 91
        extern r 91
        for r 91
        FS r 91
        goto r 91
        GS r 91
        HexLiteral r 91
        Id r 91
        if r 91
        int r 91
        loop r 91
        next r 91
        NullLiteral r 91
        OctLiteral r 91
        private r 91
        return r 91
        sbyte r 91
        SI r 91
        sizeof r 91
        SP r 91
        SS r 91
        static r 91
        string r 91
        StringLiteral r 91
        struct r 91
        switch r 91
        uint r 91
        void r 91
        while r 91


State 233
        Prior States: 118

        <Param> ::= const <Type> Id _                                                   <Param> ::= const <Type> Id ^

        ')' r 42
        ',' r 42


State 234
        Prior States: 119

        <Params> ::= <Param> ',' <Params> _                                             <Params> ::= <Param> ',' <Params> ^

        ')' r 40


State 235
        Prior States: 120

        <Func Proto> ::= <Func ID> '(' <Params> ')' ';' _                               <Func Proto> ::= <Func ID> '(' <Params> ')' ';' ^

        (EOF) r 20
        '@' r 20
        bool r 20
        byte r 20
        cdecl r 20
        const r 20
        entry r 20
        enum r 20
        extern r 20
        fastcall r 20
        int r 20
        namespace r 20
        override r 20
        private r 20
        sbyte r 20
        static r 20
        stdcall r 20
        string r 20
        struct r 20
        typedef r 20
        uint r 20
        use r 20
        void r 20


State 236
        Prior States: 120

        <Func Decl> ::= <Func ID> '(' <Params> ')' <Block> _                            <Func Decl> ::= <Func ID> '(' <Params> ')' <Block> ^

        (EOF) r 22
        '@' r 22
        bool r 22
        byte r 22
        cdecl r 22
        const r 22
        entry r 22
        enum r 22
        extern r 22
        fastcall r 22
        int r 22
        namespace r 22
        override r 22
        private r 22
        sbyte r 22
        static r 22
        stdcall r 22
        string r 22
        struct r 22
        typedef r 22
        uint r 22
        use r 22
        void r 22


State 237
        Prior States: 121

        <Types> ::= <Type> _ ',' <Types>                                                <Types> ::= <Type> ^ ',' <Types>
        <Types> ::= <Type> _                                                            <Types> ::= <Type> ^

        ',' s 121
        ')' r 45


State 238
        Prior States: 121

        <Types> ::= <Type> ',' <Types> _                                                <Types> ::= <Type> ',' <Types> ^

        ')' r 44


State 239
        Prior States: 123

        <Func Proto> ::= <Func ID> '(' <Types> ')' ';' _                                <Func Proto> ::= <Func ID> '(' <Types> ')' ';' ^

        (EOF) r 19
        '@' r 19
        bool r 19
        byte r 19
        cdecl r 19
        const r 19
        entry r 19
        enum r 19
        extern r 19
        fastcall r 19
        int r 19
        namespace r 19
        override r 19
        private r 19
        sbyte r 19
        static r 19
        stdcall r 19
        string r 19
        struct r 19
        typedef r 19
        uint r 19
        use r 19
        void r 19


State 240
        Prior States: 124

        <Op Unary> ::= '-' <Op Unary> _                                                 <Op Unary> ::= '-' <Op Unary> ^

        '-' r 172
        '!=' r 172
        '%' r 172
        '&' r 172
        '&&' r 172
        '&=' r 172
        ')' r 172
        '*' r 172
        '*=' r 172
        ',' r 172
        '/' r 172
        '/=' r 172
        ':' r 172
        ';' r 172
        '?' r 172
        ']' r 172
        '^' r 172
        '^=' r 172
        '|' r 172
        '||' r 172
        '|=' r 172
        '~>' r 172
        '+' r 172
        '+=' r 172
        '<' r 172
        '<~' r 172
        '<<' r 172
        '<<=' r 172
        '<=' r 172
        '<>' r 172
        '=' r 172
        '-=' r 172
        '==' r 172
        '>' r 172
        '>=' r 172
        '>>' r 172
        '>>=' r 172


State 241
        Prior States: 125

        <Op Unary> ::= '--' <Op Unary> _                                                <Op Unary> ::= '--' <Op Unary> ^

        '-' r 176
        '!=' r 176
        '%' r 176
        '&' r 176
        '&&' r 176
        '&=' r 176
        ')' r 176
        '*' r 176
        '*=' r 176
        ',' r 176
        '/' r 176
        '/=' r 176
        ':' r 176
        ';' r 176
        '?' r 176
        ']' r 176
        '^' r 176
        '^=' r 176
        '|' r 176
        '||' r 176
        '|=' r 176
        '~>' r 176
        '+' r 176
        '+=' r 176
        '<' r 176
        '<~' r 176
        '<<' r 176
        '<<=' r 176
        '<=' r 176
        '<>' r 176
        '=' r 176
        '-=' r 176
        '==' r 176
        '>' r 176
        '>=' r 176
        '>>' r 176
        '>>=' r 176


State 242
        Prior States: 126

        <Op Unary> ::= '!' <Op Unary> _                                                 <Op Unary> ::= '!' <Op Unary> ^

        '-' r 170
        '!=' r 170
        '%' r 170
        '&' r 170
        '&&' r 170
        '&=' r 170
        ')' r 170
        '*' r 170
        '*=' r 170
        ',' r 170
        '/' r 170
        '/=' r 170
        ':' r 170
        ';' r 170
        '?' r 170
        ']' r 170
        '^' r 170
        '^=' r 170
        '|' r 170
        '||' r 170
        '|=' r 170
        '~>' r 170
        '+' r 170
        '+=' r 170
        '<' r 170
        '<~' r 170
        '<<' r 170
        '<<=' r 170
        '<=' r 170
        '<>' r 170
        '=' r 170
        '-=' r 170
        '==' r 170
        '>' r 170
        '>=' r 170
        '>>' r 170
        '>>=' r 170


State 243
        Prior States: 127

        <Op Unary> ::= '$' <Op Unary> _                                                 <Op Unary> ::= '$' <Op Unary> ^

        '-' r 178
        '!=' r 178
        '%' r 178
        '&' r 178
        '&&' r 178
        '&=' r 178
        ')' r 178
        '*' r 178
        '*=' r 178
        ',' r 178
        '/' r 178
        '/=' r 178
        ':' r 178
        ';' r 178
        '?' r 178
        ']' r 178
        '^' r 178
        '^=' r 178
        '|' r 178
        '||' r 178
        '|=' r 178
        '~>' r 178
        '+' r 178
        '+=' r 178
        '<' r 178
        '<~' r 178
        '<<' r 178
        '<<=' r 178
        '<=' r 178
        '<>' r 178
        '=' r 178
        '-=' r 178
        '==' r 178
        '>' r 178
        '>=' r 178
        '>>' r 178
        '>>=' r 178


State 244
        Prior States: 128

        <Op Unary> ::= '&' <Op Unary> _                                                 <Op Unary> ::= '&' <Op Unary> ^

        '-' r 174
        '!=' r 174
        '%' r 174
        '&' r 174
        '&&' r 174
        '&=' r 174
        ')' r 174
        '*' r 174
        '*=' r 174
        ',' r 174
        '/' r 174
        '/=' r 174
        ':' r 174
        ';' r 174
        '?' r 174
        ']' r 174
        '^' r 174
        '^=' r 174
        '|' r 174
        '||' r 174
        '|=' r 174
        '~>' r 174
        '+' r 174
        '+=' r 174
        '<' r 174
        '<~' r 174
        '<<' r 174
        '<<=' r 174
        '<=' r 174
        '<>' r 174
        '=' r 174
        '-=' r 174
        '==' r 174
        '>' r 174
        '>=' r 174
        '>>' r 174
        '>>=' r 174


State 245
        Prior States: 129, 340

        <Value> ::= '(' <Expression> _ ')'                                              <Value> ::= '(' <Expression> ^ ')'

        ')' s 335


State 246
        Prior States: 129

        <Op Unary> ::= '(' <Type> _ ')' <Op Unary>                                      <Op Unary> ::= '(' <Type> ^ ')' <Op Unary>

        ')' s 336


State 247
        Prior States: 130

        <Op Unary> ::= '*' <Op Unary> _                                                 <Op Unary> ::= '*' <Op Unary> ^

        '-' r 173
        '!=' r 173
        '%' r 173
        '&' r 173
        '&&' r 173
        '&=' r 173
        ')' r 173
        '*' r 173
        '*=' r 173
        ',' r 173
        '/' r 173
        '/=' r 173
        ':' r 173
        ';' r 173
        '?' r 173
        ']' r 173
        '^' r 173
        '^=' r 173
        '|' r 173
        '||' r 173
        '|=' r 173
        '~>' r 173
        '+' r 173
        '+=' r 173
        '<' r 173
        '<~' r 173
        '<<' r 173
        '<<=' r 173
        '<=' r 173
        '<>' r 173
        '=' r 173
        '-=' r 173
        '==' r 173
        '>' r 173
        '>=' r 173
        '>>' r 173
        '>>=' r 173


State 248
        Prior States: 132

        <Op Unary> ::= '~' <Op Unary> _                                                 <Op Unary> ::= '~' <Op Unary> ^

        '-' r 171
        '!=' r 171
        '%' r 171
        '&' r 171
        '&&' r 171
        '&=' r 171
        ')' r 171
        '*' r 171
        '*=' r 171
        ',' r 171
        '/' r 171
        '/=' r 171
        ':' r 171
        ';' r 171
        '?' r 171
        ']' r 171
        '^' r 171
        '^=' r 171
        '|' r 171
        '||' r 171
        '|=' r 171
        '~>' r 171
        '+' r 171
        '+=' r 171
        '<' r 171
        '<~' r 171
        '<<' r 171
        '<<=' r 171
        '<=' r 171
        '<>' r 171
        '=' r 171
        '-=' r 171
        '==' r 171
        '>' r 171
        '>=' r 171
        '>>' r 171
        '>>=' r 171


State 249
        Prior States: 133

        <Op Unary> ::= '++' <Op Unary> _                                                <Op Unary> ::= '++' <Op Unary> ^

        '-' r 175
        '!=' r 175
        '%' r 175
        '&' r 175
        '&&' r 175
        '&=' r 175
        ')' r 175
        '*' r 175
        '*=' r 175
        ',' r 175
        '/' r 175
        '/=' r 175
        ':' r 175
        ';' r 175
        '?' r 175
        ']' r 175
        '^' r 175
        '^=' r 175
        '|' r 175
        '||' r 175
        '|=' r 175
        '~>' r 175
        '+' r 175
        '+=' r 175
        '<' r 175
        '<~' r 175
        '<<' r 175
        '<<=' r 175
        '<=' r 175
        '<>' r 175
        '=' r 175
        '-=' r 175
        '==' r 175
        '>' r 175
        '>=' r 175
        '>>' r 175
        '>>=' r 175


State 250
        Prior States: 134

        <Op Unary> ::= '£' <Op Unary> _                                                 <Op Unary> ::= '£' <Op Unary> ^

        '-' r 177
        '!=' r 177
        '%' r 177
        '&' r 177
        '&&' r 177
        '&=' r 177
        ')' r 177
        '*' r 177
        '*=' r 177
        ',' r 177
        '/' r 177
        '/=' r 177
        ':' r 177
        ';' r 177
        '?' r 177
        ']' r 177
        '^' r 177
        '^=' r 177
        '|' r 177
        '||' r 177
        '|=' r 177
        '~>' r 177
        '+' r 177
        '+=' r 177
        '<' r 177
        '<~' r 177
        '<<' r 177
        '<<=' r 177
        '<=' r 177
        '<>' r 177
        '=' r 177
        '-=' r 177
        '==' r 177
        '>' r 177
        '>=' r 177
        '>>' r 177
        '>>=' r 177


State 251
        Shift-Reduce Conflict

        Prior States: 159, 220, 341

        <Value> ::= Id '(' _ <PARAM EXPR> ')'                                           <Value> ::= Id '(' ^ <PARAM EXPR> ')'
    --> <Value> ::= Id '(' _ ')'                                                        <Value> ::= Id '(' ^ ')'
        <Expression> ::= _ <Op Assign>                                                  <Expression> ::= ^ <Op Assign>
        <Op Assign> ::= _ <Op If> '=' <Op Assign>                                       <Op Assign> ::= ^ <Op If> '=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<>' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '<>' <Op Assign>
        <Op Assign> ::= _ <Op If> '+=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '+=' <Op Assign>
        <Op Assign> ::= _ <Op If> '-=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '-=' <Op Assign>
        <Op Assign> ::= _ <Op If> '*=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '*=' <Op Assign>
        <Op Assign> ::= _ <Op If> '/=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '/=' <Op Assign>
        <Op Assign> ::= _ <Op If> '^=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '^=' <Op Assign>
        <Op Assign> ::= _ <Op If> '&=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '&=' <Op Assign>
        <Op Assign> ::= _ <Op If> '|=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '|=' <Op Assign>
        <Op Assign> ::= _ <Op If> '>>=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '>>=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<<=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '<<=' <Op Assign>
        <Op Assign> ::= _ <Op If>                                                       <Op Assign> ::= ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <PARAM EXPR> ::= _ <Expression> ',' <PARAM EXPR>                                <PARAM EXPR> ::= ^ <Expression> ',' <PARAM EXPR>
        <PARAM EXPR> ::= _ <Expression>                                                 <PARAM EXPR> ::= ^ <Expression>
    --> <PARAM EXPR> ::= _                                                              <PARAM EXPR> ::= ^
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        ')' s 337
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Expression> g 338
        <Op Add> g 168
        <Op And> g 169
        <Op Assign> g 170
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 176
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <PARAM EXPR> g 339
        <REGISTER> g 183
        <Value> g 184


State 252
        Prior States: 159, 220

        <Op Pointer> ::= Id '::' _ <Value>                                              <Op Pointer> ::= Id '::' ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '(' s 340
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 341
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        SP s 164
        SS s 165
        StringLiteral s 166
        <REGISTER> g 183
        <Value> g 342


State 253
        Prior States: 163

        <Op Unary> ::= sizeof '(' _ <Type> ')'                                          <Op Unary> ::= sizeof '(' ^ <Type> ')'
        <Op Unary> ::= sizeof '(' _ Id <Pointers> ')'                                   <Op Unary> ::= sizeof '(' ^ Id <Pointers> ')'
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string

        '@' s 1
        bool s 2
        byte s 3
        enum s 47
        Id s 343
        int s 10
        sbyte s 14
        string s 17
        struct s 48
        uint s 20
        void s 22
        <Base> g 23
        <Scalar> g 38
        <Type> g 344


State 254
        Prior States: 167

        <Array> ::= '[' <Expression> ']' _                                              <Array> ::= '[' <Expression> ']' ^

        ',' r 61
        ';' r 61
        '=' r 61


State 255
        Prior States: 168, 376, 377, 378, 379

        <Op Add> ::= <Op Add> '-' _ <Op Mult>                                           <Op Add> ::= <Op Add> '-' ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Mult> g 345
        <Op Pointer> g 180
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184


State 256
        Prior States: 168, 376, 377, 378, 379

        <Op Add> ::= <Op Add> '+' _ <Op Mult>                                           <Op Add> ::= <Op Add> '+' ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Mult> g 346
        <Op Pointer> g 180
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184


State 257
        Prior States: 169, 372

        <Op And> ::= <Op And> '&&' _ <Op BinOR>                                         <Op And> ::= <Op And> '&&' ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Add> g 168
        <Op BinAND> g 171
        <Op BinOR> g 347
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184


State 258
        Prior States: 171, 350

        <Op BinAND> ::= <Op BinAND> '&' _ <Op Equate>                                   <Op BinAND> ::= <Op BinAND> '&' ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Add> g 168
        <Op Compare> g 174
        <Op Equate> g 348
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184


State 259
        Prior States: 172, 347

        <Op BinOR> ::= <Op BinOR> '|' _ <Op BinXOR>                                     <Op BinOR> ::= <Op BinOR> '|' ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Add> g 168
        <Op BinAND> g 171
        <Op BinXOR> g 349
        <Op Compare> g 174
        <Op Equate> g 175
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184


State 260
        Prior States: 173, 349

        <Op BinXOR> ::= <Op BinXOR> '^' _ <Op BinAND>                                   <Op BinXOR> ::= <Op BinXOR> '^' ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Add> g 168
        <Op BinAND> g 350
        <Op Compare> g 174
        <Op Equate> g 175
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184


State 261
        Prior States: 174, 370

        <Op Compare> ::= <Op Compare> '<' _ <Op Shift>                                  <Op Compare> ::= <Op Compare> '<' ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Add> g 168
        <Op Mult> g 177
        <Op Pointer> g 180
        <Op Shift> g 351
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184


State 262
        Prior States: 174, 370

        <Op Compare> ::= <Op Compare> '<=' _ <Op Shift>                                 <Op Compare> ::= <Op Compare> '<=' ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Add> g 168
        <Op Mult> g 177
        <Op Pointer> g 180
        <Op Shift> g 352
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184


State 263
        Prior States: 174, 370

        <Op Compare> ::= <Op Compare> '>' _ <Op Shift>                                  <Op Compare> ::= <Op Compare> '>' ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Add> g 168
        <Op Mult> g 177
        <Op Pointer> g 180
        <Op Shift> g 353
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184


State 264
        Prior States: 174, 370

        <Op Compare> ::= <Op Compare> '>=' _ <Op Shift>                                 <Op Compare> ::= <Op Compare> '>=' ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Add> g 168
        <Op Mult> g 177
        <Op Pointer> g 180
        <Op Shift> g 354
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184


State 265
        Prior States: 175, 348

        <Op Equate> ::= <Op Equate> '==' _ <Op NEqual>                                  <Op Equate> ::= <Op Equate> '==' ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Add> g 168
        <Op Compare> g 174
        <Op Mult> g 177
        <Op NEqual> g 355
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184


State 266
        Prior States: 176

        <Op Assign> ::= <Op If> '&=' _ <Op Assign>                                      <Op Assign> ::= <Op If> '&=' ^ <Op Assign>
        <Op Assign> ::= _ <Op If> '=' <Op Assign>                                       <Op Assign> ::= ^ <Op If> '=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<>' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '<>' <Op Assign>
        <Op Assign> ::= _ <Op If> '+=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '+=' <Op Assign>
        <Op Assign> ::= _ <Op If> '-=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '-=' <Op Assign>
        <Op Assign> ::= _ <Op If> '*=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '*=' <Op Assign>
        <Op Assign> ::= _ <Op If> '/=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '/=' <Op Assign>
        <Op Assign> ::= _ <Op If> '^=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '^=' <Op Assign>
        <Op Assign> ::= _ <Op If> '&=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '&=' <Op Assign>
        <Op Assign> ::= _ <Op If> '|=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '|=' <Op Assign>
        <Op Assign> ::= _ <Op If> '>>=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '>>=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<<=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '<<=' <Op Assign>
        <Op Assign> ::= _ <Op If>                                                       <Op Assign> ::= ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Add> g 168
        <Op And> g 169
        <Op Assign> g 356
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 176
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184


State 267
        Prior States: 176

        <Op Assign> ::= <Op If> '*=' _ <Op Assign>                                      <Op Assign> ::= <Op If> '*=' ^ <Op Assign>
        <Op Assign> ::= _ <Op If> '=' <Op Assign>                                       <Op Assign> ::= ^ <Op If> '=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<>' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '<>' <Op Assign>
        <Op Assign> ::= _ <Op If> '+=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '+=' <Op Assign>
        <Op Assign> ::= _ <Op If> '-=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '-=' <Op Assign>
        <Op Assign> ::= _ <Op If> '*=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '*=' <Op Assign>
        <Op Assign> ::= _ <Op If> '/=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '/=' <Op Assign>
        <Op Assign> ::= _ <Op If> '^=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '^=' <Op Assign>
        <Op Assign> ::= _ <Op If> '&=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '&=' <Op Assign>
        <Op Assign> ::= _ <Op If> '|=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '|=' <Op Assign>
        <Op Assign> ::= _ <Op If> '>>=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '>>=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<<=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '<<=' <Op Assign>
        <Op Assign> ::= _ <Op If>                                                       <Op Assign> ::= ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Add> g 168
        <Op And> g 169
        <Op Assign> g 357
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 176
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184


State 268
        Prior States: 176

        <Op Assign> ::= <Op If> '/=' _ <Op Assign>                                      <Op Assign> ::= <Op If> '/=' ^ <Op Assign>
        <Op Assign> ::= _ <Op If> '=' <Op Assign>                                       <Op Assign> ::= ^ <Op If> '=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<>' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '<>' <Op Assign>
        <Op Assign> ::= _ <Op If> '+=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '+=' <Op Assign>
        <Op Assign> ::= _ <Op If> '-=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '-=' <Op Assign>
        <Op Assign> ::= _ <Op If> '*=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '*=' <Op Assign>
        <Op Assign> ::= _ <Op If> '/=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '/=' <Op Assign>
        <Op Assign> ::= _ <Op If> '^=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '^=' <Op Assign>
        <Op Assign> ::= _ <Op If> '&=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '&=' <Op Assign>
        <Op Assign> ::= _ <Op If> '|=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '|=' <Op Assign>
        <Op Assign> ::= _ <Op If> '>>=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '>>=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<<=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '<<=' <Op Assign>
        <Op Assign> ::= _ <Op If>                                                       <Op Assign> ::= ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Add> g 168
        <Op And> g 169
        <Op Assign> g 358
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 176
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184


State 269
        Prior States: 176

        <Op Assign> ::= <Op If> '^=' _ <Op Assign>                                      <Op Assign> ::= <Op If> '^=' ^ <Op Assign>
        <Op Assign> ::= _ <Op If> '=' <Op Assign>                                       <Op Assign> ::= ^ <Op If> '=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<>' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '<>' <Op Assign>
        <Op Assign> ::= _ <Op If> '+=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '+=' <Op Assign>
        <Op Assign> ::= _ <Op If> '-=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '-=' <Op Assign>
        <Op Assign> ::= _ <Op If> '*=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '*=' <Op Assign>
        <Op Assign> ::= _ <Op If> '/=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '/=' <Op Assign>
        <Op Assign> ::= _ <Op If> '^=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '^=' <Op Assign>
        <Op Assign> ::= _ <Op If> '&=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '&=' <Op Assign>
        <Op Assign> ::= _ <Op If> '|=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '|=' <Op Assign>
        <Op Assign> ::= _ <Op If> '>>=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '>>=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<<=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '<<=' <Op Assign>
        <Op Assign> ::= _ <Op If>                                                       <Op Assign> ::= ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Add> g 168
        <Op And> g 169
        <Op Assign> g 359
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 176
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184


State 270
        Prior States: 176

        <Op Assign> ::= <Op If> '|=' _ <Op Assign>                                      <Op Assign> ::= <Op If> '|=' ^ <Op Assign>
        <Op Assign> ::= _ <Op If> '=' <Op Assign>                                       <Op Assign> ::= ^ <Op If> '=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<>' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '<>' <Op Assign>
        <Op Assign> ::= _ <Op If> '+=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '+=' <Op Assign>
        <Op Assign> ::= _ <Op If> '-=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '-=' <Op Assign>
        <Op Assign> ::= _ <Op If> '*=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '*=' <Op Assign>
        <Op Assign> ::= _ <Op If> '/=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '/=' <Op Assign>
        <Op Assign> ::= _ <Op If> '^=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '^=' <Op Assign>
        <Op Assign> ::= _ <Op If> '&=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '&=' <Op Assign>
        <Op Assign> ::= _ <Op If> '|=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '|=' <Op Assign>
        <Op Assign> ::= _ <Op If> '>>=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '>>=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<<=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '<<=' <Op Assign>
        <Op Assign> ::= _ <Op If>                                                       <Op Assign> ::= ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Add> g 168
        <Op And> g 169
        <Op Assign> g 360
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 176
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184


State 271
        Prior States: 176

        <Op Assign> ::= <Op If> '+=' _ <Op Assign>                                      <Op Assign> ::= <Op If> '+=' ^ <Op Assign>
        <Op Assign> ::= _ <Op If> '=' <Op Assign>                                       <Op Assign> ::= ^ <Op If> '=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<>' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '<>' <Op Assign>
        <Op Assign> ::= _ <Op If> '+=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '+=' <Op Assign>
        <Op Assign> ::= _ <Op If> '-=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '-=' <Op Assign>
        <Op Assign> ::= _ <Op If> '*=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '*=' <Op Assign>
        <Op Assign> ::= _ <Op If> '/=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '/=' <Op Assign>
        <Op Assign> ::= _ <Op If> '^=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '^=' <Op Assign>
        <Op Assign> ::= _ <Op If> '&=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '&=' <Op Assign>
        <Op Assign> ::= _ <Op If> '|=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '|=' <Op Assign>
        <Op Assign> ::= _ <Op If> '>>=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '>>=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<<=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '<<=' <Op Assign>
        <Op Assign> ::= _ <Op If>                                                       <Op Assign> ::= ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Add> g 168
        <Op And> g 169
        <Op Assign> g 361
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 176
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184


State 272
        Prior States: 176

        <Op Assign> ::= <Op If> '<<=' _ <Op Assign>                                     <Op Assign> ::= <Op If> '<<=' ^ <Op Assign>
        <Op Assign> ::= _ <Op If> '=' <Op Assign>                                       <Op Assign> ::= ^ <Op If> '=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<>' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '<>' <Op Assign>
        <Op Assign> ::= _ <Op If> '+=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '+=' <Op Assign>
        <Op Assign> ::= _ <Op If> '-=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '-=' <Op Assign>
        <Op Assign> ::= _ <Op If> '*=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '*=' <Op Assign>
        <Op Assign> ::= _ <Op If> '/=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '/=' <Op Assign>
        <Op Assign> ::= _ <Op If> '^=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '^=' <Op Assign>
        <Op Assign> ::= _ <Op If> '&=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '&=' <Op Assign>
        <Op Assign> ::= _ <Op If> '|=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '|=' <Op Assign>
        <Op Assign> ::= _ <Op If> '>>=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '>>=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<<=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '<<=' <Op Assign>
        <Op Assign> ::= _ <Op If>                                                       <Op Assign> ::= ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Add> g 168
        <Op And> g 169
        <Op Assign> g 362
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 176
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184


State 273
        Prior States: 176

        <Op Assign> ::= <Op If> '<>' _ <Op Assign>                                      <Op Assign> ::= <Op If> '<>' ^ <Op Assign>
        <Op Assign> ::= _ <Op If> '=' <Op Assign>                                       <Op Assign> ::= ^ <Op If> '=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<>' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '<>' <Op Assign>
        <Op Assign> ::= _ <Op If> '+=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '+=' <Op Assign>
        <Op Assign> ::= _ <Op If> '-=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '-=' <Op Assign>
        <Op Assign> ::= _ <Op If> '*=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '*=' <Op Assign>
        <Op Assign> ::= _ <Op If> '/=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '/=' <Op Assign>
        <Op Assign> ::= _ <Op If> '^=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '^=' <Op Assign>
        <Op Assign> ::= _ <Op If> '&=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '&=' <Op Assign>
        <Op Assign> ::= _ <Op If> '|=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '|=' <Op Assign>
        <Op Assign> ::= _ <Op If> '>>=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '>>=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<<=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '<<=' <Op Assign>
        <Op Assign> ::= _ <Op If>                                                       <Op Assign> ::= ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Add> g 168
        <Op And> g 169
        <Op Assign> g 363
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 176
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184


State 274
        Prior States: 176

        <Op Assign> ::= <Op If> '=' _ <Op Assign>                                       <Op Assign> ::= <Op If> '=' ^ <Op Assign>
        <Op Assign> ::= _ <Op If> '=' <Op Assign>                                       <Op Assign> ::= ^ <Op If> '=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<>' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '<>' <Op Assign>
        <Op Assign> ::= _ <Op If> '+=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '+=' <Op Assign>
        <Op Assign> ::= _ <Op If> '-=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '-=' <Op Assign>
        <Op Assign> ::= _ <Op If> '*=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '*=' <Op Assign>
        <Op Assign> ::= _ <Op If> '/=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '/=' <Op Assign>
        <Op Assign> ::= _ <Op If> '^=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '^=' <Op Assign>
        <Op Assign> ::= _ <Op If> '&=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '&=' <Op Assign>
        <Op Assign> ::= _ <Op If> '|=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '|=' <Op Assign>
        <Op Assign> ::= _ <Op If> '>>=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '>>=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<<=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '<<=' <Op Assign>
        <Op Assign> ::= _ <Op If>                                                       <Op Assign> ::= ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Add> g 168
        <Op And> g 169
        <Op Assign> g 364
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 176
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184


State 275
        Prior States: 176

        <Op Assign> ::= <Op If> '-=' _ <Op Assign>                                      <Op Assign> ::= <Op If> '-=' ^ <Op Assign>
        <Op Assign> ::= _ <Op If> '=' <Op Assign>                                       <Op Assign> ::= ^ <Op If> '=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<>' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '<>' <Op Assign>
        <Op Assign> ::= _ <Op If> '+=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '+=' <Op Assign>
        <Op Assign> ::= _ <Op If> '-=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '-=' <Op Assign>
        <Op Assign> ::= _ <Op If> '*=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '*=' <Op Assign>
        <Op Assign> ::= _ <Op If> '/=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '/=' <Op Assign>
        <Op Assign> ::= _ <Op If> '^=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '^=' <Op Assign>
        <Op Assign> ::= _ <Op If> '&=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '&=' <Op Assign>
        <Op Assign> ::= _ <Op If> '|=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '|=' <Op Assign>
        <Op Assign> ::= _ <Op If> '>>=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '>>=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<<=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '<<=' <Op Assign>
        <Op Assign> ::= _ <Op If>                                                       <Op Assign> ::= ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Add> g 168
        <Op And> g 169
        <Op Assign> g 365
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 176
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184


State 276
        Prior States: 176

        <Op Assign> ::= <Op If> '>>=' _ <Op Assign>                                     <Op Assign> ::= <Op If> '>>=' ^ <Op Assign>
        <Op Assign> ::= _ <Op If> '=' <Op Assign>                                       <Op Assign> ::= ^ <Op If> '=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<>' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '<>' <Op Assign>
        <Op Assign> ::= _ <Op If> '+=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '+=' <Op Assign>
        <Op Assign> ::= _ <Op If> '-=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '-=' <Op Assign>
        <Op Assign> ::= _ <Op If> '*=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '*=' <Op Assign>
        <Op Assign> ::= _ <Op If> '/=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '/=' <Op Assign>
        <Op Assign> ::= _ <Op If> '^=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '^=' <Op Assign>
        <Op Assign> ::= _ <Op If> '&=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '&=' <Op Assign>
        <Op Assign> ::= _ <Op If> '|=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '|=' <Op Assign>
        <Op Assign> ::= _ <Op If> '>>=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '>>=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<<=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '<<=' <Op Assign>
        <Op Assign> ::= _ <Op If>                                                       <Op Assign> ::= ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Add> g 168
        <Op And> g 169
        <Op Assign> g 366
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 176
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184


State 277
        Prior States: 177, 345, 346

        <Op Mult> ::= <Op Mult> '%' _ <Op Unary>                                        <Op Mult> ::= <Op Mult> '%' ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Pointer> g 180
        <Op Unary> g 367
        <REGISTER> g 183
        <Value> g 184


State 278
        Prior States: 177, 345, 346

        <Op Mult> ::= <Op Mult> '*' _ <Op Unary>                                        <Op Mult> ::= <Op Mult> '*' ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Pointer> g 180
        <Op Unary> g 368
        <REGISTER> g 183
        <Value> g 184


State 279
        Prior States: 177, 345, 346

        <Op Mult> ::= <Op Mult> '/' _ <Op Unary>                                        <Op Mult> ::= <Op Mult> '/' ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Pointer> g 180
        <Op Unary> g 369
        <REGISTER> g 183
        <Value> g 184


State 280
        Prior States: 178, 355

        <Op NEqual> ::= <Op NEqual> '!=' _ <Op Compare>                                 <Op NEqual> ::= <Op NEqual> '!=' ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Add> g 168
        <Op Compare> g 370
        <Op Mult> g 177
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184


State 281
        Prior States: 179

        <Op If> ::= <Op Or> '?' _ <Op If> ':' <Op If>                                   <Op If> ::= <Op Or> '?' ^ <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Add> g 168
        <Op And> g 169
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 371
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184


State 282
        Prior States: 179

        <Op Or> ::= <Op Or> '||' _ <Op And>                                             <Op Or> ::= <Op Or> '||' ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Add> g 168
        <Op And> g 372
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184


State 283
        Prior States: 180

        <Op Unary> ::= <Op Pointer> '--' _                                              <Op Unary> ::= <Op Pointer> '--' ^

        '-' r 180
        '!=' r 180
        '%' r 180
        '&' r 180
        '&&' r 180
        '&=' r 180
        ')' r 180
        '*' r 180
        '*=' r 180
        ',' r 180
        '/' r 180
        '/=' r 180
        ':' r 180
        ';' r 180
        '?' r 180
        ']' r 180
        '^' r 180
        '^=' r 180
        '|' r 180
        '||' r 180
        '|=' r 180
        '~>' r 180
        '+' r 180
        '+=' r 180
        '<' r 180
        '<~' r 180
        '<<' r 180
        '<<=' r 180
        '<=' r 180
        '<>' r 180
        '=' r 180
        '-=' r 180
        '==' r 180
        '>' r 180
        '>=' r 180
        '>>' r 180
        '>>=' r 180


State 284
        Prior States: 180

        <Op Pointer> ::= <Op Pointer> '.' _ <Value>                                     <Op Pointer> ::= <Op Pointer> '.' ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '(' s 340
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 341
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        SP s 164
        SS s 165
        StringLiteral s 166
        <REGISTER> g 183
        <Value> g 373


State 285
        Prior States: 180

        <Op Pointer> ::= <Op Pointer> '[' _ <Expression> ']'                            <Op Pointer> ::= <Op Pointer> '[' ^ <Expression> ']'
        <Expression> ::= _ <Op Assign>                                                  <Expression> ::= ^ <Op Assign>
        <Op Assign> ::= _ <Op If> '=' <Op Assign>                                       <Op Assign> ::= ^ <Op If> '=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<>' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '<>' <Op Assign>
        <Op Assign> ::= _ <Op If> '+=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '+=' <Op Assign>
        <Op Assign> ::= _ <Op If> '-=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '-=' <Op Assign>
        <Op Assign> ::= _ <Op If> '*=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '*=' <Op Assign>
        <Op Assign> ::= _ <Op If> '/=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '/=' <Op Assign>
        <Op Assign> ::= _ <Op If> '^=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '^=' <Op Assign>
        <Op Assign> ::= _ <Op If> '&=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '&=' <Op Assign>
        <Op Assign> ::= _ <Op If> '|=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '|=' <Op Assign>
        <Op Assign> ::= _ <Op If> '>>=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '>>=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<<=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '<<=' <Op Assign>
        <Op Assign> ::= _ <Op If>                                                       <Op Assign> ::= ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Expression> g 374
        <Op Add> g 168
        <Op And> g 169
        <Op Assign> g 170
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 176
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184


State 286
        Prior States: 180

        <Op Unary> ::= <Op Pointer> '++' _                                              <Op Unary> ::= <Op Pointer> '++' ^

        '-' r 179
        '!=' r 179
        '%' r 179
        '&' r 179
        '&&' r 179
        '&=' r 179
        ')' r 179
        '*' r 179
        '*=' r 179
        ',' r 179
        '/' r 179
        '/=' r 179
        ':' r 179
        ';' r 179
        '?' r 179
        ']' r 179
        '^' r 179
        '^=' r 179
        '|' r 179
        '||' r 179
        '|=' r 179
        '~>' r 179
        '+' r 179
        '+=' r 179
        '<' r 179
        '<~' r 179
        '<<' r 179
        '<<=' r 179
        '<=' r 179
        '<>' r 179
        '=' r 179
        '-=' r 179
        '==' r 179
        '>' r 179
        '>=' r 179
        '>>' r 179
        '>>=' r 179


State 287
        Prior States: 180

        <Op Pointer> ::= <Op Pointer> '->' _ <Value>                                    <Op Pointer> ::= <Op Pointer> '->' ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '(' s 340
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 341
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        SP s 164
        SS s 165
        StringLiteral s 166
        <REGISTER> g 183
        <Value> g 375


State 288
        Prior States: 181, 351, 352, 353, 354

        <Op Shift> ::= <Op Shift> '~>' _ <Op Add>                                       <Op Shift> ::= <Op Shift> '~>' ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Add> g 376
        <Op Mult> g 177
        <Op Pointer> g 180
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184


State 289
        Prior States: 181, 351, 352, 353, 354

        <Op Shift> ::= <Op Shift> '<~' _ <Op Add>                                       <Op Shift> ::= <Op Shift> '<~' ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Add> g 377
        <Op Mult> g 177
        <Op Pointer> g 180
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184


State 290
        Prior States: 181, 351, 352, 353, 354

        <Op Shift> ::= <Op Shift> '<<' _ <Op Add>                                       <Op Shift> ::= <Op Shift> '<<' ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Add> g 378
        <Op Mult> g 177
        <Op Pointer> g 180
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184


State 291
        Prior States: 181, 351, 352, 353, 354

        <Op Shift> ::= <Op Shift> '>>' _ <Op Add>                                       <Op Shift> ::= <Op Shift> '>>' ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Add> g 379
        <Op Mult> g 177
        <Op Pointer> g 180
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184


State 292
        Prior States: 186

        <Var> ::= Id <Array> '=' <Op If> _                                              <Var> ::= Id <Array> '=' <Op If> ^

        ',' r 59
        ';' r 59


State 293
        Prior States: 187

        <Var Decl> ::= <Mod> <Type> <Var> <Var List> ';' _                              <Var Decl> ::= <Mod> <Type> <Var> <Var List> ';' ^

        (EOF) r 54
        '-' r 54
        '--' r 54
        '!' r 54
        '$' r 54
        '&' r 54
        '(' r 54
        '*' r 54
        ';' r 54
        '@' r 54
        '{' r 54
        '}' r 54
        '~' r 54
        '++' r 54
        '£' r 54
        AH r 54
        AL r 54
        asm r 54
        AX r 54
        BH r 54
        BinaryLiteral r 54
        BL r 54
        bool r 54
        BooleanLiteral r 54
        BP r 54
        break r 54
        BX r 54
        byte r 54
        case r 54
        cdecl r 54
        CH r 54
        CharLiteral r 54
        CL r 54
        const r 54
        continue r 54
        CS r 54
        CX r 54
        DecLiteral r 54
        default r 54
        DH r 54
        DI r 54
        DL r 54
        do r 54
        DS r 54
        DX r 54
        entry r 54
        enum r 54
        ES r 54
        extern r 54
        fastcall r 54
        for r 54
        FS r 54
        goto r 54
        GS r 54
        HexLiteral r 54
        Id r 54
        if r 54
        int r 54
        loop r 54
        namespace r 54
        next r 54
        NullLiteral r 54
        OctLiteral r 54
        override r 54
        private r 54
        return r 54
        sbyte r 54
        SI r 54
        sizeof r 54
        SP r 54
        SS r 54
        static r 54
        stdcall r 54
        string r 54
        StringLiteral r 54
        struct r 54
        switch r 54
        typedef r 54
        uint r 54
        use r 54
        void r 54
        while r 54


State 294
        Prior States: 188

        <Var Item> ::= <Pointers> <Var> _                                               <Var Item> ::= <Pointers> <Var> ^

        ',' r 65
        ';' r 65


State 295
        Prior States: 189

        <Var List> ::= ',' <Var Item> <Var List> _                                      <Var List> ::= ',' <Var Item> <Var List> ^

        ';' r 63


State 296
        Prior States: 193

        <Func Decl> ::= entry <Func ID> '(' <Params> ')' <Block> _                      <Func Decl> ::= entry <Func ID> '(' <Params> ')' <Block> ^

        (EOF) r 24
        '@' r 24
        bool r 24
        byte r 24
        cdecl r 24
        const r 24
        entry r 24
        enum r 24
        extern r 24
        fastcall r 24
        int r 24
        namespace r 24
        override r 24
        private r 24
        sbyte r 24
        static r 24
        stdcall r 24
        string r 24
        struct r 24
        typedef r 24
        uint r 24
        use r 24
        void r 24


State 297
        Prior States: 194

        <Enum Val> ::= Id '=' DecLiteral _                                              <Enum Val> ::= Id '=' DecLiteral ^

        ',' r 76
        '}' r 76


State 298
        Prior States: 194

        <Enum Val> ::= Id '=' HexLiteral _                                              <Enum Val> ::= Id '=' HexLiteral ^

        ',' r 75
        '}' r 75


State 299
        Prior States: 194

        <Enum Val> ::= Id '=' OctLiteral _                                              <Enum Val> ::= Id '=' OctLiteral ^

        ',' r 74
        '}' r 74


State 300
        Prior States: 195

        <Enum Decl> ::= enum Id '{' <Enum Def> '}' ';' _                                <Enum Decl> ::= enum Id '{' <Enum Def> '}' ';' ^

        (EOF) r 70
        '@' r 70
        bool r 70
        byte r 70
        cdecl r 70
        const r 70
        entry r 70
        enum r 70
        extern r 70
        fastcall r 70
        int r 70
        namespace r 70
        override r 70
        private r 70
        sbyte r 70
        static r 70
        stdcall r 70
        string r 70
        struct r 70
        typedef r 70
        uint r 70
        use r 70
        void r 70


State 301
        Prior States: 196

        <Enum Def> ::= <Enum Val> ',' <Enum Def> _                                      <Enum Def> ::= <Enum Val> ',' <Enum Def> ^

        '}' r 71


State 302
        Prior States: 197

        <Oper Decl> ::= override <Type> operator '-' '(' <Params> _ ')' <Block>         <Oper Decl> ::= override <Type> operator '-' '(' <Params> ^ ')' <Block>

        ')' s 380


State 303
        Prior States: 198

        <Oper Decl> ::= override <Type> operator '!=' '(' <Params> _ ')' <Block>        <Oper Decl> ::= override <Type> operator '!=' '(' <Params> ^ ')' <Block>

        ')' s 381


State 304
        Prior States: 199

        <Oper Decl> ::= override <Type> operator '%' '(' <Params> _ ')' <Block>         <Oper Decl> ::= override <Type> operator '%' '(' <Params> ^ ')' <Block>

        ')' s 382


State 305
        Prior States: 200

        <Oper Decl> ::= override <Type> operator '&' '(' <Params> _ ')' <Block>         <Oper Decl> ::= override <Type> operator '&' '(' <Params> ^ ')' <Block>

        ')' s 383


State 306
        Prior States: 201

        <Oper Decl> ::= override <Type> operator '*' '(' <Params> _ ')' <Block>         <Oper Decl> ::= override <Type> operator '*' '(' <Params> ^ ')' <Block>

        ')' s 384


State 307
        Prior States: 202

        <Oper Decl> ::= override <Type> operator '/' '(' <Params> _ ')' <Block>         <Oper Decl> ::= override <Type> operator '/' '(' <Params> ^ ')' <Block>

        ')' s 385


State 308
        Prior States: 203

        <Oper Decl> ::= override <Type> operator '^' '(' <Params> _ ')' <Block>         <Oper Decl> ::= override <Type> operator '^' '(' <Params> ^ ')' <Block>

        ')' s 386


State 309
        Prior States: 204

        <Oper Decl> ::= override <Type> operator '|' '(' <Params> _ ')' <Block>         <Oper Decl> ::= override <Type> operator '|' '(' <Params> ^ ')' <Block>

        ')' s 387


State 310
        Prior States: 205

        <Oper Decl> ::= override <Type> operator '+' '(' <Params> _ ')' <Block>         <Oper Decl> ::= override <Type> operator '+' '(' <Params> ^ ')' <Block>

        ')' s 388


State 311
        Prior States: 206

        <Oper Decl> ::= override <Type> operator '<' '(' <Params> _ ')' <Block>         <Oper Decl> ::= override <Type> operator '<' '(' <Params> ^ ')' <Block>

        ')' s 389


State 312
        Prior States: 207

        <Oper Decl> ::= override <Type> operator '<=' '(' <Params> _ ')' <Block>        <Oper Decl> ::= override <Type> operator '<=' '(' <Params> ^ ')' <Block>

        ')' s 390


State 313
        Prior States: 208

        <Oper Decl> ::= override <Type> operator '==' '(' <Params> _ ')' <Block>        <Oper Decl> ::= override <Type> operator '==' '(' <Params> ^ ')' <Block>

        ')' s 391


State 314
        Prior States: 209

        <Oper Decl> ::= override <Type> operator '>' '(' <Params> _ ')' <Block>         <Oper Decl> ::= override <Type> operator '>' '(' <Params> ^ ')' <Block>

        ')' s 392


State 315
        Prior States: 210

        <Oper Decl> ::= override <Type> operator '>=' '(' <Params> _ ')' <Block>        <Oper Decl> ::= override <Type> operator '>=' '(' <Params> ^ ')' <Block>

        ')' s 393


State 316
        Prior States: 211

        <Struct Decl> ::= struct Id '{' <Struct Def> '}' ';' _                          <Struct Decl> ::= struct Id '{' <Struct Def> '}' ';' ^

        (EOF) r 51
        '@' r 51
        bool r 51
        byte r 51
        cdecl r 51
        const r 51
        entry r 51
        enum r 51
        extern r 51
        fastcall r 51
        int r 51
        namespace r 51
        override r 51
        private r 51
        sbyte r 51
        static r 51
        stdcall r 51
        string r 51
        struct r 51
        typedef r 51
        uint r 51
        use r 51
        void r 51


State 317
        Prior States: 214

        <Statement> ::= asm '{' _ <INSTRUCTIONS> '}'                                    <Statement> ::= asm '{' ^ <INSTRUCTIONS> '}'
        <INSTRUCTION> ::= _ StringLiteral ';'                                           <INSTRUCTION> ::= ^ StringLiteral ';'
        <INSTRUCTIONS> ::= _ <INSTRUCTION> <INSTRUCTIONS>                               <INSTRUCTIONS> ::= ^ <INSTRUCTION> <INSTRUCTIONS>
        <INSTRUCTIONS> ::= _                                                            <INSTRUCTIONS> ::= ^

        StringLiteral s 394
        <INSTRUCTION> g 395
        <INSTRUCTIONS> g 396
        '}' r 230


State 318
        Prior States: 215

        <Normal Stm> ::= break ';' _                                                    <Normal Stm> ::= break ';' ^

        '-' r 109
        '--' r 109
        '!' r 109
        '$' r 109
        '&' r 109
        '(' r 109
        '*' r 109
        ';' r 109
        '@' r 109
        '{' r 109
        '}' r 109
        '~' r 109
        '++' r 109
        '£' r 109
        AH r 109
        AL r 109
        asm r 109
        AX r 109
        BH r 109
        BinaryLiteral r 109
        BL r 109
        bool r 109
        BooleanLiteral r 109
        BP r 109
        break r 109
        BX r 109
        byte r 109
        case r 109
        CH r 109
        CharLiteral r 109
        CL r 109
        const r 109
        continue r 109
        CS r 109
        CX r 109
        DecLiteral r 109
        default r 109
        DH r 109
        DI r 109
        DL r 109
        do r 109
        DS r 109
        DX r 109
        else r 109
        enum r 109
        ES r 109
        extern r 109
        for r 109
        FS r 109
        goto r 109
        GS r 109
        HexLiteral r 109
        Id r 109
        if r 109
        int r 109
        loop r 109
        next r 109
        NullLiteral r 109
        OctLiteral r 109
        private r 109
        return r 109
        sbyte r 109
        SI r 109
        sizeof r 109
        SP r 109
        SS r 109
        static r 109
        string r 109
        StringLiteral r 109
        struct r 109
        switch r 109
        uint r 109
        void r 109
        while r 109


State 319
        Prior States: 216

        <Normal Stm> ::= continue ';' _                                                 <Normal Stm> ::= continue ';' ^

        '-' r 110
        '--' r 110
        '!' r 110
        '$' r 110
        '&' r 110
        '(' r 110
        '*' r 110
        ';' r 110
        '@' r 110
        '{' r 110
        '}' r 110
        '~' r 110
        '++' r 110
        '£' r 110
        AH r 110
        AL r 110
        asm r 110
        AX r 110
        BH r 110
        BinaryLiteral r 110
        BL r 110
        bool r 110
        BooleanLiteral r 110
        BP r 110
        break r 110
        BX r 110
        byte r 110
        case r 110
        CH r 110
        CharLiteral r 110
        CL r 110
        const r 110
        continue r 110
        CS r 110
        CX r 110
        DecLiteral r 110
        default r 110
        DH r 110
        DI r 110
        DL r 110
        do r 110
        DS r 110
        DX r 110
        else r 110
        enum r 110
        ES r 110
        extern r 110
        for r 110
        FS r 110
        goto r 110
        GS r 110
        HexLiteral r 110
        Id r 110
        if r 110
        int r 110
        loop r 110
        next r 110
        NullLiteral r 110
        OctLiteral r 110
        private r 110
        return r 110
        sbyte r 110
        SI r 110
        sizeof r 110
        SP r 110
        SS r 110
        static r 110
        string r 110
        StringLiteral r 110
        struct r 110
        switch r 110
        uint r 110
        void r 110
        while r 110


State 320
        Prior States: 217

        <Normal Stm> ::= do <Statement> _ while '(' <Expression> ')'                    <Normal Stm> ::= do <Statement> ^ while '(' <Expression> ')'

        while s 397


State 321
        Prior States: 218

        <Statement> ::= for '(' _ <Arg> ';' <Arg> ';' <Arg> ')' <Statement>             <Statement> ::= for '(' ^ <Arg> ';' <Arg> ';' <Arg> ')' <Statement>
        <Arg> ::= _ <Expression>                                                        <Arg> ::= ^ <Expression>
        <Arg> ::= _                                                                     <Arg> ::= ^
        <Expression> ::= _ <Op Assign>                                                  <Expression> ::= ^ <Op Assign>
        <Op Assign> ::= _ <Op If> '=' <Op Assign>                                       <Op Assign> ::= ^ <Op If> '=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<>' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '<>' <Op Assign>
        <Op Assign> ::= _ <Op If> '+=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '+=' <Op Assign>
        <Op Assign> ::= _ <Op If> '-=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '-=' <Op Assign>
        <Op Assign> ::= _ <Op If> '*=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '*=' <Op Assign>
        <Op Assign> ::= _ <Op If> '/=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '/=' <Op Assign>
        <Op Assign> ::= _ <Op If> '^=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '^=' <Op Assign>
        <Op Assign> ::= _ <Op If> '&=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '&=' <Op Assign>
        <Op Assign> ::= _ <Op If> '|=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '|=' <Op Assign>
        <Op Assign> ::= _ <Op If> '>>=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '>>=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<<=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '<<=' <Op Assign>
        <Op Assign> ::= _ <Op If>                                                       <Op Assign> ::= ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Arg> g 398
        <Expression> g 399
        <Op Add> g 168
        <Op And> g 169
        <Op Assign> g 170
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 176
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184
        ';' r 117


State 322
        Prior States: 219

        <Normal Stm> ::= goto case _ DecLiteral ';'                                     <Normal Stm> ::= goto case ^ DecLiteral ';'

        DecLiteral s 400


State 323
        Prior States: 219

        <Normal Stm> ::= goto default _ ';'                                             <Normal Stm> ::= goto default ^ ';'

        ';' s 401


State 324
        Prior States: 219

        <Normal Stm> ::= goto Id _ ';'                                                  <Normal Stm> ::= goto Id ^ ';'

        ';' s 402


State 325
        Prior States: 220

        <Statement> ::= Id ':' _                                                        <Statement> ::= Id ':' ^

        '-' r 92
        '--' r 92
        '!' r 92
        '$' r 92
        '&' r 92
        '(' r 92
        '*' r 92
        ';' r 92
        '@' r 92
        '{' r 92
        '}' r 92
        '~' r 92
        '++' r 92
        '£' r 92
        AH r 92
        AL r 92
        asm r 92
        AX r 92
        BH r 92
        BinaryLiteral r 92
        BL r 92
        bool r 92
        BooleanLiteral r 92
        BP r 92
        break r 92
        BX r 92
        byte r 92
        case r 92
        CH r 92
        CharLiteral r 92
        CL r 92
        const r 92
        continue r 92
        CS r 92
        CX r 92
        DecLiteral r 92
        default r 92
        DH r 92
        DI r 92
        DL r 92
        do r 92
        DS r 92
        DX r 92
        enum r 92
        ES r 92
        extern r 92
        for r 92
        FS r 92
        goto r 92
        GS r 92
        HexLiteral r 92
        Id r 92
        if r 92
        int r 92
        loop r 92
        next r 92
        NullLiteral r 92
        OctLiteral r 92
        private r 92
        return r 92
        sbyte r 92
        SI r 92
        sizeof r 92
        SP r 92
        SS r 92
        static r 92
        string r 92
        StringLiteral r 92
        struct r 92
        switch r 92
        uint r 92
        void r 92
        while r 92


State 326
        Prior States: 221

        <Statement> ::= if '(' _ <Expression> ')' <Statement>                           <Statement> ::= if '(' ^ <Expression> ')' <Statement>
        <Statement> ::= if '(' _ <Expression> ')' <Then Stm> else <Statement>           <Statement> ::= if '(' ^ <Expression> ')' <Then Stm> else <Statement>
        <Expression> ::= _ <Op Assign>                                                  <Expression> ::= ^ <Op Assign>
        <Op Assign> ::= _ <Op If> '=' <Op Assign>                                       <Op Assign> ::= ^ <Op If> '=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<>' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '<>' <Op Assign>
        <Op Assign> ::= _ <Op If> '+=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '+=' <Op Assign>
        <Op Assign> ::= _ <Op If> '-=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '-=' <Op Assign>
        <Op Assign> ::= _ <Op If> '*=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '*=' <Op Assign>
        <Op Assign> ::= _ <Op If> '/=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '/=' <Op Assign>
        <Op Assign> ::= _ <Op If> '^=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '^=' <Op Assign>
        <Op Assign> ::= _ <Op If> '&=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '&=' <Op Assign>
        <Op Assign> ::= _ <Op If> '|=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '|=' <Op Assign>
        <Op Assign> ::= _ <Op If> '>>=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '>>=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<<=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '<<=' <Op Assign>
        <Op Assign> ::= _ <Op If>                                                       <Op Assign> ::= ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Expression> g 403
        <Op Add> g 168
        <Op And> g 169
        <Op Assign> g 170
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 176
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184


State 327
        Prior States: 222

        <Statement> ::= loop <Statement> _                                              <Statement> ::= loop <Statement> ^

        '-' r 98
        '--' r 98
        '!' r 98
        '$' r 98
        '&' r 98
        '(' r 98
        '*' r 98
        ';' r 98
        '@' r 98
        '{' r 98
        '}' r 98
        '~' r 98
        '++' r 98
        '£' r 98
        AH r 98
        AL r 98
        asm r 98
        AX r 98
        BH r 98
        BinaryLiteral r 98
        BL r 98
        bool r 98
        BooleanLiteral r 98
        BP r 98
        break r 98
        BX r 98
        byte r 98
        case r 98
        CH r 98
        CharLiteral r 98
        CL r 98
        const r 98
        continue r 98
        CS r 98
        CX r 98
        DecLiteral r 98
        default r 98
        DH r 98
        DI r 98
        DL r 98
        do r 98
        DS r 98
        DX r 98
        enum r 98
        ES r 98
        extern r 98
        for r 98
        FS r 98
        goto r 98
        GS r 98
        HexLiteral r 98
        Id r 98
        if r 98
        int r 98
        loop r 98
        next r 98
        NullLiteral r 98
        OctLiteral r 98
        private r 98
        return r 98
        sbyte r 98
        SI r 98
        sizeof r 98
        SP r 98
        SS r 98
        static r 98
        string r 98
        StringLiteral r 98
        struct r 98
        switch r 98
        uint r 98
        void r 98
        while r 98


State 328
        Prior States: 223

        <Normal Stm> ::= next ';' _                                                     <Normal Stm> ::= next ';' ^

        '-' r 113
        '--' r 113
        '!' r 113
        '$' r 113
        '&' r 113
        '(' r 113
        '*' r 113
        ';' r 113
        '@' r 113
        '{' r 113
        '}' r 113
        '~' r 113
        '++' r 113
        '£' r 113
        AH r 113
        AL r 113
        asm r 113
        AX r 113
        BH r 113
        BinaryLiteral r 113
        BL r 113
        bool r 113
        BooleanLiteral r 113
        BP r 113
        break r 113
        BX r 113
        byte r 113
        case r 113
        CH r 113
        CharLiteral r 113
        CL r 113
        const r 113
        continue r 113
        CS r 113
        CX r 113
        DecLiteral r 113
        default r 113
        DH r 113
        DI r 113
        DL r 113
        do r 113
        DS r 113
        DX r 113
        else r 113
        enum r 113
        ES r 113
        extern r 113
        for r 113
        FS r 113
        goto r 113
        GS r 113
        HexLiteral r 113
        Id r 113
        if r 113
        int r 113
        loop r 113
        next r 113
        NullLiteral r 113
        OctLiteral r 113
        private r 113
        return r 113
        sbyte r 113
        SI r 113
        sizeof r 113
        SP r 113
        SS r 113
        static r 113
        string r 113
        StringLiteral r 113
        struct r 113
        switch r 113
        uint r 113
        void r 113
        while r 113


State 329
        Prior States: 224

        <Normal Stm> ::= return <Expression> _ ';'                                      <Normal Stm> ::= return <Expression> ^ ';'

        ';' s 404


State 330
        Prior States: 225

        <Normal Stm> ::= switch '(' _ <Expression> ')' '{' <Case Stms> '}'              <Normal Stm> ::= switch '(' ^ <Expression> ')' '{' <Case Stms> '}'
        <Expression> ::= _ <Op Assign>                                                  <Expression> ::= ^ <Op Assign>
        <Op Assign> ::= _ <Op If> '=' <Op Assign>                                       <Op Assign> ::= ^ <Op If> '=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<>' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '<>' <Op Assign>
        <Op Assign> ::= _ <Op If> '+=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '+=' <Op Assign>
        <Op Assign> ::= _ <Op If> '-=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '-=' <Op Assign>
        <Op Assign> ::= _ <Op If> '*=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '*=' <Op Assign>
        <Op Assign> ::= _ <Op If> '/=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '/=' <Op Assign>
        <Op Assign> ::= _ <Op If> '^=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '^=' <Op Assign>
        <Op Assign> ::= _ <Op If> '&=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '&=' <Op Assign>
        <Op Assign> ::= _ <Op If> '|=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '|=' <Op Assign>
        <Op Assign> ::= _ <Op If> '>>=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '>>=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<<=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '<<=' <Op Assign>
        <Op Assign> ::= _ <Op If>                                                       <Op Assign> ::= ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Expression> g 405
        <Op Add> g 168
        <Op And> g 169
        <Op Assign> g 170
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 176
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184


State 331
        Prior States: 226

        <Statement> ::= while '(' _ <Expression> ')' <Statement>                        <Statement> ::= while '(' ^ <Expression> ')' <Statement>
        <Expression> ::= _ <Op Assign>                                                  <Expression> ::= ^ <Op Assign>
        <Op Assign> ::= _ <Op If> '=' <Op Assign>                                       <Op Assign> ::= ^ <Op If> '=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<>' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '<>' <Op Assign>
        <Op Assign> ::= _ <Op If> '+=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '+=' <Op Assign>
        <Op Assign> ::= _ <Op If> '-=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '-=' <Op Assign>
        <Op Assign> ::= _ <Op If> '*=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '*=' <Op Assign>
        <Op Assign> ::= _ <Op If> '/=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '/=' <Op Assign>
        <Op Assign> ::= _ <Op If> '^=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '^=' <Op Assign>
        <Op Assign> ::= _ <Op If> '&=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '&=' <Op Assign>
        <Op Assign> ::= _ <Op If> '|=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '|=' <Op Assign>
        <Op Assign> ::= _ <Op If> '>>=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '>>=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<<=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '<<=' <Op Assign>
        <Op Assign> ::= _ <Op If>                                                       <Op Assign> ::= ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Expression> g 406
        <Op Add> g 168
        <Op And> g 169
        <Op Assign> g 170
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 176
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184


State 332
        Prior States: 228

        <Normal Stm> ::= <Expression> ';' _                                             <Normal Stm> ::= <Expression> ';' ^

        '-' r 107
        '--' r 107
        '!' r 107
        '$' r 107
        '&' r 107
        '(' r 107
        '*' r 107
        ';' r 107
        '@' r 107
        '{' r 107
        '}' r 107
        '~' r 107
        '++' r 107
        '£' r 107
        AH r 107
        AL r 107
        asm r 107
        AX r 107
        BH r 107
        BinaryLiteral r 107
        BL r 107
        bool r 107
        BooleanLiteral r 107
        BP r 107
        break r 107
        BX r 107
        byte r 107
        case r 107
        CH r 107
        CharLiteral r 107
        CL r 107
        const r 107
        continue r 107
        CS r 107
        CX r 107
        DecLiteral r 107
        default r 107
        DH r 107
        DI r 107
        DL r 107
        do r 107
        DS r 107
        DX r 107
        else r 107
        enum r 107
        ES r 107
        extern r 107
        for r 107
        FS r 107
        goto r 107
        GS r 107
        HexLiteral r 107
        Id r 107
        if r 107
        int r 107
        loop r 107
        next r 107
        NullLiteral r 107
        OctLiteral r 107
        private r 107
        return r 107
        sbyte r 107
        SI r 107
        sizeof r 107
        SP r 107
        SS r 107
        static r 107
        string r 107
        StringLiteral r 107
        struct r 107
        switch r 107
        uint r 107
        void r 107
        while r 107


State 333
        Prior States: 230

        <Stm List> ::= <Statement> <Stm List> _                                         <Stm List> ::= <Statement> <Stm List> ^

        '}' r 122
        case r 122
        default r 122


State 334
        Prior States: 231

        <Block> ::= '{' <Stm List> '}' _                                                <Block> ::= '{' <Stm List> '}' ^

        (EOF) r 121
        '-' r 121
        '--' r 121
        '!' r 121
        '$' r 121
        '&' r 121
        '(' r 121
        '*' r 121
        ';' r 121
        '@' r 121
        '{' r 121
        '}' r 121
        '~' r 121
        '++' r 121
        '£' r 121
        AH r 121
        AL r 121
        asm r 121
        AX r 121
        BH r 121
        BinaryLiteral r 121
        BL r 121
        bool r 121
        BooleanLiteral r 121
        BP r 121
        break r 121
        BX r 121
        byte r 121
        case r 121
        cdecl r 121
        CH r 121
        CharLiteral r 121
        CL r 121
        const r 121
        continue r 121
        CS r 121
        CX r 121
        DecLiteral r 121
        default r 121
        DH r 121
        DI r 121
        DL r 121
        do r 121
        DS r 121
        DX r 121
        else r 121
        entry r 121
        enum r 121
        ES r 121
        extern r 121
        fastcall r 121
        for r 121
        FS r 121
        goto r 121
        GS r 121
        HexLiteral r 121
        Id r 121
        if r 121
        int r 121
        loop r 121
        namespace r 121
        next r 121
        NullLiteral r 121
        OctLiteral r 121
        override r 121
        private r 121
        return r 121
        sbyte r 121
        SI r 121
        sizeof r 121
        SP r 121
        SS r 121
        static r 121
        stdcall r 121
        string r 121
        StringLiteral r 121
        struct r 121
        switch r 121
        typedef r 121
        uint r 121
        use r 121
        void r 121
        while r 121


State 335
        Prior States: 245

        <Value> ::= '(' <Expression> ')' _                                              <Value> ::= '(' <Expression> ')' ^

        '-' r 201
        '--' r 201
        '!=' r 201
        '%' r 201
        '&' r 201
        '&&' r 201
        '&=' r 201
        ')' r 201
        '*' r 201
        '*=' r 201
        ',' r 201
        '.' r 201
        '/' r 201
        '/=' r 201
        ':' r 201
        ';' r 201
        '?' r 201
        '[' r 201
        ']' r 201
        '^' r 201
        '^=' r 201
        '|' r 201
        '||' r 201
        '|=' r 201
        '~>' r 201
        '+' r 201
        '++' r 201
        '+=' r 201
        '<' r 201
        '<~' r 201
        '<<' r 201
        '<<=' r 201
        '<=' r 201
        '<>' r 201
        '=' r 201
        '-=' r 201
        '==' r 201
        '>' r 201
        '->' r 201
        '>=' r 201
        '>>' r 201
        '>>=' r 201


State 336
        Prior States: 246

        <Op Unary> ::= '(' <Type> ')' _ <Op Unary>                                      <Op Unary> ::= '(' <Type> ')' ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Pointer> g 180
        <Op Unary> g 407
        <REGISTER> g 183
        <Value> g 184


State 337
        Prior States: 251

        <Value> ::= Id '(' ')' _                                                        <Value> ::= Id '(' ')' ^

        '-' r 199
        '--' r 199
        '!=' r 199
        '%' r 199
        '&' r 199
        '&&' r 199
        '&=' r 199
        ')' r 199
        '*' r 199
        '*=' r 199
        ',' r 199
        '.' r 199
        '/' r 199
        '/=' r 199
        ':' r 199
        ';' r 199
        '?' r 199
        '[' r 199
        ']' r 199
        '^' r 199
        '^=' r 199
        '|' r 199
        '||' r 199
        '|=' r 199
        '~>' r 199
        '+' r 199
        '++' r 199
        '+=' r 199
        '<' r 199
        '<~' r 199
        '<<' r 199
        '<<=' r 199
        '<=' r 199
        '<>' r 199
        '=' r 199
        '-=' r 199
        '==' r 199
        '>' r 199
        '->' r 199
        '>=' r 199
        '>>' r 199
        '>>=' r 199


State 338
        Prior States: 251, 408

        <PARAM EXPR> ::= <Expression> _ ',' <PARAM EXPR>                                <PARAM EXPR> ::= <Expression> ^ ',' <PARAM EXPR>
        <PARAM EXPR> ::= <Expression> _                                                 <PARAM EXPR> ::= <Expression> ^

        ',' s 408
        ')' r 204


State 339
        Prior States: 251

        <Value> ::= Id '(' <PARAM EXPR> _ ')'                                           <Value> ::= Id '(' <PARAM EXPR> ^ ')'

        ')' s 409


State 340
        Prior States: 252, 284, 287, 456

        <Value> ::= '(' _ <Expression> ')'                                              <Value> ::= '(' ^ <Expression> ')'
        <Expression> ::= _ <Op Assign>                                                  <Expression> ::= ^ <Op Assign>
        <Op Assign> ::= _ <Op If> '=' <Op Assign>                                       <Op Assign> ::= ^ <Op If> '=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<>' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '<>' <Op Assign>
        <Op Assign> ::= _ <Op If> '+=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '+=' <Op Assign>
        <Op Assign> ::= _ <Op If> '-=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '-=' <Op Assign>
        <Op Assign> ::= _ <Op If> '*=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '*=' <Op Assign>
        <Op Assign> ::= _ <Op If> '/=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '/=' <Op Assign>
        <Op Assign> ::= _ <Op If> '^=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '^=' <Op Assign>
        <Op Assign> ::= _ <Op If> '&=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '&=' <Op Assign>
        <Op Assign> ::= _ <Op If> '|=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '|=' <Op Assign>
        <Op Assign> ::= _ <Op If> '>>=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '>>=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<<=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '<<=' <Op Assign>
        <Op Assign> ::= _ <Op If>                                                       <Op Assign> ::= ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Expression> g 245
        <Op Add> g 168
        <Op And> g 169
        <Op Assign> g 170
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 176
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184


State 341
        Prior States: 252, 284, 287, 456

        <Value> ::= Id _ '(' <PARAM EXPR> ')'                                           <Value> ::= Id ^ '(' <PARAM EXPR> ')'
        <Value> ::= Id _ '(' ')'                                                        <Value> ::= Id ^ '(' ')'
        <Value> ::= Id _                                                                <Value> ::= Id ^

        '(' s 251
        '-' r 200
        '--' r 200
        '!=' r 200
        '%' r 200
        '&' r 200
        '&&' r 200
        '&=' r 200
        ')' r 200
        '*' r 200
        '*=' r 200
        ',' r 200
        '.' r 200
        '/' r 200
        '/=' r 200
        ':' r 200
        ';' r 200
        '?' r 200
        '[' r 200
        ']' r 200
        '^' r 200
        '^=' r 200
        '|' r 200
        '||' r 200
        '|=' r 200
        '~>' r 200
        '+' r 200
        '++' r 200
        '+=' r 200
        '<' r 200
        '<~' r 200
        '<<' r 200
        '<<=' r 200
        '<=' r 200
        '<>' r 200
        '=' r 200
        '-=' r 200
        '==' r 200
        '>' r 200
        '->' r 200
        '>=' r 200
        '>>' r 200
        '>>=' r 200


State 342
        Prior States: 252

        <Op Pointer> ::= Id '::' <Value> _                                              <Op Pointer> ::= Id '::' <Value> ^

        '-' r 187
        '--' r 187
        '!=' r 187
        '%' r 187
        '&' r 187
        '&&' r 187
        '&=' r 187
        ')' r 187
        '*' r 187
        '*=' r 187
        ',' r 187
        '.' r 187
        '/' r 187
        '/=' r 187
        ':' r 187
        ';' r 187
        '?' r 187
        '[' r 187
        ']' r 187
        '^' r 187
        '^=' r 187
        '|' r 187
        '||' r 187
        '|=' r 187
        '~>' r 187
        '+' r 187
        '++' r 187
        '+=' r 187
        '<' r 187
        '<~' r 187
        '<<' r 187
        '<<=' r 187
        '<=' r 187
        '<>' r 187
        '=' r 187
        '-=' r 187
        '==' r 187
        '>' r 187
        '->' r 187
        '>=' r 187
        '>>' r 187
        '>>=' r 187


State 343
        Prior States: 253

        <Op Unary> ::= sizeof '(' Id _ <Pointers> ')'                                   <Op Unary> ::= sizeof '(' Id ^ <Pointers> ')'
        <Pointers> ::= _ '*' <Pointers>                                                 <Pointers> ::= ^ '*' <Pointers>
        <Pointers> ::= _                                                                <Pointers> ::= ^

        '*' s 53
        <Pointers> g 410
        ')' r 90


State 344
        Prior States: 253

        <Op Unary> ::= sizeof '(' <Type> _ ')'                                          <Op Unary> ::= sizeof '(' <Type> ^ ')'

        ')' s 411


State 345
        Prior States: 255

        <Op Add> ::= <Op Add> '-' <Op Mult> _                                           <Op Add> ::= <Op Add> '-' <Op Mult> ^
        <Op Mult> ::= <Op Mult> _ '*' <Op Unary>                                        <Op Mult> ::= <Op Mult> ^ '*' <Op Unary>
        <Op Mult> ::= <Op Mult> _ '/' <Op Unary>                                        <Op Mult> ::= <Op Mult> ^ '/' <Op Unary>
        <Op Mult> ::= <Op Mult> _ '%' <Op Unary>                                        <Op Mult> ::= <Op Mult> ^ '%' <Op Unary>

        '%' s 277
        '*' s 278
        '/' s 279
        '-' r 164
        '!=' r 164
        '&' r 164
        '&&' r 164
        '&=' r 164
        ')' r 164
        '*=' r 164
        ',' r 164
        '/=' r 164
        ':' r 164
        ';' r 164
        '?' r 164
        ']' r 164
        '^' r 164
        '^=' r 164
        '|' r 164
        '||' r 164
        '|=' r 164
        '~>' r 164
        '+' r 164
        '+=' r 164
        '<' r 164
        '<~' r 164
        '<<' r 164
        '<<=' r 164
        '<=' r 164
        '<>' r 164
        '=' r 164
        '-=' r 164
        '==' r 164
        '>' r 164
        '>=' r 164
        '>>' r 164
        '>>=' r 164


State 346
        Prior States: 256

        <Op Add> ::= <Op Add> '+' <Op Mult> _                                           <Op Add> ::= <Op Add> '+' <Op Mult> ^
        <Op Mult> ::= <Op Mult> _ '*' <Op Unary>                                        <Op Mult> ::= <Op Mult> ^ '*' <Op Unary>
        <Op Mult> ::= <Op Mult> _ '/' <Op Unary>                                        <Op Mult> ::= <Op Mult> ^ '/' <Op Unary>
        <Op Mult> ::= <Op Mult> _ '%' <Op Unary>                                        <Op Mult> ::= <Op Mult> ^ '%' <Op Unary>

        '%' s 277
        '*' s 278
        '/' s 279
        '-' r 163
        '!=' r 163
        '&' r 163
        '&&' r 163
        '&=' r 163
        ')' r 163
        '*=' r 163
        ',' r 163
        '/=' r 163
        ':' r 163
        ';' r 163
        '?' r 163
        ']' r 163
        '^' r 163
        '^=' r 163
        '|' r 163
        '||' r 163
        '|=' r 163
        '~>' r 163
        '+' r 163
        '+=' r 163
        '<' r 163
        '<~' r 163
        '<<' r 163
        '<<=' r 163
        '<=' r 163
        '<>' r 163
        '=' r 163
        '-=' r 163
        '==' r 163
        '>' r 163
        '>=' r 163
        '>>' r 163
        '>>=' r 163


State 347
        Prior States: 257

        <Op And> ::= <Op And> '&&' <Op BinOR> _                                         <Op And> ::= <Op And> '&&' <Op BinOR> ^
        <Op BinOR> ::= <Op BinOR> _ '|' <Op BinXOR>                                     <Op BinOR> ::= <Op BinOR> ^ '|' <Op BinXOR>

        '|' s 259
        '&&' r 141
        '&=' r 141
        ')' r 141
        '*=' r 141
        ',' r 141
        '/=' r 141
        ':' r 141
        ';' r 141
        '?' r 141
        ']' r 141
        '^=' r 141
        '||' r 141
        '|=' r 141
        '+=' r 141
        '<<=' r 141
        '<>' r 141
        '=' r 141
        '-=' r 141
        '>>=' r 141


State 348
        Prior States: 258

        <Op BinAND> ::= <Op BinAND> '&' <Op Equate> _                                   <Op BinAND> ::= <Op BinAND> '&' <Op Equate> ^
        <Op Equate> ::= <Op Equate> _ '==' <Op NEqual>                                  <Op Equate> ::= <Op Equate> ^ '==' <Op NEqual>

        '==' s 265
        '&' r 147
        '&&' r 147
        '&=' r 147
        ')' r 147
        '*=' r 147
        ',' r 147
        '/=' r 147
        ':' r 147
        ';' r 147
        '?' r 147
        ']' r 147
        '^' r 147
        '^=' r 147
        '|' r 147
        '||' r 147
        '|=' r 147
        '+=' r 147
        '<<=' r 147
        '<>' r 147
        '=' r 147
        '-=' r 147
        '>>=' r 147


State 349
        Prior States: 259

        <Op BinOR> ::= <Op BinOR> '|' <Op BinXOR> _                                     <Op BinOR> ::= <Op BinOR> '|' <Op BinXOR> ^
        <Op BinXOR> ::= <Op BinXOR> _ '^' <Op BinAND>                                   <Op BinXOR> ::= <Op BinXOR> ^ '^' <Op BinAND>

        '^' s 260
        '&&' r 143
        '&=' r 143
        ')' r 143
        '*=' r 143
        ',' r 143
        '/=' r 143
        ':' r 143
        ';' r 143
        '?' r 143
        ']' r 143
        '^=' r 143
        '|' r 143
        '||' r 143
        '|=' r 143
        '+=' r 143
        '<<=' r 143
        '<>' r 143
        '=' r 143
        '-=' r 143
        '>>=' r 143


State 350
        Prior States: 260

        <Op BinXOR> ::= <Op BinXOR> '^' <Op BinAND> _                                   <Op BinXOR> ::= <Op BinXOR> '^' <Op BinAND> ^
        <Op BinAND> ::= <Op BinAND> _ '&' <Op Equate>                                   <Op BinAND> ::= <Op BinAND> ^ '&' <Op Equate>

        '&' s 258
        '&&' r 145
        '&=' r 145
        ')' r 145
        '*=' r 145
        ',' r 145
        '/=' r 145
        ':' r 145
        ';' r 145
        '?' r 145
        ']' r 145
        '^' r 145
        '^=' r 145
        '|' r 145
        '||' r 145
        '|=' r 145
        '+=' r 145
        '<<=' r 145
        '<>' r 145
        '=' r 145
        '-=' r 145
        '>>=' r 145


State 351
        Prior States: 261

        <Op Compare> ::= <Op Compare> '<' <Op Shift> _                                  <Op Compare> ::= <Op Compare> '<' <Op Shift> ^
        <Op Shift> ::= <Op Shift> _ '<<' <Op Add>                                       <Op Shift> ::= <Op Shift> ^ '<<' <Op Add>
        <Op Shift> ::= <Op Shift> _ '>>' <Op Add>                                       <Op Shift> ::= <Op Shift> ^ '>>' <Op Add>
        <Op Shift> ::= <Op Shift> _ '~>' <Op Add>                                       <Op Shift> ::= <Op Shift> ^ '~>' <Op Add>
        <Op Shift> ::= <Op Shift> _ '<~' <Op Add>                                       <Op Shift> ::= <Op Shift> ^ '<~' <Op Add>

        '~>' s 288
        '<~' s 289
        '<<' s 290
        '>>' s 291
        '!=' r 153
        '&' r 153
        '&&' r 153
        '&=' r 153
        ')' r 153
        '*=' r 153
        ',' r 153
        '/=' r 153
        ':' r 153
        ';' r 153
        '?' r 153
        ']' r 153
        '^' r 153
        '^=' r 153
        '|' r 153
        '||' r 153
        '|=' r 153
        '+=' r 153
        '<' r 153
        '<<=' r 153
        '<=' r 153
        '<>' r 153
        '=' r 153
        '-=' r 153
        '==' r 153
        '>' r 153
        '>=' r 153
        '>>=' r 153


State 352
        Prior States: 262

        <Op Compare> ::= <Op Compare> '<=' <Op Shift> _                                 <Op Compare> ::= <Op Compare> '<=' <Op Shift> ^
        <Op Shift> ::= <Op Shift> _ '<<' <Op Add>                                       <Op Shift> ::= <Op Shift> ^ '<<' <Op Add>
        <Op Shift> ::= <Op Shift> _ '>>' <Op Add>                                       <Op Shift> ::= <Op Shift> ^ '>>' <Op Add>
        <Op Shift> ::= <Op Shift> _ '~>' <Op Add>                                       <Op Shift> ::= <Op Shift> ^ '~>' <Op Add>
        <Op Shift> ::= <Op Shift> _ '<~' <Op Add>                                       <Op Shift> ::= <Op Shift> ^ '<~' <Op Add>

        '~>' s 288
        '<~' s 289
        '<<' s 290
        '>>' s 291
        '!=' r 155
        '&' r 155
        '&&' r 155
        '&=' r 155
        ')' r 155
        '*=' r 155
        ',' r 155
        '/=' r 155
        ':' r 155
        ';' r 155
        '?' r 155
        ']' r 155
        '^' r 155
        '^=' r 155
        '|' r 155
        '||' r 155
        '|=' r 155
        '+=' r 155
        '<' r 155
        '<<=' r 155
        '<=' r 155
        '<>' r 155
        '=' r 155
        '-=' r 155
        '==' r 155
        '>' r 155
        '>=' r 155
        '>>=' r 155


State 353
        Prior States: 263

        <Op Compare> ::= <Op Compare> '>' <Op Shift> _                                  <Op Compare> ::= <Op Compare> '>' <Op Shift> ^
        <Op Shift> ::= <Op Shift> _ '<<' <Op Add>                                       <Op Shift> ::= <Op Shift> ^ '<<' <Op Add>
        <Op Shift> ::= <Op Shift> _ '>>' <Op Add>                                       <Op Shift> ::= <Op Shift> ^ '>>' <Op Add>
        <Op Shift> ::= <Op Shift> _ '~>' <Op Add>                                       <Op Shift> ::= <Op Shift> ^ '~>' <Op Add>
        <Op Shift> ::= <Op Shift> _ '<~' <Op Add>                                       <Op Shift> ::= <Op Shift> ^ '<~' <Op Add>

        '~>' s 288
        '<~' s 289
        '<<' s 290
        '>>' s 291
        '!=' r 154
        '&' r 154
        '&&' r 154
        '&=' r 154
        ')' r 154
        '*=' r 154
        ',' r 154
        '/=' r 154
        ':' r 154
        ';' r 154
        '?' r 154
        ']' r 154
        '^' r 154
        '^=' r 154
        '|' r 154
        '||' r 154
        '|=' r 154
        '+=' r 154
        '<' r 154
        '<<=' r 154
        '<=' r 154
        '<>' r 154
        '=' r 154
        '-=' r 154
        '==' r 154
        '>' r 154
        '>=' r 154
        '>>=' r 154


State 354
        Prior States: 264

        <Op Compare> ::= <Op Compare> '>=' <Op Shift> _                                 <Op Compare> ::= <Op Compare> '>=' <Op Shift> ^
        <Op Shift> ::= <Op Shift> _ '<<' <Op Add>                                       <Op Shift> ::= <Op Shift> ^ '<<' <Op Add>
        <Op Shift> ::= <Op Shift> _ '>>' <Op Add>                                       <Op Shift> ::= <Op Shift> ^ '>>' <Op Add>
        <Op Shift> ::= <Op Shift> _ '~>' <Op Add>                                       <Op Shift> ::= <Op Shift> ^ '~>' <Op Add>
        <Op Shift> ::= <Op Shift> _ '<~' <Op Add>                                       <Op Shift> ::= <Op Shift> ^ '<~' <Op Add>

        '~>' s 288
        '<~' s 289
        '<<' s 290
        '>>' s 291
        '!=' r 156
        '&' r 156
        '&&' r 156
        '&=' r 156
        ')' r 156
        '*=' r 156
        ',' r 156
        '/=' r 156
        ':' r 156
        ';' r 156
        '?' r 156
        ']' r 156
        '^' r 156
        '^=' r 156
        '|' r 156
        '||' r 156
        '|=' r 156
        '+=' r 156
        '<' r 156
        '<<=' r 156
        '<=' r 156
        '<>' r 156
        '=' r 156
        '-=' r 156
        '==' r 156
        '>' r 156
        '>=' r 156
        '>>=' r 156


State 355
        Prior States: 265

        <Op Equate> ::= <Op Equate> '==' <Op NEqual> _                                  <Op Equate> ::= <Op Equate> '==' <Op NEqual> ^
        <Op NEqual> ::= <Op NEqual> _ '!=' <Op Compare>                                 <Op NEqual> ::= <Op NEqual> ^ '!=' <Op Compare>

        '!=' s 280
        '&' r 149
        '&&' r 149
        '&=' r 149
        ')' r 149
        '*=' r 149
        ',' r 149
        '/=' r 149
        ':' r 149
        ';' r 149
        '?' r 149
        ']' r 149
        '^' r 149
        '^=' r 149
        '|' r 149
        '||' r 149
        '|=' r 149
        '+=' r 149
        '<<=' r 149
        '<>' r 149
        '=' r 149
        '-=' r 149
        '==' r 149
        '>>=' r 149


State 356
        Prior States: 266

        <Op Assign> ::= <Op If> '&=' <Op Assign> _                                      <Op Assign> ::= <Op If> '&=' <Op Assign> ^

        ')' r 132
        ',' r 132
        ';' r 132
        ']' r 132


State 357
        Prior States: 267

        <Op Assign> ::= <Op If> '*=' <Op Assign> _                                      <Op Assign> ::= <Op If> '*=' <Op Assign> ^

        ')' r 129
        ',' r 129
        ';' r 129
        ']' r 129


State 358
        Prior States: 268

        <Op Assign> ::= <Op If> '/=' <Op Assign> _                                      <Op Assign> ::= <Op If> '/=' <Op Assign> ^

        ')' r 130
        ',' r 130
        ';' r 130
        ']' r 130


State 359
        Prior States: 269

        <Op Assign> ::= <Op If> '^=' <Op Assign> _                                      <Op Assign> ::= <Op If> '^=' <Op Assign> ^

        ')' r 131
        ',' r 131
        ';' r 131
        ']' r 131


State 360
        Prior States: 270

        <Op Assign> ::= <Op If> '|=' <Op Assign> _                                      <Op Assign> ::= <Op If> '|=' <Op Assign> ^

        ')' r 133
        ',' r 133
        ';' r 133
        ']' r 133


State 361
        Prior States: 271

        <Op Assign> ::= <Op If> '+=' <Op Assign> _                                      <Op Assign> ::= <Op If> '+=' <Op Assign> ^

        ')' r 127
        ',' r 127
        ';' r 127
        ']' r 127


State 362
        Prior States: 272

        <Op Assign> ::= <Op If> '<<=' <Op Assign> _                                     <Op Assign> ::= <Op If> '<<=' <Op Assign> ^

        ')' r 135
        ',' r 135
        ';' r 135
        ']' r 135


State 363
        Prior States: 273

        <Op Assign> ::= <Op If> '<>' <Op Assign> _                                      <Op Assign> ::= <Op If> '<>' <Op Assign> ^

        ')' r 126
        ',' r 126
        ';' r 126
        ']' r 126


State 364
        Prior States: 274

        <Op Assign> ::= <Op If> '=' <Op Assign> _                                       <Op Assign> ::= <Op If> '=' <Op Assign> ^

        ')' r 125
        ',' r 125
        ';' r 125
        ']' r 125


State 365
        Prior States: 275

        <Op Assign> ::= <Op If> '-=' <Op Assign> _                                      <Op Assign> ::= <Op If> '-=' <Op Assign> ^

        ')' r 128
        ',' r 128
        ';' r 128
        ']' r 128


State 366
        Prior States: 276

        <Op Assign> ::= <Op If> '>>=' <Op Assign> _                                     <Op Assign> ::= <Op If> '>>=' <Op Assign> ^

        ')' r 134
        ',' r 134
        ';' r 134
        ']' r 134


State 367
        Prior States: 277

        <Op Mult> ::= <Op Mult> '%' <Op Unary> _                                        <Op Mult> ::= <Op Mult> '%' <Op Unary> ^

        '-' r 168
        '!=' r 168
        '%' r 168
        '&' r 168
        '&&' r 168
        '&=' r 168
        ')' r 168
        '*' r 168
        '*=' r 168
        ',' r 168
        '/' r 168
        '/=' r 168
        ':' r 168
        ';' r 168
        '?' r 168
        ']' r 168
        '^' r 168
        '^=' r 168
        '|' r 168
        '||' r 168
        '|=' r 168
        '~>' r 168
        '+' r 168
        '+=' r 168
        '<' r 168
        '<~' r 168
        '<<' r 168
        '<<=' r 168
        '<=' r 168
        '<>' r 168
        '=' r 168
        '-=' r 168
        '==' r 168
        '>' r 168
        '>=' r 168
        '>>' r 168
        '>>=' r 168


State 368
        Prior States: 278

        <Op Mult> ::= <Op Mult> '*' <Op Unary> _                                        <Op Mult> ::= <Op Mult> '*' <Op Unary> ^

        '-' r 166
        '!=' r 166
        '%' r 166
        '&' r 166
        '&&' r 166
        '&=' r 166
        ')' r 166
        '*' r 166
        '*=' r 166
        ',' r 166
        '/' r 166
        '/=' r 166
        ':' r 166
        ';' r 166
        '?' r 166
        ']' r 166
        '^' r 166
        '^=' r 166
        '|' r 166
        '||' r 166
        '|=' r 166
        '~>' r 166
        '+' r 166
        '+=' r 166
        '<' r 166
        '<~' r 166
        '<<' r 166
        '<<=' r 166
        '<=' r 166
        '<>' r 166
        '=' r 166
        '-=' r 166
        '==' r 166
        '>' r 166
        '>=' r 166
        '>>' r 166
        '>>=' r 166


State 369
        Prior States: 279

        <Op Mult> ::= <Op Mult> '/' <Op Unary> _                                        <Op Mult> ::= <Op Mult> '/' <Op Unary> ^

        '-' r 167
        '!=' r 167
        '%' r 167
        '&' r 167
        '&&' r 167
        '&=' r 167
        ')' r 167
        '*' r 167
        '*=' r 167
        ',' r 167
        '/' r 167
        '/=' r 167
        ':' r 167
        ';' r 167
        '?' r 167
        ']' r 167
        '^' r 167
        '^=' r 167
        '|' r 167
        '||' r 167
        '|=' r 167
        '~>' r 167
        '+' r 167
        '+=' r 167
        '<' r 167
        '<~' r 167
        '<<' r 167
        '<<=' r 167
        '<=' r 167
        '<>' r 167
        '=' r 167
        '-=' r 167
        '==' r 167
        '>' r 167
        '>=' r 167
        '>>' r 167
        '>>=' r 167


State 370
        Prior States: 280

        <Op NEqual> ::= <Op NEqual> '!=' <Op Compare> _                                 <Op NEqual> ::= <Op NEqual> '!=' <Op Compare> ^
        <Op Compare> ::= <Op Compare> _ '<' <Op Shift>                                  <Op Compare> ::= <Op Compare> ^ '<' <Op Shift>
        <Op Compare> ::= <Op Compare> _ '>' <Op Shift>                                  <Op Compare> ::= <Op Compare> ^ '>' <Op Shift>
        <Op Compare> ::= <Op Compare> _ '<=' <Op Shift>                                 <Op Compare> ::= <Op Compare> ^ '<=' <Op Shift>
        <Op Compare> ::= <Op Compare> _ '>=' <Op Shift>                                 <Op Compare> ::= <Op Compare> ^ '>=' <Op Shift>

        '<' s 261
        '<=' s 262
        '>' s 263
        '>=' s 264
        '!=' r 151
        '&' r 151
        '&&' r 151
        '&=' r 151
        ')' r 151
        '*=' r 151
        ',' r 151
        '/=' r 151
        ':' r 151
        ';' r 151
        '?' r 151
        ']' r 151
        '^' r 151
        '^=' r 151
        '|' r 151
        '||' r 151
        '|=' r 151
        '+=' r 151
        '<<=' r 151
        '<>' r 151
        '=' r 151
        '-=' r 151
        '==' r 151
        '>>=' r 151


State 371
        Prior States: 281

        <Op If> ::= <Op Or> '?' <Op If> _ ':' <Op If>                                   <Op If> ::= <Op Or> '?' <Op If> ^ ':' <Op If>

        ':' s 412


State 372
        Prior States: 282

        <Op Or> ::= <Op Or> '||' <Op And> _                                             <Op Or> ::= <Op Or> '||' <Op And> ^
        <Op And> ::= <Op And> _ '&&' <Op BinOR>                                         <Op And> ::= <Op And> ^ '&&' <Op BinOR>

        '&&' s 257
        '&=' r 139
        ')' r 139
        '*=' r 139
        ',' r 139
        '/=' r 139
        ':' r 139
        ';' r 139
        '?' r 139
        ']' r 139
        '^=' r 139
        '||' r 139
        '|=' r 139
        '+=' r 139
        '<<=' r 139
        '<>' r 139
        '=' r 139
        '-=' r 139
        '>>=' r 139


State 373
        Prior States: 284

        <Op Pointer> ::= <Op Pointer> '.' <Value> _                                     <Op Pointer> ::= <Op Pointer> '.' <Value> ^

        '-' r 185
        '--' r 185
        '!=' r 185
        '%' r 185
        '&' r 185
        '&&' r 185
        '&=' r 185
        ')' r 185
        '*' r 185
        '*=' r 185
        ',' r 185
        '.' r 185
        '/' r 185
        '/=' r 185
        ':' r 185
        ';' r 185
        '?' r 185
        '[' r 185
        ']' r 185
        '^' r 185
        '^=' r 185
        '|' r 185
        '||' r 185
        '|=' r 185
        '~>' r 185
        '+' r 185
        '++' r 185
        '+=' r 185
        '<' r 185
        '<~' r 185
        '<<' r 185
        '<<=' r 185
        '<=' r 185
        '<>' r 185
        '=' r 185
        '-=' r 185
        '==' r 185
        '>' r 185
        '->' r 185
        '>=' r 185
        '>>' r 185
        '>>=' r 185


State 374
        Prior States: 285

        <Op Pointer> ::= <Op Pointer> '[' <Expression> _ ']'                            <Op Pointer> ::= <Op Pointer> '[' <Expression> ^ ']'

        ']' s 413


State 375
        Prior States: 287

        <Op Pointer> ::= <Op Pointer> '->' <Value> _                                    <Op Pointer> ::= <Op Pointer> '->' <Value> ^

        '-' r 186
        '--' r 186
        '!=' r 186
        '%' r 186
        '&' r 186
        '&&' r 186
        '&=' r 186
        ')' r 186
        '*' r 186
        '*=' r 186
        ',' r 186
        '.' r 186
        '/' r 186
        '/=' r 186
        ':' r 186
        ';' r 186
        '?' r 186
        '[' r 186
        ']' r 186
        '^' r 186
        '^=' r 186
        '|' r 186
        '||' r 186
        '|=' r 186
        '~>' r 186
        '+' r 186
        '++' r 186
        '+=' r 186
        '<' r 186
        '<~' r 186
        '<<' r 186
        '<<=' r 186
        '<=' r 186
        '<>' r 186
        '=' r 186
        '-=' r 186
        '==' r 186
        '>' r 186
        '->' r 186
        '>=' r 186
        '>>' r 186
        '>>=' r 186


State 376
        Prior States: 288

        <Op Shift> ::= <Op Shift> '~>' <Op Add> _                                       <Op Shift> ::= <Op Shift> '~>' <Op Add> ^
        <Op Add> ::= <Op Add> _ '+' <Op Mult>                                           <Op Add> ::= <Op Add> ^ '+' <Op Mult>
        <Op Add> ::= <Op Add> _ '-' <Op Mult>                                           <Op Add> ::= <Op Add> ^ '-' <Op Mult>

        '-' s 255
        '+' s 256
        '!=' r 160
        '&' r 160
        '&&' r 160
        '&=' r 160
        ')' r 160
        '*=' r 160
        ',' r 160
        '/=' r 160
        ':' r 160
        ';' r 160
        '?' r 160
        ']' r 160
        '^' r 160
        '^=' r 160
        '|' r 160
        '||' r 160
        '|=' r 160
        '~>' r 160
        '+=' r 160
        '<' r 160
        '<~' r 160
        '<<' r 160
        '<<=' r 160
        '<=' r 160
        '<>' r 160
        '=' r 160
        '-=' r 160
        '==' r 160
        '>' r 160
        '>=' r 160
        '>>' r 160
        '>>=' r 160


State 377
        Prior States: 289

        <Op Shift> ::= <Op Shift> '<~' <Op Add> _                                       <Op Shift> ::= <Op Shift> '<~' <Op Add> ^
        <Op Add> ::= <Op Add> _ '+' <Op Mult>                                           <Op Add> ::= <Op Add> ^ '+' <Op Mult>
        <Op Add> ::= <Op Add> _ '-' <Op Mult>                                           <Op Add> ::= <Op Add> ^ '-' <Op Mult>

        '-' s 255
        '+' s 256
        '!=' r 161
        '&' r 161
        '&&' r 161
        '&=' r 161
        ')' r 161
        '*=' r 161
        ',' r 161
        '/=' r 161
        ':' r 161
        ';' r 161
        '?' r 161
        ']' r 161
        '^' r 161
        '^=' r 161
        '|' r 161
        '||' r 161
        '|=' r 161
        '~>' r 161
        '+=' r 161
        '<' r 161
        '<~' r 161
        '<<' r 161
        '<<=' r 161
        '<=' r 161
        '<>' r 161
        '=' r 161
        '-=' r 161
        '==' r 161
        '>' r 161
        '>=' r 161
        '>>' r 161
        '>>=' r 161


State 378
        Prior States: 290

        <Op Shift> ::= <Op Shift> '<<' <Op Add> _                                       <Op Shift> ::= <Op Shift> '<<' <Op Add> ^
        <Op Add> ::= <Op Add> _ '+' <Op Mult>                                           <Op Add> ::= <Op Add> ^ '+' <Op Mult>
        <Op Add> ::= <Op Add> _ '-' <Op Mult>                                           <Op Add> ::= <Op Add> ^ '-' <Op Mult>

        '-' s 255
        '+' s 256
        '!=' r 158
        '&' r 158
        '&&' r 158
        '&=' r 158
        ')' r 158
        '*=' r 158
        ',' r 158
        '/=' r 158
        ':' r 158
        ';' r 158
        '?' r 158
        ']' r 158
        '^' r 158
        '^=' r 158
        '|' r 158
        '||' r 158
        '|=' r 158
        '~>' r 158
        '+=' r 158
        '<' r 158
        '<~' r 158
        '<<' r 158
        '<<=' r 158
        '<=' r 158
        '<>' r 158
        '=' r 158
        '-=' r 158
        '==' r 158
        '>' r 158
        '>=' r 158
        '>>' r 158
        '>>=' r 158


State 379
        Prior States: 291

        <Op Shift> ::= <Op Shift> '>>' <Op Add> _                                       <Op Shift> ::= <Op Shift> '>>' <Op Add> ^
        <Op Add> ::= <Op Add> _ '+' <Op Mult>                                           <Op Add> ::= <Op Add> ^ '+' <Op Mult>
        <Op Add> ::= <Op Add> _ '-' <Op Mult>                                           <Op Add> ::= <Op Add> ^ '-' <Op Mult>

        '-' s 255
        '+' s 256
        '!=' r 159
        '&' r 159
        '&&' r 159
        '&=' r 159
        ')' r 159
        '*=' r 159
        ',' r 159
        '/=' r 159
        ':' r 159
        ';' r 159
        '?' r 159
        ']' r 159
        '^' r 159
        '^=' r 159
        '|' r 159
        '||' r 159
        '|=' r 159
        '~>' r 159
        '+=' r 159
        '<' r 159
        '<~' r 159
        '<<' r 159
        '<<=' r 159
        '<=' r 159
        '<>' r 159
        '=' r 159
        '-=' r 159
        '==' r 159
        '>' r 159
        '>=' r 159
        '>>' r 159
        '>>=' r 159


State 380
        Prior States: 302

        <Oper Decl> ::= override <Type> operator '-' '(' <Params> ')' _ <Block>         <Oper Decl> ::= override <Type> operator '-' '(' <Params> ')' ^ <Block>
        <Block> ::= _ '{' <Stm List> '}'                                                <Block> ::= ^ '{' <Stm List> '}'

        '{' s 116
        <Block> g 414


State 381
        Prior States: 303

        <Oper Decl> ::= override <Type> operator '!=' '(' <Params> ')' _ <Block>        <Oper Decl> ::= override <Type> operator '!=' '(' <Params> ')' ^ <Block>
        <Block> ::= _ '{' <Stm List> '}'                                                <Block> ::= ^ '{' <Stm List> '}'

        '{' s 116
        <Block> g 415


State 382
        Prior States: 304

        <Oper Decl> ::= override <Type> operator '%' '(' <Params> ')' _ <Block>         <Oper Decl> ::= override <Type> operator '%' '(' <Params> ')' ^ <Block>
        <Block> ::= _ '{' <Stm List> '}'                                                <Block> ::= ^ '{' <Stm List> '}'

        '{' s 116
        <Block> g 416


State 383
        Prior States: 305

        <Oper Decl> ::= override <Type> operator '&' '(' <Params> ')' _ <Block>         <Oper Decl> ::= override <Type> operator '&' '(' <Params> ')' ^ <Block>
        <Block> ::= _ '{' <Stm List> '}'                                                <Block> ::= ^ '{' <Stm List> '}'

        '{' s 116
        <Block> g 417


State 384
        Prior States: 306

        <Oper Decl> ::= override <Type> operator '*' '(' <Params> ')' _ <Block>         <Oper Decl> ::= override <Type> operator '*' '(' <Params> ')' ^ <Block>
        <Block> ::= _ '{' <Stm List> '}'                                                <Block> ::= ^ '{' <Stm List> '}'

        '{' s 116
        <Block> g 418


State 385
        Prior States: 307

        <Oper Decl> ::= override <Type> operator '/' '(' <Params> ')' _ <Block>         <Oper Decl> ::= override <Type> operator '/' '(' <Params> ')' ^ <Block>
        <Block> ::= _ '{' <Stm List> '}'                                                <Block> ::= ^ '{' <Stm List> '}'

        '{' s 116
        <Block> g 419


State 386
        Prior States: 308

        <Oper Decl> ::= override <Type> operator '^' '(' <Params> ')' _ <Block>         <Oper Decl> ::= override <Type> operator '^' '(' <Params> ')' ^ <Block>
        <Block> ::= _ '{' <Stm List> '}'                                                <Block> ::= ^ '{' <Stm List> '}'

        '{' s 116
        <Block> g 420


State 387
        Prior States: 309

        <Oper Decl> ::= override <Type> operator '|' '(' <Params> ')' _ <Block>         <Oper Decl> ::= override <Type> operator '|' '(' <Params> ')' ^ <Block>
        <Block> ::= _ '{' <Stm List> '}'                                                <Block> ::= ^ '{' <Stm List> '}'

        '{' s 116
        <Block> g 421


State 388
        Prior States: 310

        <Oper Decl> ::= override <Type> operator '+' '(' <Params> ')' _ <Block>         <Oper Decl> ::= override <Type> operator '+' '(' <Params> ')' ^ <Block>
        <Block> ::= _ '{' <Stm List> '}'                                                <Block> ::= ^ '{' <Stm List> '}'

        '{' s 116
        <Block> g 422


State 389
        Prior States: 311

        <Oper Decl> ::= override <Type> operator '<' '(' <Params> ')' _ <Block>         <Oper Decl> ::= override <Type> operator '<' '(' <Params> ')' ^ <Block>
        <Block> ::= _ '{' <Stm List> '}'                                                <Block> ::= ^ '{' <Stm List> '}'

        '{' s 116
        <Block> g 423


State 390
        Prior States: 312

        <Oper Decl> ::= override <Type> operator '<=' '(' <Params> ')' _ <Block>        <Oper Decl> ::= override <Type> operator '<=' '(' <Params> ')' ^ <Block>
        <Block> ::= _ '{' <Stm List> '}'                                                <Block> ::= ^ '{' <Stm List> '}'

        '{' s 116
        <Block> g 424


State 391
        Prior States: 313

        <Oper Decl> ::= override <Type> operator '==' '(' <Params> ')' _ <Block>        <Oper Decl> ::= override <Type> operator '==' '(' <Params> ')' ^ <Block>
        <Block> ::= _ '{' <Stm List> '}'                                                <Block> ::= ^ '{' <Stm List> '}'

        '{' s 116
        <Block> g 425


State 392
        Prior States: 314

        <Oper Decl> ::= override <Type> operator '>' '(' <Params> ')' _ <Block>         <Oper Decl> ::= override <Type> operator '>' '(' <Params> ')' ^ <Block>
        <Block> ::= _ '{' <Stm List> '}'                                                <Block> ::= ^ '{' <Stm List> '}'

        '{' s 116
        <Block> g 426


State 393
        Prior States: 315

        <Oper Decl> ::= override <Type> operator '>=' '(' <Params> ')' _ <Block>        <Oper Decl> ::= override <Type> operator '>=' '(' <Params> ')' ^ <Block>
        <Block> ::= _ '{' <Stm List> '}'                                                <Block> ::= ^ '{' <Stm List> '}'

        '{' s 116
        <Block> g 427


State 394
        Prior States: 317, 395

        <INSTRUCTION> ::= StringLiteral _ ';'                                           <INSTRUCTION> ::= StringLiteral ^ ';'

        ';' s 428


State 395
        Prior States: 317, 395

        <INSTRUCTIONS> ::= <INSTRUCTION> _ <INSTRUCTIONS>                               <INSTRUCTIONS> ::= <INSTRUCTION> ^ <INSTRUCTIONS>
        <INSTRUCTION> ::= _ StringLiteral ';'                                           <INSTRUCTION> ::= ^ StringLiteral ';'
        <INSTRUCTIONS> ::= _ <INSTRUCTION> <INSTRUCTIONS>                               <INSTRUCTIONS> ::= ^ <INSTRUCTION> <INSTRUCTIONS>
        <INSTRUCTIONS> ::= _                                                            <INSTRUCTIONS> ::= ^

        StringLiteral s 394
        <INSTRUCTION> g 395
        <INSTRUCTIONS> g 429
        '}' r 230


State 396
        Prior States: 317

        <Statement> ::= asm '{' <INSTRUCTIONS> _ '}'                                    <Statement> ::= asm '{' <INSTRUCTIONS> ^ '}'

        '}' s 430


State 397
        Prior States: 320

        <Normal Stm> ::= do <Statement> while _ '(' <Expression> ')'                    <Normal Stm> ::= do <Statement> while ^ '(' <Expression> ')'

        '(' s 431


State 398
        Prior States: 321

        <Statement> ::= for '(' <Arg> _ ';' <Arg> ';' <Arg> ')' <Statement>             <Statement> ::= for '(' <Arg> ^ ';' <Arg> ';' <Arg> ')' <Statement>

        ';' s 432


State 399
        Prior States: 321, 432, 451, 452, 468, 478

        <Arg> ::= <Expression> _                                                        <Arg> ::= <Expression> ^

        ')' r 116
        ';' r 116


State 400
        Prior States: 322

        <Normal Stm> ::= goto case DecLiteral _ ';'                                     <Normal Stm> ::= goto case DecLiteral ^ ';'

        ';' s 433


State 401
        Prior States: 323

        <Normal Stm> ::= goto default ';' _                                             <Normal Stm> ::= goto default ';' ^

        '-' r 112
        '--' r 112
        '!' r 112
        '$' r 112
        '&' r 112
        '(' r 112
        '*' r 112
        ';' r 112
        '@' r 112
        '{' r 112
        '}' r 112
        '~' r 112
        '++' r 112
        '£' r 112
        AH r 112
        AL r 112
        asm r 112
        AX r 112
        BH r 112
        BinaryLiteral r 112
        BL r 112
        bool r 112
        BooleanLiteral r 112
        BP r 112
        break r 112
        BX r 112
        byte r 112
        case r 112
        CH r 112
        CharLiteral r 112
        CL r 112
        const r 112
        continue r 112
        CS r 112
        CX r 112
        DecLiteral r 112
        default r 112
        DH r 112
        DI r 112
        DL r 112
        do r 112
        DS r 112
        DX r 112
        else r 112
        enum r 112
        ES r 112
        extern r 112
        for r 112
        FS r 112
        goto r 112
        GS r 112
        HexLiteral r 112
        Id r 112
        if r 112
        int r 112
        loop r 112
        next r 112
        NullLiteral r 112
        OctLiteral r 112
        private r 112
        return r 112
        sbyte r 112
        SI r 112
        sizeof r 112
        SP r 112
        SS r 112
        static r 112
        string r 112
        StringLiteral r 112
        struct r 112
        switch r 112
        uint r 112
        void r 112
        while r 112


State 402
        Prior States: 324

        <Normal Stm> ::= goto Id ';' _                                                  <Normal Stm> ::= goto Id ';' ^

        '-' r 108
        '--' r 108
        '!' r 108
        '$' r 108
        '&' r 108
        '(' r 108
        '*' r 108
        ';' r 108
        '@' r 108
        '{' r 108
        '}' r 108
        '~' r 108
        '++' r 108
        '£' r 108
        AH r 108
        AL r 108
        asm r 108
        AX r 108
        BH r 108
        BinaryLiteral r 108
        BL r 108
        bool r 108
        BooleanLiteral r 108
        BP r 108
        break r 108
        BX r 108
        byte r 108
        case r 108
        CH r 108
        CharLiteral r 108
        CL r 108
        const r 108
        continue r 108
        CS r 108
        CX r 108
        DecLiteral r 108
        default r 108
        DH r 108
        DI r 108
        DL r 108
        do r 108
        DS r 108
        DX r 108
        else r 108
        enum r 108
        ES r 108
        extern r 108
        for r 108
        FS r 108
        goto r 108
        GS r 108
        HexLiteral r 108
        Id r 108
        if r 108
        int r 108
        loop r 108
        next r 108
        NullLiteral r 108
        OctLiteral r 108
        private r 108
        return r 108
        sbyte r 108
        SI r 108
        sizeof r 108
        SP r 108
        SS r 108
        static r 108
        string r 108
        StringLiteral r 108
        struct r 108
        switch r 108
        uint r 108
        void r 108
        while r 108


State 403
        Prior States: 326

        <Statement> ::= if '(' <Expression> _ ')' <Statement>                           <Statement> ::= if '(' <Expression> ^ ')' <Statement>
        <Statement> ::= if '(' <Expression> _ ')' <Then Stm> else <Statement>           <Statement> ::= if '(' <Expression> ^ ')' <Then Stm> else <Statement>

        ')' s 434


State 404
        Prior States: 329

        <Normal Stm> ::= return <Expression> ';' _                                      <Normal Stm> ::= return <Expression> ';' ^

        '-' r 114
        '--' r 114
        '!' r 114
        '$' r 114
        '&' r 114
        '(' r 114
        '*' r 114
        ';' r 114
        '@' r 114
        '{' r 114
        '}' r 114
        '~' r 114
        '++' r 114
        '£' r 114
        AH r 114
        AL r 114
        asm r 114
        AX r 114
        BH r 114
        BinaryLiteral r 114
        BL r 114
        bool r 114
        BooleanLiteral r 114
        BP r 114
        break r 114
        BX r 114
        byte r 114
        case r 114
        CH r 114
        CharLiteral r 114
        CL r 114
        const r 114
        continue r 114
        CS r 114
        CX r 114
        DecLiteral r 114
        default r 114
        DH r 114
        DI r 114
        DL r 114
        do r 114
        DS r 114
        DX r 114
        else r 114
        enum r 114
        ES r 114
        extern r 114
        for r 114
        FS r 114
        goto r 114
        GS r 114
        HexLiteral r 114
        Id r 114
        if r 114
        int r 114
        loop r 114
        next r 114
        NullLiteral r 114
        OctLiteral r 114
        private r 114
        return r 114
        sbyte r 114
        SI r 114
        sizeof r 114
        SP r 114
        SS r 114
        static r 114
        string r 114
        StringLiteral r 114
        struct r 114
        switch r 114
        uint r 114
        void r 114
        while r 114


State 405
        Prior States: 330

        <Normal Stm> ::= switch '(' <Expression> _ ')' '{' <Case Stms> '}'              <Normal Stm> ::= switch '(' <Expression> ^ ')' '{' <Case Stms> '}'

        ')' s 435


State 406
        Prior States: 331

        <Statement> ::= while '(' <Expression> _ ')' <Statement>                        <Statement> ::= while '(' <Expression> ^ ')' <Statement>

        ')' s 436


State 407
        Prior States: 336

        <Op Unary> ::= '(' <Type> ')' <Op Unary> _                                      <Op Unary> ::= '(' <Type> ')' <Op Unary> ^

        '-' r 181
        '!=' r 181
        '%' r 181
        '&' r 181
        '&&' r 181
        '&=' r 181
        ')' r 181
        '*' r 181
        '*=' r 181
        ',' r 181
        '/' r 181
        '/=' r 181
        ':' r 181
        ';' r 181
        '?' r 181
        ']' r 181
        '^' r 181
        '^=' r 181
        '|' r 181
        '||' r 181
        '|=' r 181
        '~>' r 181
        '+' r 181
        '+=' r 181
        '<' r 181
        '<~' r 181
        '<<' r 181
        '<<=' r 181
        '<=' r 181
        '<>' r 181
        '=' r 181
        '-=' r 181
        '==' r 181
        '>' r 181
        '>=' r 181
        '>>' r 181
        '>>=' r 181


State 408
        Prior States: 338

        <PARAM EXPR> ::= <Expression> ',' _ <PARAM EXPR>                                <PARAM EXPR> ::= <Expression> ',' ^ <PARAM EXPR>
        <Expression> ::= _ <Op Assign>                                                  <Expression> ::= ^ <Op Assign>
        <Op Assign> ::= _ <Op If> '=' <Op Assign>                                       <Op Assign> ::= ^ <Op If> '=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<>' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '<>' <Op Assign>
        <Op Assign> ::= _ <Op If> '+=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '+=' <Op Assign>
        <Op Assign> ::= _ <Op If> '-=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '-=' <Op Assign>
        <Op Assign> ::= _ <Op If> '*=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '*=' <Op Assign>
        <Op Assign> ::= _ <Op If> '/=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '/=' <Op Assign>
        <Op Assign> ::= _ <Op If> '^=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '^=' <Op Assign>
        <Op Assign> ::= _ <Op If> '&=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '&=' <Op Assign>
        <Op Assign> ::= _ <Op If> '|=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '|=' <Op Assign>
        <Op Assign> ::= _ <Op If> '>>=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '>>=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<<=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '<<=' <Op Assign>
        <Op Assign> ::= _ <Op If>                                                       <Op Assign> ::= ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <PARAM EXPR> ::= _ <Expression> ',' <PARAM EXPR>                                <PARAM EXPR> ::= ^ <Expression> ',' <PARAM EXPR>
        <PARAM EXPR> ::= _ <Expression>                                                 <PARAM EXPR> ::= ^ <Expression>
        <PARAM EXPR> ::= _                                                              <PARAM EXPR> ::= ^
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Expression> g 338
        <Op Add> g 168
        <Op And> g 169
        <Op Assign> g 170
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 176
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <PARAM EXPR> g 437
        <REGISTER> g 183
        <Value> g 184
        ')' r 205


State 409
        Prior States: 339

        <Value> ::= Id '(' <PARAM EXPR> ')' _                                           <Value> ::= Id '(' <PARAM EXPR> ')' ^

        '-' r 198
        '--' r 198
        '!=' r 198
        '%' r 198
        '&' r 198
        '&&' r 198
        '&=' r 198
        ')' r 198
        '*' r 198
        '*=' r 198
        ',' r 198
        '.' r 198
        '/' r 198
        '/=' r 198
        ':' r 198
        ';' r 198
        '?' r 198
        '[' r 198
        ']' r 198
        '^' r 198
        '^=' r 198
        '|' r 198
        '||' r 198
        '|=' r 198
        '~>' r 198
        '+' r 198
        '++' r 198
        '+=' r 198
        '<' r 198
        '<~' r 198
        '<<' r 198
        '<<=' r 198
        '<=' r 198
        '<>' r 198
        '=' r 198
        '-=' r 198
        '==' r 198
        '>' r 198
        '->' r 198
        '>=' r 198
        '>>' r 198
        '>>=' r 198


State 410
        Prior States: 343

        <Op Unary> ::= sizeof '(' Id <Pointers> _ ')'                                   <Op Unary> ::= sizeof '(' Id <Pointers> ^ ')'

        ')' s 438


State 411
        Prior States: 344

        <Op Unary> ::= sizeof '(' <Type> ')' _                                          <Op Unary> ::= sizeof '(' <Type> ')' ^

        '-' r 182
        '!=' r 182
        '%' r 182
        '&' r 182
        '&&' r 182
        '&=' r 182
        ')' r 182
        '*' r 182
        '*=' r 182
        ',' r 182
        '/' r 182
        '/=' r 182
        ':' r 182
        ';' r 182
        '?' r 182
        ']' r 182
        '^' r 182
        '^=' r 182
        '|' r 182
        '||' r 182
        '|=' r 182
        '~>' r 182
        '+' r 182
        '+=' r 182
        '<' r 182
        '<~' r 182
        '<<' r 182
        '<<=' r 182
        '<=' r 182
        '<>' r 182
        '=' r 182
        '-=' r 182
        '==' r 182
        '>' r 182
        '>=' r 182
        '>>' r 182
        '>>=' r 182


State 412
        Prior States: 371

        <Op If> ::= <Op Or> '?' <Op If> ':' _ <Op If>                                   <Op If> ::= <Op Or> '?' <Op If> ':' ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Op Add> g 168
        <Op And> g 169
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 439
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184


State 413
        Prior States: 374

        <Op Pointer> ::= <Op Pointer> '[' <Expression> ']' _                            <Op Pointer> ::= <Op Pointer> '[' <Expression> ']' ^

        '-' r 188
        '--' r 188
        '!=' r 188
        '%' r 188
        '&' r 188
        '&&' r 188
        '&=' r 188
        ')' r 188
        '*' r 188
        '*=' r 188
        ',' r 188
        '.' r 188
        '/' r 188
        '/=' r 188
        ':' r 188
        ';' r 188
        '?' r 188
        '[' r 188
        ']' r 188
        '^' r 188
        '^=' r 188
        '|' r 188
        '||' r 188
        '|=' r 188
        '~>' r 188
        '+' r 188
        '++' r 188
        '+=' r 188
        '<' r 188
        '<~' r 188
        '<<' r 188
        '<<=' r 188
        '<=' r 188
        '<>' r 188
        '=' r 188
        '-=' r 188
        '==' r 188
        '>' r 188
        '->' r 188
        '>=' r 188
        '>>' r 188
        '>>=' r 188


State 414
        Prior States: 380

        <Oper Decl> ::= override <Type> operator '-' '(' <Params> ')' <Block> _         <Oper Decl> ::= override <Type> operator '-' '(' <Params> ')' <Block> ^

        (EOF) r 33
        '@' r 33
        bool r 33
        byte r 33
        cdecl r 33
        const r 33
        entry r 33
        enum r 33
        extern r 33
        fastcall r 33
        int r 33
        namespace r 33
        override r 33
        private r 33
        sbyte r 33
        static r 33
        stdcall r 33
        string r 33
        struct r 33
        typedef r 33
        uint r 33
        use r 33
        void r 33


State 415
        Prior States: 381

        <Oper Decl> ::= override <Type> operator '!=' '(' <Params> ')' <Block> _        <Oper Decl> ::= override <Type> operator '!=' '(' <Params> ')' <Block> ^

        (EOF) r 27
        '@' r 27
        bool r 27
        byte r 27
        cdecl r 27
        const r 27
        entry r 27
        enum r 27
        extern r 27
        fastcall r 27
        int r 27
        namespace r 27
        override r 27
        private r 27
        sbyte r 27
        static r 27
        stdcall r 27
        string r 27
        struct r 27
        typedef r 27
        uint r 27
        use r 27
        void r 27


State 416
        Prior States: 382

        <Oper Decl> ::= override <Type> operator '%' '(' <Params> ')' <Block> _         <Oper Decl> ::= override <Type> operator '%' '(' <Params> ')' <Block> ^

        (EOF) r 36
        '@' r 36
        bool r 36
        byte r 36
        cdecl r 36
        const r 36
        entry r 36
        enum r 36
        extern r 36
        fastcall r 36
        int r 36
        namespace r 36
        override r 36
        private r 36
        sbyte r 36
        static r 36
        stdcall r 36
        string r 36
        struct r 36
        typedef r 36
        uint r 36
        use r 36
        void r 36


State 417
        Prior States: 383

        <Oper Decl> ::= override <Type> operator '&' '(' <Params> ')' <Block> _         <Oper Decl> ::= override <Type> operator '&' '(' <Params> ')' <Block> ^

        (EOF) r 38
        '@' r 38
        bool r 38
        byte r 38
        cdecl r 38
        const r 38
        entry r 38
        enum r 38
        extern r 38
        fastcall r 38
        int r 38
        namespace r 38
        override r 38
        private r 38
        sbyte r 38
        static r 38
        stdcall r 38
        string r 38
        struct r 38
        typedef r 38
        uint r 38
        use r 38
        void r 38


State 418
        Prior States: 384

        <Oper Decl> ::= override <Type> operator '*' '(' <Params> ')' <Block> _         <Oper Decl> ::= override <Type> operator '*' '(' <Params> ')' <Block> ^

        (EOF) r 34
        '@' r 34
        bool r 34
        byte r 34
        cdecl r 34
        const r 34
        entry r 34
        enum r 34
        extern r 34
        fastcall r 34
        int r 34
        namespace r 34
        override r 34
        private r 34
        sbyte r 34
        static r 34
        stdcall r 34
        string r 34
        struct r 34
        typedef r 34
        uint r 34
        use r 34
        void r 34


State 419
        Prior States: 385

        <Oper Decl> ::= override <Type> operator '/' '(' <Params> ')' <Block> _         <Oper Decl> ::= override <Type> operator '/' '(' <Params> ')' <Block> ^

        (EOF) r 35
        '@' r 35
        bool r 35
        byte r 35
        cdecl r 35
        const r 35
        entry r 35
        enum r 35
        extern r 35
        fastcall r 35
        int r 35
        namespace r 35
        override r 35
        private r 35
        sbyte r 35
        static r 35
        stdcall r 35
        string r 35
        struct r 35
        typedef r 35
        uint r 35
        use r 35
        void r 35


State 420
        Prior States: 386

        <Oper Decl> ::= override <Type> operator '^' '(' <Params> ')' <Block> _         <Oper Decl> ::= override <Type> operator '^' '(' <Params> ')' <Block> ^

        (EOF) r 37
        '@' r 37
        bool r 37
        byte r 37
        cdecl r 37
        const r 37
        entry r 37
        enum r 37
        extern r 37
        fastcall r 37
        int r 37
        namespace r 37
        override r 37
        private r 37
        sbyte r 37
        static r 37
        stdcall r 37
        string r 37
        struct r 37
        typedef r 37
        uint r 37
        use r 37
        void r 37


State 421
        Prior States: 387

        <Oper Decl> ::= override <Type> operator '|' '(' <Params> ')' <Block> _         <Oper Decl> ::= override <Type> operator '|' '(' <Params> ')' <Block> ^

        (EOF) r 39
        '@' r 39
        bool r 39
        byte r 39
        cdecl r 39
        const r 39
        entry r 39
        enum r 39
        extern r 39
        fastcall r 39
        int r 39
        namespace r 39
        override r 39
        private r 39
        sbyte r 39
        static r 39
        stdcall r 39
        string r 39
        struct r 39
        typedef r 39
        uint r 39
        use r 39
        void r 39


State 422
        Prior States: 388

        <Oper Decl> ::= override <Type> operator '+' '(' <Params> ')' <Block> _         <Oper Decl> ::= override <Type> operator '+' '(' <Params> ')' <Block> ^

        (EOF) r 32
        '@' r 32
        bool r 32
        byte r 32
        cdecl r 32
        const r 32
        entry r 32
        enum r 32
        extern r 32
        fastcall r 32
        int r 32
        namespace r 32
        override r 32
        private r 32
        sbyte r 32
        static r 32
        stdcall r 32
        string r 32
        struct r 32
        typedef r 32
        uint r 32
        use r 32
        void r 32


State 423
        Prior States: 389

        <Oper Decl> ::= override <Type> operator '<' '(' <Params> ')' <Block> _         <Oper Decl> ::= override <Type> operator '<' '(' <Params> ')' <Block> ^

        (EOF) r 31
        '@' r 31
        bool r 31
        byte r 31
        cdecl r 31
        const r 31
        entry r 31
        enum r 31
        extern r 31
        fastcall r 31
        int r 31
        namespace r 31
        override r 31
        private r 31
        sbyte r 31
        static r 31
        stdcall r 31
        string r 31
        struct r 31
        typedef r 31
        uint r 31
        use r 31
        void r 31


State 424
        Prior States: 390

        <Oper Decl> ::= override <Type> operator '<=' '(' <Params> ')' <Block> _        <Oper Decl> ::= override <Type> operator '<=' '(' <Params> ')' <Block> ^

        (EOF) r 28
        '@' r 28
        bool r 28
        byte r 28
        cdecl r 28
        const r 28
        entry r 28
        enum r 28
        extern r 28
        fastcall r 28
        int r 28
        namespace r 28
        override r 28
        private r 28
        sbyte r 28
        static r 28
        stdcall r 28
        string r 28
        struct r 28
        typedef r 28
        uint r 28
        use r 28
        void r 28


State 425
        Prior States: 391

        <Oper Decl> ::= override <Type> operator '==' '(' <Params> ')' <Block> _        <Oper Decl> ::= override <Type> operator '==' '(' <Params> ')' <Block> ^

        (EOF) r 26
        '@' r 26
        bool r 26
        byte r 26
        cdecl r 26
        const r 26
        entry r 26
        enum r 26
        extern r 26
        fastcall r 26
        int r 26
        namespace r 26
        override r 26
        private r 26
        sbyte r 26
        static r 26
        stdcall r 26
        string r 26
        struct r 26
        typedef r 26
        uint r 26
        use r 26
        void r 26


State 426
        Prior States: 392

        <Oper Decl> ::= override <Type> operator '>' '(' <Params> ')' <Block> _         <Oper Decl> ::= override <Type> operator '>' '(' <Params> ')' <Block> ^

        (EOF) r 30
        '@' r 30
        bool r 30
        byte r 30
        cdecl r 30
        const r 30
        entry r 30
        enum r 30
        extern r 30
        fastcall r 30
        int r 30
        namespace r 30
        override r 30
        private r 30
        sbyte r 30
        static r 30
        stdcall r 30
        string r 30
        struct r 30
        typedef r 30
        uint r 30
        use r 30
        void r 30


State 427
        Prior States: 393

        <Oper Decl> ::= override <Type> operator '>=' '(' <Params> ')' <Block> _        <Oper Decl> ::= override <Type> operator '>=' '(' <Params> ')' <Block> ^

        (EOF) r 29
        '@' r 29
        bool r 29
        byte r 29
        cdecl r 29
        const r 29
        entry r 29
        enum r 29
        extern r 29
        fastcall r 29
        int r 29
        namespace r 29
        override r 29
        private r 29
        sbyte r 29
        static r 29
        stdcall r 29
        string r 29
        struct r 29
        typedef r 29
        uint r 29
        use r 29
        void r 29


State 428
        Prior States: 394

        <INSTRUCTION> ::= StringLiteral ';' _                                           <INSTRUCTION> ::= StringLiteral ';' ^

        '}' r 228
        StringLiteral r 228


State 429
        Prior States: 395

        <INSTRUCTIONS> ::= <INSTRUCTION> <INSTRUCTIONS> _                               <INSTRUCTIONS> ::= <INSTRUCTION> <INSTRUCTIONS> ^

        '}' r 229


State 430
        Prior States: 396

        <Statement> ::= asm '{' <INSTRUCTIONS> '}' _                                    <Statement> ::= asm '{' <INSTRUCTIONS> '}' ^

        '-' r 97
        '--' r 97
        '!' r 97
        '$' r 97
        '&' r 97
        '(' r 97
        '*' r 97
        ';' r 97
        '@' r 97
        '{' r 97
        '}' r 97
        '~' r 97
        '++' r 97
        '£' r 97
        AH r 97
        AL r 97
        asm r 97
        AX r 97
        BH r 97
        BinaryLiteral r 97
        BL r 97
        bool r 97
        BooleanLiteral r 97
        BP r 97
        break r 97
        BX r 97
        byte r 97
        case r 97
        CH r 97
        CharLiteral r 97
        CL r 97
        const r 97
        continue r 97
        CS r 97
        CX r 97
        DecLiteral r 97
        default r 97
        DH r 97
        DI r 97
        DL r 97
        do r 97
        DS r 97
        DX r 97
        enum r 97
        ES r 97
        extern r 97
        for r 97
        FS r 97
        goto r 97
        GS r 97
        HexLiteral r 97
        Id r 97
        if r 97
        int r 97
        loop r 97
        next r 97
        NullLiteral r 97
        OctLiteral r 97
        private r 97
        return r 97
        sbyte r 97
        SI r 97
        sizeof r 97
        SP r 97
        SS r 97
        static r 97
        string r 97
        StringLiteral r 97
        struct r 97
        switch r 97
        uint r 97
        void r 97
        while r 97


State 431
        Prior States: 397

        <Normal Stm> ::= do <Statement> while '(' _ <Expression> ')'                    <Normal Stm> ::= do <Statement> while '(' ^ <Expression> ')'
        <Expression> ::= _ <Op Assign>                                                  <Expression> ::= ^ <Op Assign>
        <Op Assign> ::= _ <Op If> '=' <Op Assign>                                       <Op Assign> ::= ^ <Op If> '=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<>' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '<>' <Op Assign>
        <Op Assign> ::= _ <Op If> '+=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '+=' <Op Assign>
        <Op Assign> ::= _ <Op If> '-=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '-=' <Op Assign>
        <Op Assign> ::= _ <Op If> '*=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '*=' <Op Assign>
        <Op Assign> ::= _ <Op If> '/=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '/=' <Op Assign>
        <Op Assign> ::= _ <Op If> '^=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '^=' <Op Assign>
        <Op Assign> ::= _ <Op If> '&=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '&=' <Op Assign>
        <Op Assign> ::= _ <Op If> '|=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '|=' <Op Assign>
        <Op Assign> ::= _ <Op If> '>>=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '>>=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<<=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '<<=' <Op Assign>
        <Op Assign> ::= _ <Op If>                                                       <Op Assign> ::= ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Expression> g 440
        <Op Add> g 168
        <Op And> g 169
        <Op Assign> g 170
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 176
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184


State 432
        Prior States: 398

        <Statement> ::= for '(' <Arg> ';' _ <Arg> ';' <Arg> ')' <Statement>             <Statement> ::= for '(' <Arg> ';' ^ <Arg> ';' <Arg> ')' <Statement>
        <Arg> ::= _ <Expression>                                                        <Arg> ::= ^ <Expression>
        <Arg> ::= _                                                                     <Arg> ::= ^
        <Expression> ::= _ <Op Assign>                                                  <Expression> ::= ^ <Op Assign>
        <Op Assign> ::= _ <Op If> '=' <Op Assign>                                       <Op Assign> ::= ^ <Op If> '=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<>' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '<>' <Op Assign>
        <Op Assign> ::= _ <Op If> '+=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '+=' <Op Assign>
        <Op Assign> ::= _ <Op If> '-=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '-=' <Op Assign>
        <Op Assign> ::= _ <Op If> '*=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '*=' <Op Assign>
        <Op Assign> ::= _ <Op If> '/=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '/=' <Op Assign>
        <Op Assign> ::= _ <Op If> '^=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '^=' <Op Assign>
        <Op Assign> ::= _ <Op If> '&=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '&=' <Op Assign>
        <Op Assign> ::= _ <Op If> '|=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '|=' <Op Assign>
        <Op Assign> ::= _ <Op If> '>>=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '>>=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<<=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '<<=' <Op Assign>
        <Op Assign> ::= _ <Op If>                                                       <Op Assign> ::= ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Arg> g 441
        <Expression> g 399
        <Op Add> g 168
        <Op And> g 169
        <Op Assign> g 170
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 176
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184
        ';' r 117


State 433
        Prior States: 400

        <Normal Stm> ::= goto case DecLiteral ';' _                                     <Normal Stm> ::= goto case DecLiteral ';' ^

        '-' r 111
        '--' r 111
        '!' r 111
        '$' r 111
        '&' r 111
        '(' r 111
        '*' r 111
        ';' r 111
        '@' r 111
        '{' r 111
        '}' r 111
        '~' r 111
        '++' r 111
        '£' r 111
        AH r 111
        AL r 111
        asm r 111
        AX r 111
        BH r 111
        BinaryLiteral r 111
        BL r 111
        bool r 111
        BooleanLiteral r 111
        BP r 111
        break r 111
        BX r 111
        byte r 111
        case r 111
        CH r 111
        CharLiteral r 111
        CL r 111
        const r 111
        continue r 111
        CS r 111
        CX r 111
        DecLiteral r 111
        default r 111
        DH r 111
        DI r 111
        DL r 111
        do r 111
        DS r 111
        DX r 111
        else r 111
        enum r 111
        ES r 111
        extern r 111
        for r 111
        FS r 111
        goto r 111
        GS r 111
        HexLiteral r 111
        Id r 111
        if r 111
        int r 111
        loop r 111
        next r 111
        NullLiteral r 111
        OctLiteral r 111
        private r 111
        return r 111
        sbyte r 111
        SI r 111
        sizeof r 111
        SP r 111
        SS r 111
        static r 111
        string r 111
        StringLiteral r 111
        struct r 111
        switch r 111
        uint r 111
        void r 111
        while r 111


State 434
        Prior States: 403

        <Statement> ::= if '(' <Expression> ')' _ <Statement>                           <Statement> ::= if '(' <Expression> ')' ^ <Statement>
        <Statement> ::= if '(' <Expression> ')' _ <Then Stm> else <Statement>           <Statement> ::= if '(' <Expression> ')' ^ <Then Stm> else <Statement>
        <Var Decl> ::= _ <Mod> <Type> <Var> <Var List> ';'                              <Var Decl> ::= ^ <Mod> <Type> <Var> <Var List> ';'
        <Var Decl> ::= _ <Type> <Var> <Var List> ';'                                    <Var Decl> ::= ^ <Type> <Var> <Var List> ';'
        <Var Decl> ::= _ <Mod> <Var> <Var List> ';'                                     <Var Decl> ::= ^ <Mod> <Var> <Var List> ';'
        <Mod> ::= _ extern                                                              <Mod> ::= ^ extern
        <Mod> ::= _ static                                                              <Mod> ::= ^ static
        <Mod> ::= _ const                                                               <Mod> ::= ^ const
        <Mod> ::= _ private                                                             <Mod> ::= ^ private
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string
        <Statement> ::= _ <Var Decl>                                                    <Statement> ::= ^ <Var Decl>
        <Statement> ::= _ Id ':'                                                        <Statement> ::= ^ Id ':'
        <Statement> ::= _ if '(' <Expression> ')' <Statement>                           <Statement> ::= ^ if '(' <Expression> ')' <Statement>
        <Statement> ::= _ if '(' <Expression> ')' <Then Stm> else <Statement>           <Statement> ::= ^ if '(' <Expression> ')' <Then Stm> else <Statement>
        <Statement> ::= _ while '(' <Expression> ')' <Statement>                        <Statement> ::= ^ while '(' <Expression> ')' <Statement>
        <Statement> ::= _ for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Statement>             <Statement> ::= ^ for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Statement>
        <Statement> ::= _ asm '{' <INSTRUCTIONS> '}'                                    <Statement> ::= ^ asm '{' <INSTRUCTIONS> '}'
        <Statement> ::= _ loop <Statement>                                              <Statement> ::= ^ loop <Statement>
        <Statement> ::= _ <Normal Stm>                                                  <Statement> ::= ^ <Normal Stm>
        <Then Stm> ::= _ if '(' <Expression> ')' <Then Stm> else <Then Stm>             <Then Stm> ::= ^ if '(' <Expression> ')' <Then Stm> else <Then Stm>
        <Then Stm> ::= _ while '(' <Expression> ')' <Then Stm>                          <Then Stm> ::= ^ while '(' <Expression> ')' <Then Stm>
        <Then Stm> ::= _ for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Then Stm>               <Then Stm> ::= ^ for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Then Stm>
        <Then Stm> ::= _ <Normal Stm>                                                   <Then Stm> ::= ^ <Normal Stm>
        <Normal Stm> ::= _ do <Statement> while '(' <Expression> ')'                    <Normal Stm> ::= ^ do <Statement> while '(' <Expression> ')'
        <Normal Stm> ::= _ switch '(' <Expression> ')' '{' <Case Stms> '}'              <Normal Stm> ::= ^ switch '(' <Expression> ')' '{' <Case Stms> '}'
        <Normal Stm> ::= _ <Block>                                                      <Normal Stm> ::= ^ <Block>
        <Normal Stm> ::= _ <Expression> ';'                                             <Normal Stm> ::= ^ <Expression> ';'
        <Normal Stm> ::= _ goto Id ';'                                                  <Normal Stm> ::= ^ goto Id ';'
        <Normal Stm> ::= _ break ';'                                                    <Normal Stm> ::= ^ break ';'
        <Normal Stm> ::= _ continue ';'                                                 <Normal Stm> ::= ^ continue ';'
        <Normal Stm> ::= _ goto case DecLiteral ';'                                     <Normal Stm> ::= ^ goto case DecLiteral ';'
        <Normal Stm> ::= _ goto default ';'                                             <Normal Stm> ::= ^ goto default ';'
        <Normal Stm> ::= _ next ';'                                                     <Normal Stm> ::= ^ next ';'
        <Normal Stm> ::= _ return <Expression> ';'                                      <Normal Stm> ::= ^ return <Expression> ';'
        <Normal Stm> ::= _ ';'                                                          <Normal Stm> ::= ^ ';'
        <Block> ::= _ '{' <Stm List> '}'                                                <Block> ::= ^ '{' <Stm List> '}'
        <Expression> ::= _ <Op Assign>                                                  <Expression> ::= ^ <Op Assign>
        <Op Assign> ::= _ <Op If> '=' <Op Assign>                                       <Op Assign> ::= ^ <Op If> '=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<>' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '<>' <Op Assign>
        <Op Assign> ::= _ <Op If> '+=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '+=' <Op Assign>
        <Op Assign> ::= _ <Op If> '-=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '-=' <Op Assign>
        <Op Assign> ::= _ <Op If> '*=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '*=' <Op Assign>
        <Op Assign> ::= _ <Op If> '/=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '/=' <Op Assign>
        <Op Assign> ::= _ <Op If> '^=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '^=' <Op Assign>
        <Op Assign> ::= _ <Op If> '&=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '&=' <Op Assign>
        <Op Assign> ::= _ <Op If> '|=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '|=' <Op Assign>
        <Op Assign> ::= _ <Op If> '>>=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '>>=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<<=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '<<=' <Op Assign>
        <Op Assign> ::= _ <Op If>                                                       <Op Assign> ::= ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        ';' s 213
        '@' s 1
        '{' s 116
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        asm s 214
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        bool s 2
        BooleanLiteral s 141
        BP s 142
        break s 215
        BX s 143
        byte s 3
        CH s 144
        CharLiteral s 145
        CL s 146
        const s 5
        continue s 216
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        do s 217
        DS s 153
        DX s 154
        enum s 47
        ES s 155
        extern s 8
        for s 442
        FS s 156
        goto s 219
        GS s 157
        HexLiteral s 158
        Id s 220
        if s 443
        int s 10
        loop s 222
        next s 223
        NullLiteral s 160
        OctLiteral s 161
        private s 13
        return s 224
        sbyte s 14
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        static s 15
        string s 17
        StringLiteral s 166
        struct s 48
        switch s 225
        uint s 20
        void s 22
        while s 444
        <Base> g 23
        <Block> g 227
        <Expression> g 228
        <Mod> g 35
        <Normal Stm> g 445
        <Op Add> g 168
        <Op And> g 169
        <Op Assign> g 170
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 176
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Scalar> g 38
        <Statement> g 446
        <Then Stm> g 447
        <Type> g 40
        <Value> g 184
        <Var Decl> g 232


State 435
        Prior States: 405

        <Normal Stm> ::= switch '(' <Expression> ')' _ '{' <Case Stms> '}'              <Normal Stm> ::= switch '(' <Expression> ')' ^ '{' <Case Stms> '}'

        '{' s 448


State 436
        Prior States: 406

        <Statement> ::= while '(' <Expression> ')' _ <Statement>                        <Statement> ::= while '(' <Expression> ')' ^ <Statement>
        <Var Decl> ::= _ <Mod> <Type> <Var> <Var List> ';'                              <Var Decl> ::= ^ <Mod> <Type> <Var> <Var List> ';'
        <Var Decl> ::= _ <Type> <Var> <Var List> ';'                                    <Var Decl> ::= ^ <Type> <Var> <Var List> ';'
        <Var Decl> ::= _ <Mod> <Var> <Var List> ';'                                     <Var Decl> ::= ^ <Mod> <Var> <Var List> ';'
        <Mod> ::= _ extern                                                              <Mod> ::= ^ extern
        <Mod> ::= _ static                                                              <Mod> ::= ^ static
        <Mod> ::= _ const                                                               <Mod> ::= ^ const
        <Mod> ::= _ private                                                             <Mod> ::= ^ private
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string
        <Statement> ::= _ <Var Decl>                                                    <Statement> ::= ^ <Var Decl>
        <Statement> ::= _ Id ':'                                                        <Statement> ::= ^ Id ':'
        <Statement> ::= _ if '(' <Expression> ')' <Statement>                           <Statement> ::= ^ if '(' <Expression> ')' <Statement>
        <Statement> ::= _ if '(' <Expression> ')' <Then Stm> else <Statement>           <Statement> ::= ^ if '(' <Expression> ')' <Then Stm> else <Statement>
        <Statement> ::= _ while '(' <Expression> ')' <Statement>                        <Statement> ::= ^ while '(' <Expression> ')' <Statement>
        <Statement> ::= _ for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Statement>             <Statement> ::= ^ for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Statement>
        <Statement> ::= _ asm '{' <INSTRUCTIONS> '}'                                    <Statement> ::= ^ asm '{' <INSTRUCTIONS> '}'
        <Statement> ::= _ loop <Statement>                                              <Statement> ::= ^ loop <Statement>
        <Statement> ::= _ <Normal Stm>                                                  <Statement> ::= ^ <Normal Stm>
        <Normal Stm> ::= _ do <Statement> while '(' <Expression> ')'                    <Normal Stm> ::= ^ do <Statement> while '(' <Expression> ')'
        <Normal Stm> ::= _ switch '(' <Expression> ')' '{' <Case Stms> '}'              <Normal Stm> ::= ^ switch '(' <Expression> ')' '{' <Case Stms> '}'
        <Normal Stm> ::= _ <Block>                                                      <Normal Stm> ::= ^ <Block>
        <Normal Stm> ::= _ <Expression> ';'                                             <Normal Stm> ::= ^ <Expression> ';'
        <Normal Stm> ::= _ goto Id ';'                                                  <Normal Stm> ::= ^ goto Id ';'
        <Normal Stm> ::= _ break ';'                                                    <Normal Stm> ::= ^ break ';'
        <Normal Stm> ::= _ continue ';'                                                 <Normal Stm> ::= ^ continue ';'
        <Normal Stm> ::= _ goto case DecLiteral ';'                                     <Normal Stm> ::= ^ goto case DecLiteral ';'
        <Normal Stm> ::= _ goto default ';'                                             <Normal Stm> ::= ^ goto default ';'
        <Normal Stm> ::= _ next ';'                                                     <Normal Stm> ::= ^ next ';'
        <Normal Stm> ::= _ return <Expression> ';'                                      <Normal Stm> ::= ^ return <Expression> ';'
        <Normal Stm> ::= _ ';'                                                          <Normal Stm> ::= ^ ';'
        <Block> ::= _ '{' <Stm List> '}'                                                <Block> ::= ^ '{' <Stm List> '}'
        <Expression> ::= _ <Op Assign>                                                  <Expression> ::= ^ <Op Assign>
        <Op Assign> ::= _ <Op If> '=' <Op Assign>                                       <Op Assign> ::= ^ <Op If> '=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<>' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '<>' <Op Assign>
        <Op Assign> ::= _ <Op If> '+=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '+=' <Op Assign>
        <Op Assign> ::= _ <Op If> '-=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '-=' <Op Assign>
        <Op Assign> ::= _ <Op If> '*=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '*=' <Op Assign>
        <Op Assign> ::= _ <Op If> '/=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '/=' <Op Assign>
        <Op Assign> ::= _ <Op If> '^=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '^=' <Op Assign>
        <Op Assign> ::= _ <Op If> '&=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '&=' <Op Assign>
        <Op Assign> ::= _ <Op If> '|=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '|=' <Op Assign>
        <Op Assign> ::= _ <Op If> '>>=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '>>=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<<=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '<<=' <Op Assign>
        <Op Assign> ::= _ <Op If>                                                       <Op Assign> ::= ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        ';' s 213
        '@' s 1
        '{' s 116
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        asm s 214
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        bool s 2
        BooleanLiteral s 141
        BP s 142
        break s 215
        BX s 143
        byte s 3
        CH s 144
        CharLiteral s 145
        CL s 146
        const s 5
        continue s 216
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        do s 217
        DS s 153
        DX s 154
        enum s 47
        ES s 155
        extern s 8
        for s 218
        FS s 156
        goto s 219
        GS s 157
        HexLiteral s 158
        Id s 220
        if s 221
        int s 10
        loop s 222
        next s 223
        NullLiteral s 160
        OctLiteral s 161
        private s 13
        return s 224
        sbyte s 14
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        static s 15
        string s 17
        StringLiteral s 166
        struct s 48
        switch s 225
        uint s 20
        void s 22
        while s 226
        <Base> g 23
        <Block> g 227
        <Expression> g 228
        <Mod> g 35
        <Normal Stm> g 229
        <Op Add> g 168
        <Op And> g 169
        <Op Assign> g 170
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 176
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Scalar> g 38
        <Statement> g 449
        <Type> g 40
        <Value> g 184
        <Var Decl> g 232


State 437
        Prior States: 408

        <PARAM EXPR> ::= <Expression> ',' <PARAM EXPR> _                                <PARAM EXPR> ::= <Expression> ',' <PARAM EXPR> ^

        ')' r 203


State 438
        Prior States: 410

        <Op Unary> ::= sizeof '(' Id <Pointers> ')' _                                   <Op Unary> ::= sizeof '(' Id <Pointers> ')' ^

        '-' r 183
        '!=' r 183
        '%' r 183
        '&' r 183
        '&&' r 183
        '&=' r 183
        ')' r 183
        '*' r 183
        '*=' r 183
        ',' r 183
        '/' r 183
        '/=' r 183
        ':' r 183
        ';' r 183
        '?' r 183
        ']' r 183
        '^' r 183
        '^=' r 183
        '|' r 183
        '||' r 183
        '|=' r 183
        '~>' r 183
        '+' r 183
        '+=' r 183
        '<' r 183
        '<~' r 183
        '<<' r 183
        '<<=' r 183
        '<=' r 183
        '<>' r 183
        '=' r 183
        '-=' r 183
        '==' r 183
        '>' r 183
        '>=' r 183
        '>>' r 183
        '>>=' r 183


State 439
        Prior States: 412

        <Op If> ::= <Op Or> '?' <Op If> ':' <Op If> _                                   <Op If> ::= <Op Or> '?' <Op If> ':' <Op If> ^

        '&=' r 137
        ')' r 137
        '*=' r 137
        ',' r 137
        '/=' r 137
        ':' r 137
        ';' r 137
        ']' r 137
        '^=' r 137
        '|=' r 137
        '+=' r 137
        '<<=' r 137
        '<>' r 137
        '=' r 137
        '-=' r 137
        '>>=' r 137


State 440
        Prior States: 431

        <Normal Stm> ::= do <Statement> while '(' <Expression> _ ')'                    <Normal Stm> ::= do <Statement> while '(' <Expression> ^ ')'

        ')' s 450


State 441
        Prior States: 432

        <Statement> ::= for '(' <Arg> ';' <Arg> _ ';' <Arg> ')' <Statement>             <Statement> ::= for '(' <Arg> ';' <Arg> ^ ';' <Arg> ')' <Statement>

        ';' s 451


State 442
        Prior States: 434, 469, 470, 479, 483

        <Statement> ::= for _ '(' <Arg> ';' <Arg> ';' <Arg> ')' <Statement>             <Statement> ::= for ^ '(' <Arg> ';' <Arg> ';' <Arg> ')' <Statement>
        <Then Stm> ::= for _ '(' <Arg> ';' <Arg> ';' <Arg> ')' <Then Stm>               <Then Stm> ::= for ^ '(' <Arg> ';' <Arg> ';' <Arg> ')' <Then Stm>

        '(' s 452


State 443
        Prior States: 434, 469, 470, 479, 483

        <Statement> ::= if _ '(' <Expression> ')' <Statement>                           <Statement> ::= if ^ '(' <Expression> ')' <Statement>
        <Statement> ::= if _ '(' <Expression> ')' <Then Stm> else <Statement>           <Statement> ::= if ^ '(' <Expression> ')' <Then Stm> else <Statement>
        <Then Stm> ::= if _ '(' <Expression> ')' <Then Stm> else <Then Stm>             <Then Stm> ::= if ^ '(' <Expression> ')' <Then Stm> else <Then Stm>

        '(' s 453


State 444
        Prior States: 434, 469, 470, 479, 483

        <Statement> ::= while _ '(' <Expression> ')' <Statement>                        <Statement> ::= while ^ '(' <Expression> ')' <Statement>
        <Then Stm> ::= while _ '(' <Expression> ')' <Then Stm>                          <Then Stm> ::= while ^ '(' <Expression> ')' <Then Stm>

        '(' s 454


State 445
        Prior States: 434, 469, 470, 479, 483

        <Statement> ::= <Normal Stm> _                                                  <Statement> ::= <Normal Stm> ^
        <Then Stm> ::= <Normal Stm> _                                                   <Then Stm> ::= <Normal Stm> ^

        '-' r 99
        '--' r 99
        '!' r 99
        '$' r 99
        '&' r 99
        '(' r 99
        '*' r 99
        ';' r 99
        '@' r 99
        '{' r 99
        '}' r 99
        '~' r 99
        '++' r 99
        '£' r 99
        AH r 99
        AL r 99
        asm r 99
        AX r 99
        BH r 99
        BinaryLiteral r 99
        BL r 99
        bool r 99
        BooleanLiteral r 99
        BP r 99
        break r 99
        BX r 99
        byte r 99
        case r 99
        CH r 99
        CharLiteral r 99
        CL r 99
        const r 99
        continue r 99
        CS r 99
        CX r 99
        DecLiteral r 99
        default r 99
        DH r 99
        DI r 99
        DL r 99
        do r 99
        DS r 99
        DX r 99
        else r 103
        enum r 99
        ES r 99
        extern r 99
        for r 99
        FS r 99
        goto r 99
        GS r 99
        HexLiteral r 99
        Id r 99
        if r 99
        int r 99
        loop r 99
        next r 99
        NullLiteral r 99
        OctLiteral r 99
        private r 99
        return r 99
        sbyte r 99
        SI r 99
        sizeof r 99
        SP r 99
        SS r 99
        static r 99
        string r 99
        StringLiteral r 99
        struct r 99
        switch r 99
        uint r 99
        void r 99
        while r 99


State 446
        Prior States: 434, 469

        <Statement> ::= if '(' <Expression> ')' <Statement> _                           <Statement> ::= if '(' <Expression> ')' <Statement> ^

        '-' r 93
        '--' r 93
        '!' r 93
        '$' r 93
        '&' r 93
        '(' r 93
        '*' r 93
        ';' r 93
        '@' r 93
        '{' r 93
        '}' r 93
        '~' r 93
        '++' r 93
        '£' r 93
        AH r 93
        AL r 93
        asm r 93
        AX r 93
        BH r 93
        BinaryLiteral r 93
        BL r 93
        bool r 93
        BooleanLiteral r 93
        BP r 93
        break r 93
        BX r 93
        byte r 93
        case r 93
        CH r 93
        CharLiteral r 93
        CL r 93
        const r 93
        continue r 93
        CS r 93
        CX r 93
        DecLiteral r 93
        default r 93
        DH r 93
        DI r 93
        DL r 93
        do r 93
        DS r 93
        DX r 93
        enum r 93
        ES r 93
        extern r 93
        for r 93
        FS r 93
        goto r 93
        GS r 93
        HexLiteral r 93
        Id r 93
        if r 93
        int r 93
        loop r 93
        next r 93
        NullLiteral r 93
        OctLiteral r 93
        private r 93
        return r 93
        sbyte r 93
        SI r 93
        sizeof r 93
        SP r 93
        SS r 93
        static r 93
        string r 93
        StringLiteral r 93
        struct r 93
        switch r 93
        uint r 93
        void r 93
        while r 93


State 447
        Prior States: 434

        <Statement> ::= if '(' <Expression> ')' <Then Stm> _ else <Statement>           <Statement> ::= if '(' <Expression> ')' <Then Stm> ^ else <Statement>

        else s 455


State 448
        Prior States: 435

        <Normal Stm> ::= switch '(' <Expression> ')' '{' _ <Case Stms> '}'              <Normal Stm> ::= switch '(' <Expression> ')' '{' ^ <Case Stms> '}'
        <Case Stms> ::= _ case <Value> ':' <Stm List> <Case Stms>                       <Case Stms> ::= ^ case <Value> ':' <Stm List> <Case Stms>
        <Case Stms> ::= _ default ':' <Stm List>                                        <Case Stms> ::= ^ default ':' <Stm List>
        <Case Stms> ::= _                                                               <Case Stms> ::= ^

        case s 456
        default s 457
        <Case Stms> g 458
        '}' r 120


State 449
        Prior States: 436, 470

        <Statement> ::= while '(' <Expression> ')' <Statement> _                        <Statement> ::= while '(' <Expression> ')' <Statement> ^

        '-' r 95
        '--' r 95
        '!' r 95
        '$' r 95
        '&' r 95
        '(' r 95
        '*' r 95
        ';' r 95
        '@' r 95
        '{' r 95
        '}' r 95
        '~' r 95
        '++' r 95
        '£' r 95
        AH r 95
        AL r 95
        asm r 95
        AX r 95
        BH r 95
        BinaryLiteral r 95
        BL r 95
        bool r 95
        BooleanLiteral r 95
        BP r 95
        break r 95
        BX r 95
        byte r 95
        case r 95
        CH r 95
        CharLiteral r 95
        CL r 95
        const r 95
        continue r 95
        CS r 95
        CX r 95
        DecLiteral r 95
        default r 95
        DH r 95
        DI r 95
        DL r 95
        do r 95
        DS r 95
        DX r 95
        enum r 95
        ES r 95
        extern r 95
        for r 95
        FS r 95
        goto r 95
        GS r 95
        HexLiteral r 95
        Id r 95
        if r 95
        int r 95
        loop r 95
        next r 95
        NullLiteral r 95
        OctLiteral r 95
        private r 95
        return r 95
        sbyte r 95
        SI r 95
        sizeof r 95
        SP r 95
        SS r 95
        static r 95
        string r 95
        StringLiteral r 95
        struct r 95
        switch r 95
        uint r 95
        void r 95
        while r 95


State 450
        Prior States: 440

        <Normal Stm> ::= do <Statement> while '(' <Expression> ')' _                    <Normal Stm> ::= do <Statement> while '(' <Expression> ')' ^

        '-' r 104
        '--' r 104
        '!' r 104
        '$' r 104
        '&' r 104
        '(' r 104
        '*' r 104
        ';' r 104
        '@' r 104
        '{' r 104
        '}' r 104
        '~' r 104
        '++' r 104
        '£' r 104
        AH r 104
        AL r 104
        asm r 104
        AX r 104
        BH r 104
        BinaryLiteral r 104
        BL r 104
        bool r 104
        BooleanLiteral r 104
        BP r 104
        break r 104
        BX r 104
        byte r 104
        case r 104
        CH r 104
        CharLiteral r 104
        CL r 104
        const r 104
        continue r 104
        CS r 104
        CX r 104
        DecLiteral r 104
        default r 104
        DH r 104
        DI r 104
        DL r 104
        do r 104
        DS r 104
        DX r 104
        else r 104
        enum r 104
        ES r 104
        extern r 104
        for r 104
        FS r 104
        goto r 104
        GS r 104
        HexLiteral r 104
        Id r 104
        if r 104
        int r 104
        loop r 104
        next r 104
        NullLiteral r 104
        OctLiteral r 104
        private r 104
        return r 104
        sbyte r 104
        SI r 104
        sizeof r 104
        SP r 104
        SS r 104
        static r 104
        string r 104
        StringLiteral r 104
        struct r 104
        switch r 104
        uint r 104
        void r 104
        while r 104


State 451
        Prior States: 441

        <Statement> ::= for '(' <Arg> ';' <Arg> ';' _ <Arg> ')' <Statement>             <Statement> ::= for '(' <Arg> ';' <Arg> ';' ^ <Arg> ')' <Statement>
        <Arg> ::= _ <Expression>                                                        <Arg> ::= ^ <Expression>
        <Arg> ::= _                                                                     <Arg> ::= ^
        <Expression> ::= _ <Op Assign>                                                  <Expression> ::= ^ <Op Assign>
        <Op Assign> ::= _ <Op If> '=' <Op Assign>                                       <Op Assign> ::= ^ <Op If> '=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<>' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '<>' <Op Assign>
        <Op Assign> ::= _ <Op If> '+=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '+=' <Op Assign>
        <Op Assign> ::= _ <Op If> '-=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '-=' <Op Assign>
        <Op Assign> ::= _ <Op If> '*=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '*=' <Op Assign>
        <Op Assign> ::= _ <Op If> '/=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '/=' <Op Assign>
        <Op Assign> ::= _ <Op If> '^=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '^=' <Op Assign>
        <Op Assign> ::= _ <Op If> '&=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '&=' <Op Assign>
        <Op Assign> ::= _ <Op If> '|=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '|=' <Op Assign>
        <Op Assign> ::= _ <Op If> '>>=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '>>=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<<=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '<<=' <Op Assign>
        <Op Assign> ::= _ <Op If>                                                       <Op Assign> ::= ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Arg> g 459
        <Expression> g 399
        <Op Add> g 168
        <Op And> g 169
        <Op Assign> g 170
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 176
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184
        ')' r 117


State 452
        Prior States: 442

        <Statement> ::= for '(' _ <Arg> ';' <Arg> ';' <Arg> ')' <Statement>             <Statement> ::= for '(' ^ <Arg> ';' <Arg> ';' <Arg> ')' <Statement>
        <Then Stm> ::= for '(' _ <Arg> ';' <Arg> ';' <Arg> ')' <Then Stm>               <Then Stm> ::= for '(' ^ <Arg> ';' <Arg> ';' <Arg> ')' <Then Stm>
        <Arg> ::= _ <Expression>                                                        <Arg> ::= ^ <Expression>
        <Arg> ::= _                                                                     <Arg> ::= ^
        <Expression> ::= _ <Op Assign>                                                  <Expression> ::= ^ <Op Assign>
        <Op Assign> ::= _ <Op If> '=' <Op Assign>                                       <Op Assign> ::= ^ <Op If> '=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<>' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '<>' <Op Assign>
        <Op Assign> ::= _ <Op If> '+=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '+=' <Op Assign>
        <Op Assign> ::= _ <Op If> '-=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '-=' <Op Assign>
        <Op Assign> ::= _ <Op If> '*=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '*=' <Op Assign>
        <Op Assign> ::= _ <Op If> '/=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '/=' <Op Assign>
        <Op Assign> ::= _ <Op If> '^=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '^=' <Op Assign>
        <Op Assign> ::= _ <Op If> '&=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '&=' <Op Assign>
        <Op Assign> ::= _ <Op If> '|=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '|=' <Op Assign>
        <Op Assign> ::= _ <Op If> '>>=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '>>=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<<=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '<<=' <Op Assign>
        <Op Assign> ::= _ <Op If>                                                       <Op Assign> ::= ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Arg> g 460
        <Expression> g 399
        <Op Add> g 168
        <Op And> g 169
        <Op Assign> g 170
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 176
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184
        ';' r 117


State 453
        Prior States: 443

        <Statement> ::= if '(' _ <Expression> ')' <Statement>                           <Statement> ::= if '(' ^ <Expression> ')' <Statement>
        <Statement> ::= if '(' _ <Expression> ')' <Then Stm> else <Statement>           <Statement> ::= if '(' ^ <Expression> ')' <Then Stm> else <Statement>
        <Then Stm> ::= if '(' _ <Expression> ')' <Then Stm> else <Then Stm>             <Then Stm> ::= if '(' ^ <Expression> ')' <Then Stm> else <Then Stm>
        <Expression> ::= _ <Op Assign>                                                  <Expression> ::= ^ <Op Assign>
        <Op Assign> ::= _ <Op If> '=' <Op Assign>                                       <Op Assign> ::= ^ <Op If> '=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<>' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '<>' <Op Assign>
        <Op Assign> ::= _ <Op If> '+=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '+=' <Op Assign>
        <Op Assign> ::= _ <Op If> '-=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '-=' <Op Assign>
        <Op Assign> ::= _ <Op If> '*=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '*=' <Op Assign>
        <Op Assign> ::= _ <Op If> '/=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '/=' <Op Assign>
        <Op Assign> ::= _ <Op If> '^=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '^=' <Op Assign>
        <Op Assign> ::= _ <Op If> '&=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '&=' <Op Assign>
        <Op Assign> ::= _ <Op If> '|=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '|=' <Op Assign>
        <Op Assign> ::= _ <Op If> '>>=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '>>=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<<=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '<<=' <Op Assign>
        <Op Assign> ::= _ <Op If>                                                       <Op Assign> ::= ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Expression> g 461
        <Op Add> g 168
        <Op And> g 169
        <Op Assign> g 170
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 176
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184


State 454
        Prior States: 444

        <Statement> ::= while '(' _ <Expression> ')' <Statement>                        <Statement> ::= while '(' ^ <Expression> ')' <Statement>
        <Then Stm> ::= while '(' _ <Expression> ')' <Then Stm>                          <Then Stm> ::= while '(' ^ <Expression> ')' <Then Stm>
        <Expression> ::= _ <Op Assign>                                                  <Expression> ::= ^ <Op Assign>
        <Op Assign> ::= _ <Op If> '=' <Op Assign>                                       <Op Assign> ::= ^ <Op If> '=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<>' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '<>' <Op Assign>
        <Op Assign> ::= _ <Op If> '+=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '+=' <Op Assign>
        <Op Assign> ::= _ <Op If> '-=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '-=' <Op Assign>
        <Op Assign> ::= _ <Op If> '*=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '*=' <Op Assign>
        <Op Assign> ::= _ <Op If> '/=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '/=' <Op Assign>
        <Op Assign> ::= _ <Op If> '^=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '^=' <Op Assign>
        <Op Assign> ::= _ <Op If> '&=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '&=' <Op Assign>
        <Op Assign> ::= _ <Op If> '|=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '|=' <Op Assign>
        <Op Assign> ::= _ <Op If> '>>=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '>>=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<<=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '<<=' <Op Assign>
        <Op Assign> ::= _ <Op If>                                                       <Op Assign> ::= ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Expression> g 462
        <Op Add> g 168
        <Op And> g 169
        <Op Assign> g 170
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 176
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184


State 455
        Prior States: 447

        <Statement> ::= if '(' <Expression> ')' <Then Stm> else _ <Statement>           <Statement> ::= if '(' <Expression> ')' <Then Stm> else ^ <Statement>
        <Var Decl> ::= _ <Mod> <Type> <Var> <Var List> ';'                              <Var Decl> ::= ^ <Mod> <Type> <Var> <Var List> ';'
        <Var Decl> ::= _ <Type> <Var> <Var List> ';'                                    <Var Decl> ::= ^ <Type> <Var> <Var List> ';'
        <Var Decl> ::= _ <Mod> <Var> <Var List> ';'                                     <Var Decl> ::= ^ <Mod> <Var> <Var List> ';'
        <Mod> ::= _ extern                                                              <Mod> ::= ^ extern
        <Mod> ::= _ static                                                              <Mod> ::= ^ static
        <Mod> ::= _ const                                                               <Mod> ::= ^ const
        <Mod> ::= _ private                                                             <Mod> ::= ^ private
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string
        <Statement> ::= _ <Var Decl>                                                    <Statement> ::= ^ <Var Decl>
        <Statement> ::= _ Id ':'                                                        <Statement> ::= ^ Id ':'
        <Statement> ::= _ if '(' <Expression> ')' <Statement>                           <Statement> ::= ^ if '(' <Expression> ')' <Statement>
        <Statement> ::= _ if '(' <Expression> ')' <Then Stm> else <Statement>           <Statement> ::= ^ if '(' <Expression> ')' <Then Stm> else <Statement>
        <Statement> ::= _ while '(' <Expression> ')' <Statement>                        <Statement> ::= ^ while '(' <Expression> ')' <Statement>
        <Statement> ::= _ for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Statement>             <Statement> ::= ^ for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Statement>
        <Statement> ::= _ asm '{' <INSTRUCTIONS> '}'                                    <Statement> ::= ^ asm '{' <INSTRUCTIONS> '}'
        <Statement> ::= _ loop <Statement>                                              <Statement> ::= ^ loop <Statement>
        <Statement> ::= _ <Normal Stm>                                                  <Statement> ::= ^ <Normal Stm>
        <Normal Stm> ::= _ do <Statement> while '(' <Expression> ')'                    <Normal Stm> ::= ^ do <Statement> while '(' <Expression> ')'
        <Normal Stm> ::= _ switch '(' <Expression> ')' '{' <Case Stms> '}'              <Normal Stm> ::= ^ switch '(' <Expression> ')' '{' <Case Stms> '}'
        <Normal Stm> ::= _ <Block>                                                      <Normal Stm> ::= ^ <Block>
        <Normal Stm> ::= _ <Expression> ';'                                             <Normal Stm> ::= ^ <Expression> ';'
        <Normal Stm> ::= _ goto Id ';'                                                  <Normal Stm> ::= ^ goto Id ';'
        <Normal Stm> ::= _ break ';'                                                    <Normal Stm> ::= ^ break ';'
        <Normal Stm> ::= _ continue ';'                                                 <Normal Stm> ::= ^ continue ';'
        <Normal Stm> ::= _ goto case DecLiteral ';'                                     <Normal Stm> ::= ^ goto case DecLiteral ';'
        <Normal Stm> ::= _ goto default ';'                                             <Normal Stm> ::= ^ goto default ';'
        <Normal Stm> ::= _ next ';'                                                     <Normal Stm> ::= ^ next ';'
        <Normal Stm> ::= _ return <Expression> ';'                                      <Normal Stm> ::= ^ return <Expression> ';'
        <Normal Stm> ::= _ ';'                                                          <Normal Stm> ::= ^ ';'
        <Block> ::= _ '{' <Stm List> '}'                                                <Block> ::= ^ '{' <Stm List> '}'
        <Expression> ::= _ <Op Assign>                                                  <Expression> ::= ^ <Op Assign>
        <Op Assign> ::= _ <Op If> '=' <Op Assign>                                       <Op Assign> ::= ^ <Op If> '=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<>' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '<>' <Op Assign>
        <Op Assign> ::= _ <Op If> '+=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '+=' <Op Assign>
        <Op Assign> ::= _ <Op If> '-=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '-=' <Op Assign>
        <Op Assign> ::= _ <Op If> '*=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '*=' <Op Assign>
        <Op Assign> ::= _ <Op If> '/=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '/=' <Op Assign>
        <Op Assign> ::= _ <Op If> '^=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '^=' <Op Assign>
        <Op Assign> ::= _ <Op If> '&=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '&=' <Op Assign>
        <Op Assign> ::= _ <Op If> '|=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '|=' <Op Assign>
        <Op Assign> ::= _ <Op If> '>>=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '>>=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<<=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '<<=' <Op Assign>
        <Op Assign> ::= _ <Op If>                                                       <Op Assign> ::= ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        ';' s 213
        '@' s 1
        '{' s 116
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        asm s 214
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        bool s 2
        BooleanLiteral s 141
        BP s 142
        break s 215
        BX s 143
        byte s 3
        CH s 144
        CharLiteral s 145
        CL s 146
        const s 5
        continue s 216
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        do s 217
        DS s 153
        DX s 154
        enum s 47
        ES s 155
        extern s 8
        for s 218
        FS s 156
        goto s 219
        GS s 157
        HexLiteral s 158
        Id s 220
        if s 221
        int s 10
        loop s 222
        next s 223
        NullLiteral s 160
        OctLiteral s 161
        private s 13
        return s 224
        sbyte s 14
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        static s 15
        string s 17
        StringLiteral s 166
        struct s 48
        switch s 225
        uint s 20
        void s 22
        while s 226
        <Base> g 23
        <Block> g 227
        <Expression> g 228
        <Mod> g 35
        <Normal Stm> g 229
        <Op Add> g 168
        <Op And> g 169
        <Op Assign> g 170
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 176
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Scalar> g 38
        <Statement> g 463
        <Type> g 40
        <Value> g 184
        <Var Decl> g 232


State 456
        Prior States: 448, 477

        <Case Stms> ::= case _ <Value> ':' <Stm List> <Case Stms>                       <Case Stms> ::= case ^ <Value> ':' <Stm List> <Case Stms>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '(' s 340
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 341
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        SP s 164
        SS s 165
        StringLiteral s 166
        <REGISTER> g 183
        <Value> g 464


State 457
        Prior States: 448, 477

        <Case Stms> ::= default _ ':' <Stm List>                                        <Case Stms> ::= default ^ ':' <Stm List>

        ':' s 465


State 458
        Prior States: 448

        <Normal Stm> ::= switch '(' <Expression> ')' '{' <Case Stms> _ '}'              <Normal Stm> ::= switch '(' <Expression> ')' '{' <Case Stms> ^ '}'

        '}' s 466


State 459
        Prior States: 451

        <Statement> ::= for '(' <Arg> ';' <Arg> ';' <Arg> _ ')' <Statement>             <Statement> ::= for '(' <Arg> ';' <Arg> ';' <Arg> ^ ')' <Statement>

        ')' s 467


State 460
        Prior States: 452

        <Statement> ::= for '(' <Arg> _ ';' <Arg> ';' <Arg> ')' <Statement>             <Statement> ::= for '(' <Arg> ^ ';' <Arg> ';' <Arg> ')' <Statement>
        <Then Stm> ::= for '(' <Arg> _ ';' <Arg> ';' <Arg> ')' <Then Stm>               <Then Stm> ::= for '(' <Arg> ^ ';' <Arg> ';' <Arg> ')' <Then Stm>

        ';' s 468


State 461
        Prior States: 453

        <Statement> ::= if '(' <Expression> _ ')' <Statement>                           <Statement> ::= if '(' <Expression> ^ ')' <Statement>
        <Statement> ::= if '(' <Expression> _ ')' <Then Stm> else <Statement>           <Statement> ::= if '(' <Expression> ^ ')' <Then Stm> else <Statement>
        <Then Stm> ::= if '(' <Expression> _ ')' <Then Stm> else <Then Stm>             <Then Stm> ::= if '(' <Expression> ^ ')' <Then Stm> else <Then Stm>

        ')' s 469


State 462
        Prior States: 454

        <Statement> ::= while '(' <Expression> _ ')' <Statement>                        <Statement> ::= while '(' <Expression> ^ ')' <Statement>
        <Then Stm> ::= while '(' <Expression> _ ')' <Then Stm>                          <Then Stm> ::= while '(' <Expression> ^ ')' <Then Stm>

        ')' s 470


State 463
        Prior States: 455, 479

        <Statement> ::= if '(' <Expression> ')' <Then Stm> else <Statement> _           <Statement> ::= if '(' <Expression> ')' <Then Stm> else <Statement> ^

        '-' r 94
        '--' r 94
        '!' r 94
        '$' r 94
        '&' r 94
        '(' r 94
        '*' r 94
        ';' r 94
        '@' r 94
        '{' r 94
        '}' r 94
        '~' r 94
        '++' r 94
        '£' r 94
        AH r 94
        AL r 94
        asm r 94
        AX r 94
        BH r 94
        BinaryLiteral r 94
        BL r 94
        bool r 94
        BooleanLiteral r 94
        BP r 94
        break r 94
        BX r 94
        byte r 94
        case r 94
        CH r 94
        CharLiteral r 94
        CL r 94
        const r 94
        continue r 94
        CS r 94
        CX r 94
        DecLiteral r 94
        default r 94
        DH r 94
        DI r 94
        DL r 94
        do r 94
        DS r 94
        DX r 94
        enum r 94
        ES r 94
        extern r 94
        for r 94
        FS r 94
        goto r 94
        GS r 94
        HexLiteral r 94
        Id r 94
        if r 94
        int r 94
        loop r 94
        next r 94
        NullLiteral r 94
        OctLiteral r 94
        private r 94
        return r 94
        sbyte r 94
        SI r 94
        sizeof r 94
        SP r 94
        SS r 94
        static r 94
        string r 94
        StringLiteral r 94
        struct r 94
        switch r 94
        uint r 94
        void r 94
        while r 94


State 464
        Prior States: 456

        <Case Stms> ::= case <Value> _ ':' <Stm List> <Case Stms>                       <Case Stms> ::= case <Value> ^ ':' <Stm List> <Case Stms>

        ':' s 471


State 465
        Prior States: 457

        <Case Stms> ::= default ':' _ <Stm List>                                        <Case Stms> ::= default ':' ^ <Stm List>
        <Var Decl> ::= _ <Mod> <Type> <Var> <Var List> ';'                              <Var Decl> ::= ^ <Mod> <Type> <Var> <Var List> ';'
        <Var Decl> ::= _ <Type> <Var> <Var List> ';'                                    <Var Decl> ::= ^ <Type> <Var> <Var List> ';'
        <Var Decl> ::= _ <Mod> <Var> <Var List> ';'                                     <Var Decl> ::= ^ <Mod> <Var> <Var List> ';'
        <Mod> ::= _ extern                                                              <Mod> ::= ^ extern
        <Mod> ::= _ static                                                              <Mod> ::= ^ static
        <Mod> ::= _ const                                                               <Mod> ::= ^ const
        <Mod> ::= _ private                                                             <Mod> ::= ^ private
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string
        <Statement> ::= _ <Var Decl>                                                    <Statement> ::= ^ <Var Decl>
        <Statement> ::= _ Id ':'                                                        <Statement> ::= ^ Id ':'
        <Statement> ::= _ if '(' <Expression> ')' <Statement>                           <Statement> ::= ^ if '(' <Expression> ')' <Statement>
        <Statement> ::= _ if '(' <Expression> ')' <Then Stm> else <Statement>           <Statement> ::= ^ if '(' <Expression> ')' <Then Stm> else <Statement>
        <Statement> ::= _ while '(' <Expression> ')' <Statement>                        <Statement> ::= ^ while '(' <Expression> ')' <Statement>
        <Statement> ::= _ for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Statement>             <Statement> ::= ^ for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Statement>
        <Statement> ::= _ asm '{' <INSTRUCTIONS> '}'                                    <Statement> ::= ^ asm '{' <INSTRUCTIONS> '}'
        <Statement> ::= _ loop <Statement>                                              <Statement> ::= ^ loop <Statement>
        <Statement> ::= _ <Normal Stm>                                                  <Statement> ::= ^ <Normal Stm>
        <Normal Stm> ::= _ do <Statement> while '(' <Expression> ')'                    <Normal Stm> ::= ^ do <Statement> while '(' <Expression> ')'
        <Normal Stm> ::= _ switch '(' <Expression> ')' '{' <Case Stms> '}'              <Normal Stm> ::= ^ switch '(' <Expression> ')' '{' <Case Stms> '}'
        <Normal Stm> ::= _ <Block>                                                      <Normal Stm> ::= ^ <Block>
        <Normal Stm> ::= _ <Expression> ';'                                             <Normal Stm> ::= ^ <Expression> ';'
        <Normal Stm> ::= _ goto Id ';'                                                  <Normal Stm> ::= ^ goto Id ';'
        <Normal Stm> ::= _ break ';'                                                    <Normal Stm> ::= ^ break ';'
        <Normal Stm> ::= _ continue ';'                                                 <Normal Stm> ::= ^ continue ';'
        <Normal Stm> ::= _ goto case DecLiteral ';'                                     <Normal Stm> ::= ^ goto case DecLiteral ';'
        <Normal Stm> ::= _ goto default ';'                                             <Normal Stm> ::= ^ goto default ';'
        <Normal Stm> ::= _ next ';'                                                     <Normal Stm> ::= ^ next ';'
        <Normal Stm> ::= _ return <Expression> ';'                                      <Normal Stm> ::= ^ return <Expression> ';'
        <Normal Stm> ::= _ ';'                                                          <Normal Stm> ::= ^ ';'
        <Block> ::= _ '{' <Stm List> '}'                                                <Block> ::= ^ '{' <Stm List> '}'
        <Stm List> ::= _ <Statement> <Stm List>                                         <Stm List> ::= ^ <Statement> <Stm List>
        <Stm List> ::= _                                                                <Stm List> ::= ^
        <Expression> ::= _ <Op Assign>                                                  <Expression> ::= ^ <Op Assign>
        <Op Assign> ::= _ <Op If> '=' <Op Assign>                                       <Op Assign> ::= ^ <Op If> '=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<>' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '<>' <Op Assign>
        <Op Assign> ::= _ <Op If> '+=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '+=' <Op Assign>
        <Op Assign> ::= _ <Op If> '-=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '-=' <Op Assign>
        <Op Assign> ::= _ <Op If> '*=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '*=' <Op Assign>
        <Op Assign> ::= _ <Op If> '/=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '/=' <Op Assign>
        <Op Assign> ::= _ <Op If> '^=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '^=' <Op Assign>
        <Op Assign> ::= _ <Op If> '&=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '&=' <Op Assign>
        <Op Assign> ::= _ <Op If> '|=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '|=' <Op Assign>
        <Op Assign> ::= _ <Op If> '>>=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '>>=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<<=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '<<=' <Op Assign>
        <Op Assign> ::= _ <Op If>                                                       <Op Assign> ::= ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        ';' s 213
        '@' s 1
        '{' s 116
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        asm s 214
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        bool s 2
        BooleanLiteral s 141
        BP s 142
        break s 215
        BX s 143
        byte s 3
        CH s 144
        CharLiteral s 145
        CL s 146
        const s 5
        continue s 216
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        do s 217
        DS s 153
        DX s 154
        enum s 47
        ES s 155
        extern s 8
        for s 218
        FS s 156
        goto s 219
        GS s 157
        HexLiteral s 158
        Id s 220
        if s 221
        int s 10
        loop s 222
        next s 223
        NullLiteral s 160
        OctLiteral s 161
        private s 13
        return s 224
        sbyte s 14
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        static s 15
        string s 17
        StringLiteral s 166
        struct s 48
        switch s 225
        uint s 20
        void s 22
        while s 226
        <Base> g 23
        <Block> g 227
        <Expression> g 228
        <Mod> g 35
        <Normal Stm> g 229
        <Op Add> g 168
        <Op And> g 169
        <Op Assign> g 170
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 176
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Scalar> g 38
        <Statement> g 230
        <Stm List> g 472
        <Type> g 40
        <Value> g 184
        <Var Decl> g 232
        '}' r 123


State 466
        Prior States: 458

        <Normal Stm> ::= switch '(' <Expression> ')' '{' <Case Stms> '}' _              <Normal Stm> ::= switch '(' <Expression> ')' '{' <Case Stms> '}' ^

        '-' r 105
        '--' r 105
        '!' r 105
        '$' r 105
        '&' r 105
        '(' r 105
        '*' r 105
        ';' r 105
        '@' r 105
        '{' r 105
        '}' r 105
        '~' r 105
        '++' r 105
        '£' r 105
        AH r 105
        AL r 105
        asm r 105
        AX r 105
        BH r 105
        BinaryLiteral r 105
        BL r 105
        bool r 105
        BooleanLiteral r 105
        BP r 105
        break r 105
        BX r 105
        byte r 105
        case r 105
        CH r 105
        CharLiteral r 105
        CL r 105
        const r 105
        continue r 105
        CS r 105
        CX r 105
        DecLiteral r 105
        default r 105
        DH r 105
        DI r 105
        DL r 105
        do r 105
        DS r 105
        DX r 105
        else r 105
        enum r 105
        ES r 105
        extern r 105
        for r 105
        FS r 105
        goto r 105
        GS r 105
        HexLiteral r 105
        Id r 105
        if r 105
        int r 105
        loop r 105
        next r 105
        NullLiteral r 105
        OctLiteral r 105
        private r 105
        return r 105
        sbyte r 105
        SI r 105
        sizeof r 105
        SP r 105
        SS r 105
        static r 105
        string r 105
        StringLiteral r 105
        struct r 105
        switch r 105
        uint r 105
        void r 105
        while r 105


State 467
        Prior States: 459

        <Statement> ::= for '(' <Arg> ';' <Arg> ';' <Arg> ')' _ <Statement>             <Statement> ::= for '(' <Arg> ';' <Arg> ';' <Arg> ')' ^ <Statement>
        <Var Decl> ::= _ <Mod> <Type> <Var> <Var List> ';'                              <Var Decl> ::= ^ <Mod> <Type> <Var> <Var List> ';'
        <Var Decl> ::= _ <Type> <Var> <Var List> ';'                                    <Var Decl> ::= ^ <Type> <Var> <Var List> ';'
        <Var Decl> ::= _ <Mod> <Var> <Var List> ';'                                     <Var Decl> ::= ^ <Mod> <Var> <Var List> ';'
        <Mod> ::= _ extern                                                              <Mod> ::= ^ extern
        <Mod> ::= _ static                                                              <Mod> ::= ^ static
        <Mod> ::= _ const                                                               <Mod> ::= ^ const
        <Mod> ::= _ private                                                             <Mod> ::= ^ private
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string
        <Statement> ::= _ <Var Decl>                                                    <Statement> ::= ^ <Var Decl>
        <Statement> ::= _ Id ':'                                                        <Statement> ::= ^ Id ':'
        <Statement> ::= _ if '(' <Expression> ')' <Statement>                           <Statement> ::= ^ if '(' <Expression> ')' <Statement>
        <Statement> ::= _ if '(' <Expression> ')' <Then Stm> else <Statement>           <Statement> ::= ^ if '(' <Expression> ')' <Then Stm> else <Statement>
        <Statement> ::= _ while '(' <Expression> ')' <Statement>                        <Statement> ::= ^ while '(' <Expression> ')' <Statement>
        <Statement> ::= _ for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Statement>             <Statement> ::= ^ for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Statement>
        <Statement> ::= _ asm '{' <INSTRUCTIONS> '}'                                    <Statement> ::= ^ asm '{' <INSTRUCTIONS> '}'
        <Statement> ::= _ loop <Statement>                                              <Statement> ::= ^ loop <Statement>
        <Statement> ::= _ <Normal Stm>                                                  <Statement> ::= ^ <Normal Stm>
        <Normal Stm> ::= _ do <Statement> while '(' <Expression> ')'                    <Normal Stm> ::= ^ do <Statement> while '(' <Expression> ')'
        <Normal Stm> ::= _ switch '(' <Expression> ')' '{' <Case Stms> '}'              <Normal Stm> ::= ^ switch '(' <Expression> ')' '{' <Case Stms> '}'
        <Normal Stm> ::= _ <Block>                                                      <Normal Stm> ::= ^ <Block>
        <Normal Stm> ::= _ <Expression> ';'                                             <Normal Stm> ::= ^ <Expression> ';'
        <Normal Stm> ::= _ goto Id ';'                                                  <Normal Stm> ::= ^ goto Id ';'
        <Normal Stm> ::= _ break ';'                                                    <Normal Stm> ::= ^ break ';'
        <Normal Stm> ::= _ continue ';'                                                 <Normal Stm> ::= ^ continue ';'
        <Normal Stm> ::= _ goto case DecLiteral ';'                                     <Normal Stm> ::= ^ goto case DecLiteral ';'
        <Normal Stm> ::= _ goto default ';'                                             <Normal Stm> ::= ^ goto default ';'
        <Normal Stm> ::= _ next ';'                                                     <Normal Stm> ::= ^ next ';'
        <Normal Stm> ::= _ return <Expression> ';'                                      <Normal Stm> ::= ^ return <Expression> ';'
        <Normal Stm> ::= _ ';'                                                          <Normal Stm> ::= ^ ';'
        <Block> ::= _ '{' <Stm List> '}'                                                <Block> ::= ^ '{' <Stm List> '}'
        <Expression> ::= _ <Op Assign>                                                  <Expression> ::= ^ <Op Assign>
        <Op Assign> ::= _ <Op If> '=' <Op Assign>                                       <Op Assign> ::= ^ <Op If> '=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<>' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '<>' <Op Assign>
        <Op Assign> ::= _ <Op If> '+=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '+=' <Op Assign>
        <Op Assign> ::= _ <Op If> '-=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '-=' <Op Assign>
        <Op Assign> ::= _ <Op If> '*=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '*=' <Op Assign>
        <Op Assign> ::= _ <Op If> '/=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '/=' <Op Assign>
        <Op Assign> ::= _ <Op If> '^=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '^=' <Op Assign>
        <Op Assign> ::= _ <Op If> '&=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '&=' <Op Assign>
        <Op Assign> ::= _ <Op If> '|=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '|=' <Op Assign>
        <Op Assign> ::= _ <Op If> '>>=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '>>=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<<=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '<<=' <Op Assign>
        <Op Assign> ::= _ <Op If>                                                       <Op Assign> ::= ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        ';' s 213
        '@' s 1
        '{' s 116
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        asm s 214
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        bool s 2
        BooleanLiteral s 141
        BP s 142
        break s 215
        BX s 143
        byte s 3
        CH s 144
        CharLiteral s 145
        CL s 146
        const s 5
        continue s 216
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        do s 217
        DS s 153
        DX s 154
        enum s 47
        ES s 155
        extern s 8
        for s 218
        FS s 156
        goto s 219
        GS s 157
        HexLiteral s 158
        Id s 220
        if s 221
        int s 10
        loop s 222
        next s 223
        NullLiteral s 160
        OctLiteral s 161
        private s 13
        return s 224
        sbyte s 14
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        static s 15
        string s 17
        StringLiteral s 166
        struct s 48
        switch s 225
        uint s 20
        void s 22
        while s 226
        <Base> g 23
        <Block> g 227
        <Expression> g 228
        <Mod> g 35
        <Normal Stm> g 229
        <Op Add> g 168
        <Op And> g 169
        <Op Assign> g 170
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 176
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Scalar> g 38
        <Statement> g 473
        <Type> g 40
        <Value> g 184
        <Var Decl> g 232


State 468
        Prior States: 460

        <Statement> ::= for '(' <Arg> ';' _ <Arg> ';' <Arg> ')' <Statement>             <Statement> ::= for '(' <Arg> ';' ^ <Arg> ';' <Arg> ')' <Statement>
        <Then Stm> ::= for '(' <Arg> ';' _ <Arg> ';' <Arg> ')' <Then Stm>               <Then Stm> ::= for '(' <Arg> ';' ^ <Arg> ';' <Arg> ')' <Then Stm>
        <Arg> ::= _ <Expression>                                                        <Arg> ::= ^ <Expression>
        <Arg> ::= _                                                                     <Arg> ::= ^
        <Expression> ::= _ <Op Assign>                                                  <Expression> ::= ^ <Op Assign>
        <Op Assign> ::= _ <Op If> '=' <Op Assign>                                       <Op Assign> ::= ^ <Op If> '=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<>' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '<>' <Op Assign>
        <Op Assign> ::= _ <Op If> '+=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '+=' <Op Assign>
        <Op Assign> ::= _ <Op If> '-=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '-=' <Op Assign>
        <Op Assign> ::= _ <Op If> '*=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '*=' <Op Assign>
        <Op Assign> ::= _ <Op If> '/=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '/=' <Op Assign>
        <Op Assign> ::= _ <Op If> '^=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '^=' <Op Assign>
        <Op Assign> ::= _ <Op If> '&=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '&=' <Op Assign>
        <Op Assign> ::= _ <Op If> '|=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '|=' <Op Assign>
        <Op Assign> ::= _ <Op If> '>>=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '>>=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<<=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '<<=' <Op Assign>
        <Op Assign> ::= _ <Op If>                                                       <Op Assign> ::= ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Arg> g 474
        <Expression> g 399
        <Op Add> g 168
        <Op And> g 169
        <Op Assign> g 170
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 176
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184
        ';' r 117


State 469
        Prior States: 461

        <Statement> ::= if '(' <Expression> ')' _ <Statement>                           <Statement> ::= if '(' <Expression> ')' ^ <Statement>
        <Statement> ::= if '(' <Expression> ')' _ <Then Stm> else <Statement>           <Statement> ::= if '(' <Expression> ')' ^ <Then Stm> else <Statement>
        <Then Stm> ::= if '(' <Expression> ')' _ <Then Stm> else <Then Stm>             <Then Stm> ::= if '(' <Expression> ')' ^ <Then Stm> else <Then Stm>
        <Var Decl> ::= _ <Mod> <Type> <Var> <Var List> ';'                              <Var Decl> ::= ^ <Mod> <Type> <Var> <Var List> ';'
        <Var Decl> ::= _ <Type> <Var> <Var List> ';'                                    <Var Decl> ::= ^ <Type> <Var> <Var List> ';'
        <Var Decl> ::= _ <Mod> <Var> <Var List> ';'                                     <Var Decl> ::= ^ <Mod> <Var> <Var List> ';'
        <Mod> ::= _ extern                                                              <Mod> ::= ^ extern
        <Mod> ::= _ static                                                              <Mod> ::= ^ static
        <Mod> ::= _ const                                                               <Mod> ::= ^ const
        <Mod> ::= _ private                                                             <Mod> ::= ^ private
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string
        <Statement> ::= _ <Var Decl>                                                    <Statement> ::= ^ <Var Decl>
        <Statement> ::= _ Id ':'                                                        <Statement> ::= ^ Id ':'
        <Statement> ::= _ if '(' <Expression> ')' <Statement>                           <Statement> ::= ^ if '(' <Expression> ')' <Statement>
        <Statement> ::= _ if '(' <Expression> ')' <Then Stm> else <Statement>           <Statement> ::= ^ if '(' <Expression> ')' <Then Stm> else <Statement>
        <Statement> ::= _ while '(' <Expression> ')' <Statement>                        <Statement> ::= ^ while '(' <Expression> ')' <Statement>
        <Statement> ::= _ for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Statement>             <Statement> ::= ^ for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Statement>
        <Statement> ::= _ asm '{' <INSTRUCTIONS> '}'                                    <Statement> ::= ^ asm '{' <INSTRUCTIONS> '}'
        <Statement> ::= _ loop <Statement>                                              <Statement> ::= ^ loop <Statement>
        <Statement> ::= _ <Normal Stm>                                                  <Statement> ::= ^ <Normal Stm>
        <Then Stm> ::= _ if '(' <Expression> ')' <Then Stm> else <Then Stm>             <Then Stm> ::= ^ if '(' <Expression> ')' <Then Stm> else <Then Stm>
        <Then Stm> ::= _ while '(' <Expression> ')' <Then Stm>                          <Then Stm> ::= ^ while '(' <Expression> ')' <Then Stm>
        <Then Stm> ::= _ for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Then Stm>               <Then Stm> ::= ^ for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Then Stm>
        <Then Stm> ::= _ <Normal Stm>                                                   <Then Stm> ::= ^ <Normal Stm>
        <Normal Stm> ::= _ do <Statement> while '(' <Expression> ')'                    <Normal Stm> ::= ^ do <Statement> while '(' <Expression> ')'
        <Normal Stm> ::= _ switch '(' <Expression> ')' '{' <Case Stms> '}'              <Normal Stm> ::= ^ switch '(' <Expression> ')' '{' <Case Stms> '}'
        <Normal Stm> ::= _ <Block>                                                      <Normal Stm> ::= ^ <Block>
        <Normal Stm> ::= _ <Expression> ';'                                             <Normal Stm> ::= ^ <Expression> ';'
        <Normal Stm> ::= _ goto Id ';'                                                  <Normal Stm> ::= ^ goto Id ';'
        <Normal Stm> ::= _ break ';'                                                    <Normal Stm> ::= ^ break ';'
        <Normal Stm> ::= _ continue ';'                                                 <Normal Stm> ::= ^ continue ';'
        <Normal Stm> ::= _ goto case DecLiteral ';'                                     <Normal Stm> ::= ^ goto case DecLiteral ';'
        <Normal Stm> ::= _ goto default ';'                                             <Normal Stm> ::= ^ goto default ';'
        <Normal Stm> ::= _ next ';'                                                     <Normal Stm> ::= ^ next ';'
        <Normal Stm> ::= _ return <Expression> ';'                                      <Normal Stm> ::= ^ return <Expression> ';'
        <Normal Stm> ::= _ ';'                                                          <Normal Stm> ::= ^ ';'
        <Block> ::= _ '{' <Stm List> '}'                                                <Block> ::= ^ '{' <Stm List> '}'
        <Expression> ::= _ <Op Assign>                                                  <Expression> ::= ^ <Op Assign>
        <Op Assign> ::= _ <Op If> '=' <Op Assign>                                       <Op Assign> ::= ^ <Op If> '=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<>' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '<>' <Op Assign>
        <Op Assign> ::= _ <Op If> '+=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '+=' <Op Assign>
        <Op Assign> ::= _ <Op If> '-=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '-=' <Op Assign>
        <Op Assign> ::= _ <Op If> '*=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '*=' <Op Assign>
        <Op Assign> ::= _ <Op If> '/=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '/=' <Op Assign>
        <Op Assign> ::= _ <Op If> '^=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '^=' <Op Assign>
        <Op Assign> ::= _ <Op If> '&=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '&=' <Op Assign>
        <Op Assign> ::= _ <Op If> '|=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '|=' <Op Assign>
        <Op Assign> ::= _ <Op If> '>>=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '>>=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<<=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '<<=' <Op Assign>
        <Op Assign> ::= _ <Op If>                                                       <Op Assign> ::= ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        ';' s 213
        '@' s 1
        '{' s 116
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        asm s 214
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        bool s 2
        BooleanLiteral s 141
        BP s 142
        break s 215
        BX s 143
        byte s 3
        CH s 144
        CharLiteral s 145
        CL s 146
        const s 5
        continue s 216
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        do s 217
        DS s 153
        DX s 154
        enum s 47
        ES s 155
        extern s 8
        for s 442
        FS s 156
        goto s 219
        GS s 157
        HexLiteral s 158
        Id s 220
        if s 443
        int s 10
        loop s 222
        next s 223
        NullLiteral s 160
        OctLiteral s 161
        private s 13
        return s 224
        sbyte s 14
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        static s 15
        string s 17
        StringLiteral s 166
        struct s 48
        switch s 225
        uint s 20
        void s 22
        while s 444
        <Base> g 23
        <Block> g 227
        <Expression> g 228
        <Mod> g 35
        <Normal Stm> g 445
        <Op Add> g 168
        <Op And> g 169
        <Op Assign> g 170
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 176
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Scalar> g 38
        <Statement> g 446
        <Then Stm> g 475
        <Type> g 40
        <Value> g 184
        <Var Decl> g 232


State 470
        Prior States: 462

        <Statement> ::= while '(' <Expression> ')' _ <Statement>                        <Statement> ::= while '(' <Expression> ')' ^ <Statement>
        <Then Stm> ::= while '(' <Expression> ')' _ <Then Stm>                          <Then Stm> ::= while '(' <Expression> ')' ^ <Then Stm>
        <Var Decl> ::= _ <Mod> <Type> <Var> <Var List> ';'                              <Var Decl> ::= ^ <Mod> <Type> <Var> <Var List> ';'
        <Var Decl> ::= _ <Type> <Var> <Var List> ';'                                    <Var Decl> ::= ^ <Type> <Var> <Var List> ';'
        <Var Decl> ::= _ <Mod> <Var> <Var List> ';'                                     <Var Decl> ::= ^ <Mod> <Var> <Var List> ';'
        <Mod> ::= _ extern                                                              <Mod> ::= ^ extern
        <Mod> ::= _ static                                                              <Mod> ::= ^ static
        <Mod> ::= _ const                                                               <Mod> ::= ^ const
        <Mod> ::= _ private                                                             <Mod> ::= ^ private
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string
        <Statement> ::= _ <Var Decl>                                                    <Statement> ::= ^ <Var Decl>
        <Statement> ::= _ Id ':'                                                        <Statement> ::= ^ Id ':'
        <Statement> ::= _ if '(' <Expression> ')' <Statement>                           <Statement> ::= ^ if '(' <Expression> ')' <Statement>
        <Statement> ::= _ if '(' <Expression> ')' <Then Stm> else <Statement>           <Statement> ::= ^ if '(' <Expression> ')' <Then Stm> else <Statement>
        <Statement> ::= _ while '(' <Expression> ')' <Statement>                        <Statement> ::= ^ while '(' <Expression> ')' <Statement>
        <Statement> ::= _ for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Statement>             <Statement> ::= ^ for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Statement>
        <Statement> ::= _ asm '{' <INSTRUCTIONS> '}'                                    <Statement> ::= ^ asm '{' <INSTRUCTIONS> '}'
        <Statement> ::= _ loop <Statement>                                              <Statement> ::= ^ loop <Statement>
        <Statement> ::= _ <Normal Stm>                                                  <Statement> ::= ^ <Normal Stm>
        <Then Stm> ::= _ if '(' <Expression> ')' <Then Stm> else <Then Stm>             <Then Stm> ::= ^ if '(' <Expression> ')' <Then Stm> else <Then Stm>
        <Then Stm> ::= _ while '(' <Expression> ')' <Then Stm>                          <Then Stm> ::= ^ while '(' <Expression> ')' <Then Stm>
        <Then Stm> ::= _ for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Then Stm>               <Then Stm> ::= ^ for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Then Stm>
        <Then Stm> ::= _ <Normal Stm>                                                   <Then Stm> ::= ^ <Normal Stm>
        <Normal Stm> ::= _ do <Statement> while '(' <Expression> ')'                    <Normal Stm> ::= ^ do <Statement> while '(' <Expression> ')'
        <Normal Stm> ::= _ switch '(' <Expression> ')' '{' <Case Stms> '}'              <Normal Stm> ::= ^ switch '(' <Expression> ')' '{' <Case Stms> '}'
        <Normal Stm> ::= _ <Block>                                                      <Normal Stm> ::= ^ <Block>
        <Normal Stm> ::= _ <Expression> ';'                                             <Normal Stm> ::= ^ <Expression> ';'
        <Normal Stm> ::= _ goto Id ';'                                                  <Normal Stm> ::= ^ goto Id ';'
        <Normal Stm> ::= _ break ';'                                                    <Normal Stm> ::= ^ break ';'
        <Normal Stm> ::= _ continue ';'                                                 <Normal Stm> ::= ^ continue ';'
        <Normal Stm> ::= _ goto case DecLiteral ';'                                     <Normal Stm> ::= ^ goto case DecLiteral ';'
        <Normal Stm> ::= _ goto default ';'                                             <Normal Stm> ::= ^ goto default ';'
        <Normal Stm> ::= _ next ';'                                                     <Normal Stm> ::= ^ next ';'
        <Normal Stm> ::= _ return <Expression> ';'                                      <Normal Stm> ::= ^ return <Expression> ';'
        <Normal Stm> ::= _ ';'                                                          <Normal Stm> ::= ^ ';'
        <Block> ::= _ '{' <Stm List> '}'                                                <Block> ::= ^ '{' <Stm List> '}'
        <Expression> ::= _ <Op Assign>                                                  <Expression> ::= ^ <Op Assign>
        <Op Assign> ::= _ <Op If> '=' <Op Assign>                                       <Op Assign> ::= ^ <Op If> '=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<>' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '<>' <Op Assign>
        <Op Assign> ::= _ <Op If> '+=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '+=' <Op Assign>
        <Op Assign> ::= _ <Op If> '-=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '-=' <Op Assign>
        <Op Assign> ::= _ <Op If> '*=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '*=' <Op Assign>
        <Op Assign> ::= _ <Op If> '/=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '/=' <Op Assign>
        <Op Assign> ::= _ <Op If> '^=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '^=' <Op Assign>
        <Op Assign> ::= _ <Op If> '&=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '&=' <Op Assign>
        <Op Assign> ::= _ <Op If> '|=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '|=' <Op Assign>
        <Op Assign> ::= _ <Op If> '>>=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '>>=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<<=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '<<=' <Op Assign>
        <Op Assign> ::= _ <Op If>                                                       <Op Assign> ::= ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        ';' s 213
        '@' s 1
        '{' s 116
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        asm s 214
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        bool s 2
        BooleanLiteral s 141
        BP s 142
        break s 215
        BX s 143
        byte s 3
        CH s 144
        CharLiteral s 145
        CL s 146
        const s 5
        continue s 216
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        do s 217
        DS s 153
        DX s 154
        enum s 47
        ES s 155
        extern s 8
        for s 442
        FS s 156
        goto s 219
        GS s 157
        HexLiteral s 158
        Id s 220
        if s 443
        int s 10
        loop s 222
        next s 223
        NullLiteral s 160
        OctLiteral s 161
        private s 13
        return s 224
        sbyte s 14
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        static s 15
        string s 17
        StringLiteral s 166
        struct s 48
        switch s 225
        uint s 20
        void s 22
        while s 444
        <Base> g 23
        <Block> g 227
        <Expression> g 228
        <Mod> g 35
        <Normal Stm> g 445
        <Op Add> g 168
        <Op And> g 169
        <Op Assign> g 170
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 176
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Scalar> g 38
        <Statement> g 449
        <Then Stm> g 476
        <Type> g 40
        <Value> g 184
        <Var Decl> g 232


State 471
        Prior States: 464

        <Case Stms> ::= case <Value> ':' _ <Stm List> <Case Stms>                       <Case Stms> ::= case <Value> ':' ^ <Stm List> <Case Stms>
        <Var Decl> ::= _ <Mod> <Type> <Var> <Var List> ';'                              <Var Decl> ::= ^ <Mod> <Type> <Var> <Var List> ';'
        <Var Decl> ::= _ <Type> <Var> <Var List> ';'                                    <Var Decl> ::= ^ <Type> <Var> <Var List> ';'
        <Var Decl> ::= _ <Mod> <Var> <Var List> ';'                                     <Var Decl> ::= ^ <Mod> <Var> <Var List> ';'
        <Mod> ::= _ extern                                                              <Mod> ::= ^ extern
        <Mod> ::= _ static                                                              <Mod> ::= ^ static
        <Mod> ::= _ const                                                               <Mod> ::= ^ const
        <Mod> ::= _ private                                                             <Mod> ::= ^ private
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string
        <Statement> ::= _ <Var Decl>                                                    <Statement> ::= ^ <Var Decl>
        <Statement> ::= _ Id ':'                                                        <Statement> ::= ^ Id ':'
        <Statement> ::= _ if '(' <Expression> ')' <Statement>                           <Statement> ::= ^ if '(' <Expression> ')' <Statement>
        <Statement> ::= _ if '(' <Expression> ')' <Then Stm> else <Statement>           <Statement> ::= ^ if '(' <Expression> ')' <Then Stm> else <Statement>
        <Statement> ::= _ while '(' <Expression> ')' <Statement>                        <Statement> ::= ^ while '(' <Expression> ')' <Statement>
        <Statement> ::= _ for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Statement>             <Statement> ::= ^ for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Statement>
        <Statement> ::= _ asm '{' <INSTRUCTIONS> '}'                                    <Statement> ::= ^ asm '{' <INSTRUCTIONS> '}'
        <Statement> ::= _ loop <Statement>                                              <Statement> ::= ^ loop <Statement>
        <Statement> ::= _ <Normal Stm>                                                  <Statement> ::= ^ <Normal Stm>
        <Normal Stm> ::= _ do <Statement> while '(' <Expression> ')'                    <Normal Stm> ::= ^ do <Statement> while '(' <Expression> ')'
        <Normal Stm> ::= _ switch '(' <Expression> ')' '{' <Case Stms> '}'              <Normal Stm> ::= ^ switch '(' <Expression> ')' '{' <Case Stms> '}'
        <Normal Stm> ::= _ <Block>                                                      <Normal Stm> ::= ^ <Block>
        <Normal Stm> ::= _ <Expression> ';'                                             <Normal Stm> ::= ^ <Expression> ';'
        <Normal Stm> ::= _ goto Id ';'                                                  <Normal Stm> ::= ^ goto Id ';'
        <Normal Stm> ::= _ break ';'                                                    <Normal Stm> ::= ^ break ';'
        <Normal Stm> ::= _ continue ';'                                                 <Normal Stm> ::= ^ continue ';'
        <Normal Stm> ::= _ goto case DecLiteral ';'                                     <Normal Stm> ::= ^ goto case DecLiteral ';'
        <Normal Stm> ::= _ goto default ';'                                             <Normal Stm> ::= ^ goto default ';'
        <Normal Stm> ::= _ next ';'                                                     <Normal Stm> ::= ^ next ';'
        <Normal Stm> ::= _ return <Expression> ';'                                      <Normal Stm> ::= ^ return <Expression> ';'
        <Normal Stm> ::= _ ';'                                                          <Normal Stm> ::= ^ ';'
        <Block> ::= _ '{' <Stm List> '}'                                                <Block> ::= ^ '{' <Stm List> '}'
        <Stm List> ::= _ <Statement> <Stm List>                                         <Stm List> ::= ^ <Statement> <Stm List>
        <Stm List> ::= _                                                                <Stm List> ::= ^
        <Expression> ::= _ <Op Assign>                                                  <Expression> ::= ^ <Op Assign>
        <Op Assign> ::= _ <Op If> '=' <Op Assign>                                       <Op Assign> ::= ^ <Op If> '=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<>' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '<>' <Op Assign>
        <Op Assign> ::= _ <Op If> '+=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '+=' <Op Assign>
        <Op Assign> ::= _ <Op If> '-=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '-=' <Op Assign>
        <Op Assign> ::= _ <Op If> '*=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '*=' <Op Assign>
        <Op Assign> ::= _ <Op If> '/=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '/=' <Op Assign>
        <Op Assign> ::= _ <Op If> '^=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '^=' <Op Assign>
        <Op Assign> ::= _ <Op If> '&=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '&=' <Op Assign>
        <Op Assign> ::= _ <Op If> '|=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '|=' <Op Assign>
        <Op Assign> ::= _ <Op If> '>>=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '>>=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<<=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '<<=' <Op Assign>
        <Op Assign> ::= _ <Op If>                                                       <Op Assign> ::= ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        ';' s 213
        '@' s 1
        '{' s 116
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        asm s 214
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        bool s 2
        BooleanLiteral s 141
        BP s 142
        break s 215
        BX s 143
        byte s 3
        CH s 144
        CharLiteral s 145
        CL s 146
        const s 5
        continue s 216
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        do s 217
        DS s 153
        DX s 154
        enum s 47
        ES s 155
        extern s 8
        for s 218
        FS s 156
        goto s 219
        GS s 157
        HexLiteral s 158
        Id s 220
        if s 221
        int s 10
        loop s 222
        next s 223
        NullLiteral s 160
        OctLiteral s 161
        private s 13
        return s 224
        sbyte s 14
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        static s 15
        string s 17
        StringLiteral s 166
        struct s 48
        switch s 225
        uint s 20
        void s 22
        while s 226
        <Base> g 23
        <Block> g 227
        <Expression> g 228
        <Mod> g 35
        <Normal Stm> g 229
        <Op Add> g 168
        <Op And> g 169
        <Op Assign> g 170
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 176
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Scalar> g 38
        <Statement> g 230
        <Stm List> g 477
        <Type> g 40
        <Value> g 184
        <Var Decl> g 232
        '}' r 123
        case r 123
        default r 123


State 472
        Prior States: 465

        <Case Stms> ::= default ':' <Stm List> _                                        <Case Stms> ::= default ':' <Stm List> ^

        '}' r 119


State 473
        Prior States: 467, 483

        <Statement> ::= for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Statement> _             <Statement> ::= for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Statement> ^

        '-' r 96
        '--' r 96
        '!' r 96
        '$' r 96
        '&' r 96
        '(' r 96
        '*' r 96
        ';' r 96
        '@' r 96
        '{' r 96
        '}' r 96
        '~' r 96
        '++' r 96
        '£' r 96
        AH r 96
        AL r 96
        asm r 96
        AX r 96
        BH r 96
        BinaryLiteral r 96
        BL r 96
        bool r 96
        BooleanLiteral r 96
        BP r 96
        break r 96
        BX r 96
        byte r 96
        case r 96
        CH r 96
        CharLiteral r 96
        CL r 96
        const r 96
        continue r 96
        CS r 96
        CX r 96
        DecLiteral r 96
        default r 96
        DH r 96
        DI r 96
        DL r 96
        do r 96
        DS r 96
        DX r 96
        enum r 96
        ES r 96
        extern r 96
        for r 96
        FS r 96
        goto r 96
        GS r 96
        HexLiteral r 96
        Id r 96
        if r 96
        int r 96
        loop r 96
        next r 96
        NullLiteral r 96
        OctLiteral r 96
        private r 96
        return r 96
        sbyte r 96
        SI r 96
        sizeof r 96
        SP r 96
        SS r 96
        static r 96
        string r 96
        StringLiteral r 96
        struct r 96
        switch r 96
        uint r 96
        void r 96
        while r 96


State 474
        Prior States: 468

        <Statement> ::= for '(' <Arg> ';' <Arg> _ ';' <Arg> ')' <Statement>             <Statement> ::= for '(' <Arg> ';' <Arg> ^ ';' <Arg> ')' <Statement>
        <Then Stm> ::= for '(' <Arg> ';' <Arg> _ ';' <Arg> ')' <Then Stm>               <Then Stm> ::= for '(' <Arg> ';' <Arg> ^ ';' <Arg> ')' <Then Stm>

        ';' s 478


State 475
        Prior States: 469

        <Statement> ::= if '(' <Expression> ')' <Then Stm> _ else <Statement>           <Statement> ::= if '(' <Expression> ')' <Then Stm> ^ else <Statement>
        <Then Stm> ::= if '(' <Expression> ')' <Then Stm> _ else <Then Stm>             <Then Stm> ::= if '(' <Expression> ')' <Then Stm> ^ else <Then Stm>

        else s 479


State 476
        Prior States: 470

        <Then Stm> ::= while '(' <Expression> ')' <Then Stm> _                          <Then Stm> ::= while '(' <Expression> ')' <Then Stm> ^

        else r 101


State 477
        Prior States: 471

        <Case Stms> ::= case <Value> ':' <Stm List> _ <Case Stms>                       <Case Stms> ::= case <Value> ':' <Stm List> ^ <Case Stms>
        <Case Stms> ::= _ case <Value> ':' <Stm List> <Case Stms>                       <Case Stms> ::= ^ case <Value> ':' <Stm List> <Case Stms>
        <Case Stms> ::= _ default ':' <Stm List>                                        <Case Stms> ::= ^ default ':' <Stm List>
        <Case Stms> ::= _                                                               <Case Stms> ::= ^

        case s 456
        default s 457
        <Case Stms> g 480
        '}' r 120


State 478
        Prior States: 474

        <Statement> ::= for '(' <Arg> ';' <Arg> ';' _ <Arg> ')' <Statement>             <Statement> ::= for '(' <Arg> ';' <Arg> ';' ^ <Arg> ')' <Statement>
        <Then Stm> ::= for '(' <Arg> ';' <Arg> ';' _ <Arg> ')' <Then Stm>               <Then Stm> ::= for '(' <Arg> ';' <Arg> ';' ^ <Arg> ')' <Then Stm>
        <Arg> ::= _ <Expression>                                                        <Arg> ::= ^ <Expression>
        <Arg> ::= _                                                                     <Arg> ::= ^
        <Expression> ::= _ <Op Assign>                                                  <Expression> ::= ^ <Op Assign>
        <Op Assign> ::= _ <Op If> '=' <Op Assign>                                       <Op Assign> ::= ^ <Op If> '=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<>' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '<>' <Op Assign>
        <Op Assign> ::= _ <Op If> '+=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '+=' <Op Assign>
        <Op Assign> ::= _ <Op If> '-=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '-=' <Op Assign>
        <Op Assign> ::= _ <Op If> '*=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '*=' <Op Assign>
        <Op Assign> ::= _ <Op If> '/=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '/=' <Op Assign>
        <Op Assign> ::= _ <Op If> '^=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '^=' <Op Assign>
        <Op Assign> ::= _ <Op If> '&=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '&=' <Op Assign>
        <Op Assign> ::= _ <Op If> '|=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '|=' <Op Assign>
        <Op Assign> ::= _ <Op If> '>>=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '>>=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<<=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '<<=' <Op Assign>
        <Op Assign> ::= _ <Op If>                                                       <Op Assign> ::= ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        BooleanLiteral s 141
        BP s 142
        BX s 143
        CH s 144
        CharLiteral s 145
        CL s 146
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        DS s 153
        DX s 154
        ES s 155
        FS s 156
        GS s 157
        HexLiteral s 158
        Id s 159
        NullLiteral s 160
        OctLiteral s 161
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        StringLiteral s 166
        <Arg> g 481
        <Expression> g 399
        <Op Add> g 168
        <Op And> g 169
        <Op Assign> g 170
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 176
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Value> g 184
        ')' r 117


State 479
        Prior States: 475

        <Statement> ::= if '(' <Expression> ')' <Then Stm> else _ <Statement>           <Statement> ::= if '(' <Expression> ')' <Then Stm> else ^ <Statement>
        <Then Stm> ::= if '(' <Expression> ')' <Then Stm> else _ <Then Stm>             <Then Stm> ::= if '(' <Expression> ')' <Then Stm> else ^ <Then Stm>
        <Var Decl> ::= _ <Mod> <Type> <Var> <Var List> ';'                              <Var Decl> ::= ^ <Mod> <Type> <Var> <Var List> ';'
        <Var Decl> ::= _ <Type> <Var> <Var List> ';'                                    <Var Decl> ::= ^ <Type> <Var> <Var List> ';'
        <Var Decl> ::= _ <Mod> <Var> <Var List> ';'                                     <Var Decl> ::= ^ <Mod> <Var> <Var List> ';'
        <Mod> ::= _ extern                                                              <Mod> ::= ^ extern
        <Mod> ::= _ static                                                              <Mod> ::= ^ static
        <Mod> ::= _ const                                                               <Mod> ::= ^ const
        <Mod> ::= _ private                                                             <Mod> ::= ^ private
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string
        <Statement> ::= _ <Var Decl>                                                    <Statement> ::= ^ <Var Decl>
        <Statement> ::= _ Id ':'                                                        <Statement> ::= ^ Id ':'
        <Statement> ::= _ if '(' <Expression> ')' <Statement>                           <Statement> ::= ^ if '(' <Expression> ')' <Statement>
        <Statement> ::= _ if '(' <Expression> ')' <Then Stm> else <Statement>           <Statement> ::= ^ if '(' <Expression> ')' <Then Stm> else <Statement>
        <Statement> ::= _ while '(' <Expression> ')' <Statement>                        <Statement> ::= ^ while '(' <Expression> ')' <Statement>
        <Statement> ::= _ for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Statement>             <Statement> ::= ^ for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Statement>
        <Statement> ::= _ asm '{' <INSTRUCTIONS> '}'                                    <Statement> ::= ^ asm '{' <INSTRUCTIONS> '}'
        <Statement> ::= _ loop <Statement>                                              <Statement> ::= ^ loop <Statement>
        <Statement> ::= _ <Normal Stm>                                                  <Statement> ::= ^ <Normal Stm>
        <Then Stm> ::= _ if '(' <Expression> ')' <Then Stm> else <Then Stm>             <Then Stm> ::= ^ if '(' <Expression> ')' <Then Stm> else <Then Stm>
        <Then Stm> ::= _ while '(' <Expression> ')' <Then Stm>                          <Then Stm> ::= ^ while '(' <Expression> ')' <Then Stm>
        <Then Stm> ::= _ for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Then Stm>               <Then Stm> ::= ^ for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Then Stm>
        <Then Stm> ::= _ <Normal Stm>                                                   <Then Stm> ::= ^ <Normal Stm>
        <Normal Stm> ::= _ do <Statement> while '(' <Expression> ')'                    <Normal Stm> ::= ^ do <Statement> while '(' <Expression> ')'
        <Normal Stm> ::= _ switch '(' <Expression> ')' '{' <Case Stms> '}'              <Normal Stm> ::= ^ switch '(' <Expression> ')' '{' <Case Stms> '}'
        <Normal Stm> ::= _ <Block>                                                      <Normal Stm> ::= ^ <Block>
        <Normal Stm> ::= _ <Expression> ';'                                             <Normal Stm> ::= ^ <Expression> ';'
        <Normal Stm> ::= _ goto Id ';'                                                  <Normal Stm> ::= ^ goto Id ';'
        <Normal Stm> ::= _ break ';'                                                    <Normal Stm> ::= ^ break ';'
        <Normal Stm> ::= _ continue ';'                                                 <Normal Stm> ::= ^ continue ';'
        <Normal Stm> ::= _ goto case DecLiteral ';'                                     <Normal Stm> ::= ^ goto case DecLiteral ';'
        <Normal Stm> ::= _ goto default ';'                                             <Normal Stm> ::= ^ goto default ';'
        <Normal Stm> ::= _ next ';'                                                     <Normal Stm> ::= ^ next ';'
        <Normal Stm> ::= _ return <Expression> ';'                                      <Normal Stm> ::= ^ return <Expression> ';'
        <Normal Stm> ::= _ ';'                                                          <Normal Stm> ::= ^ ';'
        <Block> ::= _ '{' <Stm List> '}'                                                <Block> ::= ^ '{' <Stm List> '}'
        <Expression> ::= _ <Op Assign>                                                  <Expression> ::= ^ <Op Assign>
        <Op Assign> ::= _ <Op If> '=' <Op Assign>                                       <Op Assign> ::= ^ <Op If> '=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<>' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '<>' <Op Assign>
        <Op Assign> ::= _ <Op If> '+=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '+=' <Op Assign>
        <Op Assign> ::= _ <Op If> '-=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '-=' <Op Assign>
        <Op Assign> ::= _ <Op If> '*=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '*=' <Op Assign>
        <Op Assign> ::= _ <Op If> '/=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '/=' <Op Assign>
        <Op Assign> ::= _ <Op If> '^=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '^=' <Op Assign>
        <Op Assign> ::= _ <Op If> '&=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '&=' <Op Assign>
        <Op Assign> ::= _ <Op If> '|=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '|=' <Op Assign>
        <Op Assign> ::= _ <Op If> '>>=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '>>=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<<=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '<<=' <Op Assign>
        <Op Assign> ::= _ <Op If>                                                       <Op Assign> ::= ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        ';' s 213
        '@' s 1
        '{' s 116
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        asm s 214
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        bool s 2
        BooleanLiteral s 141
        BP s 142
        break s 215
        BX s 143
        byte s 3
        CH s 144
        CharLiteral s 145
        CL s 146
        const s 5
        continue s 216
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        do s 217
        DS s 153
        DX s 154
        enum s 47
        ES s 155
        extern s 8
        for s 442
        FS s 156
        goto s 219
        GS s 157
        HexLiteral s 158
        Id s 220
        if s 443
        int s 10
        loop s 222
        next s 223
        NullLiteral s 160
        OctLiteral s 161
        private s 13
        return s 224
        sbyte s 14
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        static s 15
        string s 17
        StringLiteral s 166
        struct s 48
        switch s 225
        uint s 20
        void s 22
        while s 444
        <Base> g 23
        <Block> g 227
        <Expression> g 228
        <Mod> g 35
        <Normal Stm> g 445
        <Op Add> g 168
        <Op And> g 169
        <Op Assign> g 170
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 176
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Scalar> g 38
        <Statement> g 463
        <Then Stm> g 482
        <Type> g 40
        <Value> g 184
        <Var Decl> g 232


State 480
        Prior States: 477

        <Case Stms> ::= case <Value> ':' <Stm List> <Case Stms> _                       <Case Stms> ::= case <Value> ':' <Stm List> <Case Stms> ^

        '}' r 118


State 481
        Prior States: 478

        <Statement> ::= for '(' <Arg> ';' <Arg> ';' <Arg> _ ')' <Statement>             <Statement> ::= for '(' <Arg> ';' <Arg> ';' <Arg> ^ ')' <Statement>
        <Then Stm> ::= for '(' <Arg> ';' <Arg> ';' <Arg> _ ')' <Then Stm>               <Then Stm> ::= for '(' <Arg> ';' <Arg> ';' <Arg> ^ ')' <Then Stm>

        ')' s 483


State 482
        Prior States: 479

        <Then Stm> ::= if '(' <Expression> ')' <Then Stm> else <Then Stm> _             <Then Stm> ::= if '(' <Expression> ')' <Then Stm> else <Then Stm> ^

        else r 100


State 483
        Prior States: 481

        <Statement> ::= for '(' <Arg> ';' <Arg> ';' <Arg> ')' _ <Statement>             <Statement> ::= for '(' <Arg> ';' <Arg> ';' <Arg> ')' ^ <Statement>
        <Then Stm> ::= for '(' <Arg> ';' <Arg> ';' <Arg> ')' _ <Then Stm>               <Then Stm> ::= for '(' <Arg> ';' <Arg> ';' <Arg> ')' ^ <Then Stm>
        <Var Decl> ::= _ <Mod> <Type> <Var> <Var List> ';'                              <Var Decl> ::= ^ <Mod> <Type> <Var> <Var List> ';'
        <Var Decl> ::= _ <Type> <Var> <Var List> ';'                                    <Var Decl> ::= ^ <Type> <Var> <Var List> ';'
        <Var Decl> ::= _ <Mod> <Var> <Var List> ';'                                     <Var Decl> ::= ^ <Mod> <Var> <Var List> ';'
        <Mod> ::= _ extern                                                              <Mod> ::= ^ extern
        <Mod> ::= _ static                                                              <Mod> ::= ^ static
        <Mod> ::= _ const                                                               <Mod> ::= ^ const
        <Mod> ::= _ private                                                             <Mod> ::= ^ private
        <Type> ::= _ <Base> <Pointers>                                                  <Type> ::= ^ <Base> <Pointers>
        <Base> ::= _ <Scalar>                                                           <Base> ::= ^ <Scalar>
        <Base> ::= _ struct Id                                                          <Base> ::= ^ struct Id
        <Base> ::= _ enum Id                                                            <Base> ::= ^ enum Id
        <Base> ::= _ '@' Id                                                             <Base> ::= ^ '@' Id
        <Scalar> ::= _ byte                                                             <Scalar> ::= ^ byte
        <Scalar> ::= _ int                                                              <Scalar> ::= ^ int
        <Scalar> ::= _ uint                                                             <Scalar> ::= ^ uint
        <Scalar> ::= _ sbyte                                                            <Scalar> ::= ^ sbyte
        <Scalar> ::= _ bool                                                             <Scalar> ::= ^ bool
        <Scalar> ::= _ void                                                             <Scalar> ::= ^ void
        <Scalar> ::= _ string                                                           <Scalar> ::= ^ string
        <Statement> ::= _ <Var Decl>                                                    <Statement> ::= ^ <Var Decl>
        <Statement> ::= _ Id ':'                                                        <Statement> ::= ^ Id ':'
        <Statement> ::= _ if '(' <Expression> ')' <Statement>                           <Statement> ::= ^ if '(' <Expression> ')' <Statement>
        <Statement> ::= _ if '(' <Expression> ')' <Then Stm> else <Statement>           <Statement> ::= ^ if '(' <Expression> ')' <Then Stm> else <Statement>
        <Statement> ::= _ while '(' <Expression> ')' <Statement>                        <Statement> ::= ^ while '(' <Expression> ')' <Statement>
        <Statement> ::= _ for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Statement>             <Statement> ::= ^ for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Statement>
        <Statement> ::= _ asm '{' <INSTRUCTIONS> '}'                                    <Statement> ::= ^ asm '{' <INSTRUCTIONS> '}'
        <Statement> ::= _ loop <Statement>                                              <Statement> ::= ^ loop <Statement>
        <Statement> ::= _ <Normal Stm>                                                  <Statement> ::= ^ <Normal Stm>
        <Then Stm> ::= _ if '(' <Expression> ')' <Then Stm> else <Then Stm>             <Then Stm> ::= ^ if '(' <Expression> ')' <Then Stm> else <Then Stm>
        <Then Stm> ::= _ while '(' <Expression> ')' <Then Stm>                          <Then Stm> ::= ^ while '(' <Expression> ')' <Then Stm>
        <Then Stm> ::= _ for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Then Stm>               <Then Stm> ::= ^ for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Then Stm>
        <Then Stm> ::= _ <Normal Stm>                                                   <Then Stm> ::= ^ <Normal Stm>
        <Normal Stm> ::= _ do <Statement> while '(' <Expression> ')'                    <Normal Stm> ::= ^ do <Statement> while '(' <Expression> ')'
        <Normal Stm> ::= _ switch '(' <Expression> ')' '{' <Case Stms> '}'              <Normal Stm> ::= ^ switch '(' <Expression> ')' '{' <Case Stms> '}'
        <Normal Stm> ::= _ <Block>                                                      <Normal Stm> ::= ^ <Block>
        <Normal Stm> ::= _ <Expression> ';'                                             <Normal Stm> ::= ^ <Expression> ';'
        <Normal Stm> ::= _ goto Id ';'                                                  <Normal Stm> ::= ^ goto Id ';'
        <Normal Stm> ::= _ break ';'                                                    <Normal Stm> ::= ^ break ';'
        <Normal Stm> ::= _ continue ';'                                                 <Normal Stm> ::= ^ continue ';'
        <Normal Stm> ::= _ goto case DecLiteral ';'                                     <Normal Stm> ::= ^ goto case DecLiteral ';'
        <Normal Stm> ::= _ goto default ';'                                             <Normal Stm> ::= ^ goto default ';'
        <Normal Stm> ::= _ next ';'                                                     <Normal Stm> ::= ^ next ';'
        <Normal Stm> ::= _ return <Expression> ';'                                      <Normal Stm> ::= ^ return <Expression> ';'
        <Normal Stm> ::= _ ';'                                                          <Normal Stm> ::= ^ ';'
        <Block> ::= _ '{' <Stm List> '}'                                                <Block> ::= ^ '{' <Stm List> '}'
        <Expression> ::= _ <Op Assign>                                                  <Expression> ::= ^ <Op Assign>
        <Op Assign> ::= _ <Op If> '=' <Op Assign>                                       <Op Assign> ::= ^ <Op If> '=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<>' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '<>' <Op Assign>
        <Op Assign> ::= _ <Op If> '+=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '+=' <Op Assign>
        <Op Assign> ::= _ <Op If> '-=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '-=' <Op Assign>
        <Op Assign> ::= _ <Op If> '*=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '*=' <Op Assign>
        <Op Assign> ::= _ <Op If> '/=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '/=' <Op Assign>
        <Op Assign> ::= _ <Op If> '^=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '^=' <Op Assign>
        <Op Assign> ::= _ <Op If> '&=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '&=' <Op Assign>
        <Op Assign> ::= _ <Op If> '|=' <Op Assign>                                      <Op Assign> ::= ^ <Op If> '|=' <Op Assign>
        <Op Assign> ::= _ <Op If> '>>=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '>>=' <Op Assign>
        <Op Assign> ::= _ <Op If> '<<=' <Op Assign>                                     <Op Assign> ::= ^ <Op If> '<<=' <Op Assign>
        <Op Assign> ::= _ <Op If>                                                       <Op Assign> ::= ^ <Op If>
        <Op If> ::= _ <Op Or> '?' <Op If> ':' <Op If>                                   <Op If> ::= ^ <Op Or> '?' <Op If> ':' <Op If>
        <Op If> ::= _ <Op Or>                                                           <Op If> ::= ^ <Op Or>
        <Op Or> ::= _ <Op Or> '||' <Op And>                                             <Op Or> ::= ^ <Op Or> '||' <Op And>
        <Op Or> ::= _ <Op And>                                                          <Op Or> ::= ^ <Op And>
        <Op And> ::= _ <Op And> '&&' <Op BinOR>                                         <Op And> ::= ^ <Op And> '&&' <Op BinOR>
        <Op And> ::= _ <Op BinOR>                                                       <Op And> ::= ^ <Op BinOR>
        <Op BinOR> ::= _ <Op BinOR> '|' <Op BinXOR>                                     <Op BinOR> ::= ^ <Op BinOR> '|' <Op BinXOR>
        <Op BinOR> ::= _ <Op BinXOR>                                                    <Op BinOR> ::= ^ <Op BinXOR>
        <Op BinXOR> ::= _ <Op BinXOR> '^' <Op BinAND>                                   <Op BinXOR> ::= ^ <Op BinXOR> '^' <Op BinAND>
        <Op BinXOR> ::= _ <Op BinAND>                                                   <Op BinXOR> ::= ^ <Op BinAND>
        <Op BinAND> ::= _ <Op BinAND> '&' <Op Equate>                                   <Op BinAND> ::= ^ <Op BinAND> '&' <Op Equate>
        <Op BinAND> ::= _ <Op Equate>                                                   <Op BinAND> ::= ^ <Op Equate>
        <Op Equate> ::= _ <Op Equate> '==' <Op NEqual>                                  <Op Equate> ::= ^ <Op Equate> '==' <Op NEqual>
        <Op Equate> ::= _ <Op NEqual>                                                   <Op Equate> ::= ^ <Op NEqual>
        <Op NEqual> ::= _ <Op NEqual> '!=' <Op Compare>                                 <Op NEqual> ::= ^ <Op NEqual> '!=' <Op Compare>
        <Op NEqual> ::= _ <Op Compare>                                                  <Op NEqual> ::= ^ <Op Compare>
        <Op Compare> ::= _ <Op Compare> '<' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '<' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>' <Op Shift>                                  <Op Compare> ::= ^ <Op Compare> '>' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '<=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '<=' <Op Shift>
        <Op Compare> ::= _ <Op Compare> '>=' <Op Shift>                                 <Op Compare> ::= ^ <Op Compare> '>=' <Op Shift>
        <Op Compare> ::= _ <Op Shift>                                                   <Op Compare> ::= ^ <Op Shift>
        <Op Shift> ::= _ <Op Shift> '<<' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<<' <Op Add>
        <Op Shift> ::= _ <Op Shift> '>>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '>>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '~>' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '~>' <Op Add>
        <Op Shift> ::= _ <Op Shift> '<~' <Op Add>                                       <Op Shift> ::= ^ <Op Shift> '<~' <Op Add>
        <Op Shift> ::= _ <Op Add>                                                       <Op Shift> ::= ^ <Op Add>
        <Op Add> ::= _ <Op Add> '+' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '+' <Op Mult>
        <Op Add> ::= _ <Op Add> '-' <Op Mult>                                           <Op Add> ::= ^ <Op Add> '-' <Op Mult>
        <Op Add> ::= _ <Op Mult>                                                        <Op Add> ::= ^ <Op Mult>
        <Op Mult> ::= _ <Op Mult> '*' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '*' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '/' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '/' <Op Unary>
        <Op Mult> ::= _ <Op Mult> '%' <Op Unary>                                        <Op Mult> ::= ^ <Op Mult> '%' <Op Unary>
        <Op Mult> ::= _ <Op Unary>                                                      <Op Mult> ::= ^ <Op Unary>
        <Op Unary> ::= _ '!' <Op Unary>                                                 <Op Unary> ::= ^ '!' <Op Unary>
        <Op Unary> ::= _ '~' <Op Unary>                                                 <Op Unary> ::= ^ '~' <Op Unary>
        <Op Unary> ::= _ '-' <Op Unary>                                                 <Op Unary> ::= ^ '-' <Op Unary>
        <Op Unary> ::= _ '*' <Op Unary>                                                 <Op Unary> ::= ^ '*' <Op Unary>
        <Op Unary> ::= _ '&' <Op Unary>                                                 <Op Unary> ::= ^ '&' <Op Unary>
        <Op Unary> ::= _ '++' <Op Unary>                                                <Op Unary> ::= ^ '++' <Op Unary>
        <Op Unary> ::= _ '--' <Op Unary>                                                <Op Unary> ::= ^ '--' <Op Unary>
        <Op Unary> ::= _ '£' <Op Unary>                                                 <Op Unary> ::= ^ '£' <Op Unary>
        <Op Unary> ::= _ '$' <Op Unary>                                                 <Op Unary> ::= ^ '$' <Op Unary>
        <Op Unary> ::= _ <Op Pointer> '++'                                              <Op Unary> ::= ^ <Op Pointer> '++'
        <Op Unary> ::= _ <Op Pointer> '--'                                              <Op Unary> ::= ^ <Op Pointer> '--'
        <Op Unary> ::= _ '(' <Type> ')' <Op Unary>                                      <Op Unary> ::= ^ '(' <Type> ')' <Op Unary>
        <Op Unary> ::= _ sizeof '(' <Type> ')'                                          <Op Unary> ::= ^ sizeof '(' <Type> ')'
        <Op Unary> ::= _ sizeof '(' Id <Pointers> ')'                                   <Op Unary> ::= ^ sizeof '(' Id <Pointers> ')'
        <Op Unary> ::= _ <Op Pointer>                                                   <Op Unary> ::= ^ <Op Pointer>
        <Op Pointer> ::= _ <Op Pointer> '.' <Value>                                     <Op Pointer> ::= ^ <Op Pointer> '.' <Value>
        <Op Pointer> ::= _ <Op Pointer> '->' <Value>                                    <Op Pointer> ::= ^ <Op Pointer> '->' <Value>
        <Op Pointer> ::= _ Id '::' <Value>                                              <Op Pointer> ::= ^ Id '::' <Value>
        <Op Pointer> ::= _ <Op Pointer> '[' <Expression> ']'                            <Op Pointer> ::= ^ <Op Pointer> '[' <Expression> ']'
        <Op Pointer> ::= _ <Value>                                                      <Op Pointer> ::= ^ <Value>
        <Value> ::= _ OctLiteral                                                        <Value> ::= ^ OctLiteral
        <Value> ::= _ HexLiteral                                                        <Value> ::= ^ HexLiteral
        <Value> ::= _ DecLiteral                                                        <Value> ::= ^ DecLiteral
        <Value> ::= _ StringLiteral                                                     <Value> ::= ^ StringLiteral
        <Value> ::= _ CharLiteral                                                       <Value> ::= ^ CharLiteral
        <Value> ::= _ BinaryLiteral                                                     <Value> ::= ^ BinaryLiteral
        <Value> ::= _ BooleanLiteral                                                    <Value> ::= ^ BooleanLiteral
        <Value> ::= _ NullLiteral                                                       <Value> ::= ^ NullLiteral
        <Value> ::= _ Id '(' <PARAM EXPR> ')'                                           <Value> ::= ^ Id '(' <PARAM EXPR> ')'
        <Value> ::= _ Id '(' ')'                                                        <Value> ::= ^ Id '(' ')'
        <Value> ::= _ Id                                                                <Value> ::= ^ Id
        <Value> ::= _ '(' <Expression> ')'                                              <Value> ::= ^ '(' <Expression> ')'
        <Value> ::= _ <REGISTER>                                                        <Value> ::= ^ <REGISTER>
        <REGISTER> ::= _ AX                                                             <REGISTER> ::= ^ AX
        <REGISTER> ::= _ BX                                                             <REGISTER> ::= ^ BX
        <REGISTER> ::= _ CX                                                             <REGISTER> ::= ^ CX
        <REGISTER> ::= _ DX                                                             <REGISTER> ::= ^ DX
        <REGISTER> ::= _ SI                                                             <REGISTER> ::= ^ SI
        <REGISTER> ::= _ DI                                                             <REGISTER> ::= ^ DI
        <REGISTER> ::= _ SP                                                             <REGISTER> ::= ^ SP
        <REGISTER> ::= _ BP                                                             <REGISTER> ::= ^ BP
        <REGISTER> ::= _ CS                                                             <REGISTER> ::= ^ CS
        <REGISTER> ::= _ DS                                                             <REGISTER> ::= ^ DS
        <REGISTER> ::= _ ES                                                             <REGISTER> ::= ^ ES
        <REGISTER> ::= _ FS                                                             <REGISTER> ::= ^ FS
        <REGISTER> ::= _ GS                                                             <REGISTER> ::= ^ GS
        <REGISTER> ::= _ SS                                                             <REGISTER> ::= ^ SS
        <REGISTER> ::= _ AH                                                             <REGISTER> ::= ^ AH
        <REGISTER> ::= _ AL                                                             <REGISTER> ::= ^ AL
        <REGISTER> ::= _ BH                                                             <REGISTER> ::= ^ BH
        <REGISTER> ::= _ BL                                                             <REGISTER> ::= ^ BL
        <REGISTER> ::= _ CH                                                             <REGISTER> ::= ^ CH
        <REGISTER> ::= _ CL                                                             <REGISTER> ::= ^ CL
        <REGISTER> ::= _ DH                                                             <REGISTER> ::= ^ DH
        <REGISTER> ::= _ DL                                                             <REGISTER> ::= ^ DL

        '-' s 124
        '--' s 125
        '!' s 126
        '$' s 127
        '&' s 128
        '(' s 129
        '*' s 130
        ';' s 213
        '@' s 1
        '{' s 116
        '~' s 132
        '++' s 133
        '£' s 134
        AH s 135
        AL s 136
        asm s 214
        AX s 137
        BH s 138
        BinaryLiteral s 139
        BL s 140
        bool s 2
        BooleanLiteral s 141
        BP s 142
        break s 215
        BX s 143
        byte s 3
        CH s 144
        CharLiteral s 145
        CL s 146
        const s 5
        continue s 216
        CS s 147
        CX s 148
        DecLiteral s 149
        DH s 150
        DI s 151
        DL s 152
        do s 217
        DS s 153
        DX s 154
        enum s 47
        ES s 155
        extern s 8
        for s 442
        FS s 156
        goto s 219
        GS s 157
        HexLiteral s 158
        Id s 220
        if s 443
        int s 10
        loop s 222
        next s 223
        NullLiteral s 160
        OctLiteral s 161
        private s 13
        return s 224
        sbyte s 14
        SI s 162
        sizeof s 163
        SP s 164
        SS s 165
        static s 15
        string s 17
        StringLiteral s 166
        struct s 48
        switch s 225
        uint s 20
        void s 22
        while s 444
        <Base> g 23
        <Block> g 227
        <Expression> g 228
        <Mod> g 35
        <Normal Stm> g 445
        <Op Add> g 168
        <Op And> g 169
        <Op Assign> g 170
        <Op BinAND> g 171
        <Op BinOR> g 172
        <Op BinXOR> g 173
        <Op Compare> g 174
        <Op Equate> g 175
        <Op If> g 176
        <Op Mult> g 177
        <Op NEqual> g 178
        <Op Or> g 179
        <Op Pointer> g 180
        <Op Shift> g 181
        <Op Unary> g 182
        <REGISTER> g 183
        <Scalar> g 38
        <Statement> g 473
        <Then Stm> g 484
        <Type> g 40
        <Value> g 184
        <Var Decl> g 232


State 484
        Prior States: 483

        <Then Stm> ::= for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Then Stm> _               <Then Stm> ::= for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Then Stm> ^

        else r 102




========================================
System Log
========================================

Grammar        Success           The grammar was successfully analyzed
LALR States    Warning   25      A Shift-Reduce Conflict was fixed
LALR States    Warning   25      A Shift-Reduce Conflict was fixed
LALR States    Warning   25      A Shift-Reduce Conflict was fixed
LALR States    Warning   25      A Shift-Reduce Conflict was fixed
LALR States    Warning   25      A Shift-Reduce Conflict was fixed
LALR States    Warning   25      A Shift-Reduce Conflict was fixed
LALR States    Warning   25      A Shift-Reduce Conflict was fixed
LALR States    Warning   25      A Shift-Reduce Conflict was fixed
LALR States    Warning   25      A Shift-Reduce Conflict was fixed
LALR States    Warning   25      A Shift-Reduce Conflict was fixed
LALR States    Warning   25      A Shift-Reduce Conflict was fixed
LALR States    Warning   25      A Shift-Reduce Conflict was fixed
LALR States    Warning   25      A Shift-Reduce Conflict was fixed
LALR States    Warning   25      A Shift-Reduce Conflict was fixed
LALR States    Warning   25      A Shift-Reduce Conflict was fixed
LALR States    Warning   25      A Shift-Reduce Conflict was fixed
LALR States    Warning   25      A Shift-Reduce Conflict was fixed
LALR States    Warning   25      A Shift-Reduce Conflict was fixed
LALR States    Warning   25      A Shift-Reduce Conflict was fixed
LALR States    Warning   25      A Shift-Reduce Conflict was fixed
LALR States    Warning   251     A Shift-Reduce Conflict was fixed
LALR States    Success           LALR Table was succesfully created
DFA States     Success           The DFA State Table was successfully created


